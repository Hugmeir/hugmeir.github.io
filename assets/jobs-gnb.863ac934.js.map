{"version":3,"file":"assets/jobs-gnb.863ac934.js","mappings":"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","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.module.css?2f05","webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Tincture.ts","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/Ammo.tsx","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/AmmoCombo.tsx","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/AoE.ts","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/Combos.tsx","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/Cooldowns.tsx","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/NoMercy.tsx","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/Tincture.tsx","webpack://@xivanalysis/client/./src/parser/jobs/gnb/modules/index.tsx"],"sourcesContent":["import {Trans} from '@lingui/react'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ChargeHistoryEntry, CooldownEndReason, CooldownGroup, CooldownHistoryEntry, Cooldowns, SelectionSpecifier} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, BaseItem, ContainerRow, SimpleItem, Timeline} from 'parser/core/modules/Timeline'\nimport React, {ReactNode} from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {ensureArray, isDefined} from 'utilities'\nimport styles from './ActionTimeline.module.css'\n\nconst ANIMATION_LOCK = 100\n\n// We're excluding the Action interface as it's unessecary for this config format, and complicates the discrimination later.\ntype RowSpecifierEntry = Exclude<SelectionSpecifier, Action>\n\n/**\n * One or more actions, action keys, or cooldown group IDs. The special-case\n * value \"GCD\" is available for selection of the GCD cooldown group.\n */\nexport type RowSpecifier = RowSpecifierEntry | RowSpecifierEntry[]\n\n/** Advanced configuration options for a row. */\nexport interface ActionRowConfig {\n\t/** Specifier(s) for items that should be displayed in this row. */\n\tcontent: RowSpecifier\n\t/** Label to display for the row. */\n\tlabel?: ReactNode\n\t/** Order of the row within the timeline. */\n\torder?: number\n\t/** For multi-action rows, should we resolve the name of the action late?\n\t*  This allows setting the name of the row to whatever actions was first used\n\t*  of the set of possibilities.\n\t* */\n\tlateResolveLabel?: boolean\n}\n\n/** Configuration for a single row. */\nexport type ActionRow = RowSpecifier | ActionRowConfig\n\n// Internal row config used within the module\ntype InternalRowConfig =\n\t& Omit<ActionRowConfig, 'content'>\n\t& {content: readonly SelectionSpecifier[]}\n\nenum ItemDepth {\n\tCHARGE_GAIN = 0,\n\tACTION = 1,\n}\n\nexport class ActionTimeline extends Analyser {\n\tstatic override handle = 'actionTimeline'\n\tstatic override debug = false\n\n\t/**\n\t * Configuration for the rows generated by this module. Any cooldown groups\n\t * not represented in this configuration will be added to automatically\n\t * generated rows in order of use.\n\t */\n\tstatic rows: ActionRow[] = [\n\t\t{content: 'GCD', order: -97},\n\t]\n\n\t@dependency private castTime!: CastTime\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate resolvedRows: InternalRowConfig[] = []\n\tprivate groupRows = new Map<CooldownGroup, ContainerRow>()\n\n\t/** Retrieve the timeline row representing the specified action. */\n\tgetRow(action: ActionKey | Action) {\n\t\treturn this.addRow({content: [action]})\n\t}\n\n\toverride initialise() {\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of (this.constructor as typeof ActionTimeline).rows) {\n\t\t\tconst resolvedConfig = this.resolveConfig(config)\n\t\t\tthis.resolvedRows.push(resolvedConfig)\n\t\t\tthis.addRow(resolvedConfig)\n\t\t}\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprotected resolveRowLabel(config: InternalRowConfig) {\n\t\tfor (const maybeAction of config.content) {\n\t\t\tlet fullAction = undefined\n\t\t\tif (typeof maybeAction === 'object') {\n\t\t\t\tfullAction = maybeAction\n\t\t\t} else if (typeof maybeAction === 'number') {\n\t\t\t\tfullAction = this.data.getAction(maybeAction)\n\t\t\t} else if (typeof maybeAction === 'string') {\n\t\t\t\tfullAction = this.data.actions[maybeAction as ActionKey]\n\t\t\t}\n\t\t\tif (fullAction === undefined || fullAction === null) { continue }\n\n\t\t\tconst uses = this.cooldowns.cooldownHistory(fullAction.id) ?? []\n\t\t\tif (uses.length === 0) { continue }\n\n\t\t\treturn uses[0].action.name\n\t\t}\n\t}\n\tprivate onComplete() {\n\t\t// Track the groups with configured rows so backfill doesn't duplicate\n\t\tconst populatedGroups = new Set<number>()\n\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of this.resolvedRows) {\n\t\t\tconst row = this.addRow(config)\n\t\t\tif (config.lateResolveLabel) {\n\t\t\t\t// Resolve the label for multi-action rows late, by finding which one\n\t\t\t\t// of the actions was first used\n\t\t\t\trow.label = this.resolveRowLabel(config) ?? row.label\n\t\t\t}\n\t\t\tthis.populateRow(row, config)\n\t\t\tconfig.content.forEach(specifier =>\n\t\t\t\tthis.cooldowns.groups(specifier).forEach(group => populatedGroups.add(group))\n\t\t\t)\n\t\t}\n\n\t\t// Figure out what groups have not been explicitly configured and build rows for them\n\t\tthis.cooldowns.allGroups()\n\t\t\t.filter(group => !populatedGroups.has(group))\n\t\t\t.forEach(group => {\n\t\t\t\tconst config = {content: [group]}\n\t\t\t\tconst row = this.addRow(config)\n\t\t\t\tthis.populateRow(row, config)\n\t\t\t})\n\t}\n\n\tprivate resolveConfig(config: ActionRow): InternalRowConfig {\n\t\t// Standardise the simple config into the main config shape\n\t\tlet finalConfig = config\n\t\tif (typeof finalConfig !== 'object' || Array.isArray(finalConfig)) {\n\t\t\tfinalConfig = {content: finalConfig}\n\t\t}\n\t\treturn {\n\t\t\t...finalConfig,\n\t\t\tcontent: ensureArray(finalConfig.content),\n\t\t}\n\t}\n\n\tprivate addRow(config: InternalRowConfig) {\n\t\t// If there's already a row for one of the specifiers, use it\n\t\tconst groups = config.content.flatMap(specifier => this.cooldowns.groups(specifier))\n\t\tconst existingRow = groups\n\t\t\t.map(group => this.groupRows.get(group))\n\t\t\t.find(isDefined)\n\t\tif (existingRow != null) {\n\t\t\treturn existingRow\n\t\t}\n\n\t\t// Using an IIFE because pattern matching isn't in the spec yet\n\t\tconst firstContent = config.content[0]\n\t\tconst label = (() => {\n\t\t\tif (config.label != null) { return config.label }\n\t\t\tif (firstContent === 'GCD')  { return <Trans id=\"core.action-timeline.label.gcd\">GCD</Trans> }\n\t\t\tif (typeof firstContent === 'string') { return this.data.actions[firstContent].name }\n\t\t\tif (typeof firstContent === 'number') { return this.cooldowns.cooldownHistory(firstContent)[0]?.action.name }\n\t\t\treturn firstContent.name\n\t\t})()\n\n\t\t// Build the row and save it to the groups for this config\n\t\t// TODO: collision handling?\n\t\tconst row = this.timeline.addRow(new ContainerRow({\n\t\t\tlabel,\n\t\t\torder: config.order,\n\t\t\tcollapse: true,\n\t\t}))\n\t\tgroups.forEach(group => this.groupRows.set(group, row))\n\n\t\treturn row\n\t}\n\n\tprivate populateRow(row: ContainerRow, {content}: InternalRowConfig) {\n\t\t// Add all the items\n\t\tthis.addCooldownItems(row, content.flatMap(specifier => this.cooldowns.cooldownHistory(specifier)))\n\t\tthis.addChargeItems(row, content.flatMap(specifier => this.cooldowns.chargeHistory(specifier)))\n\t}\n\n\tprivate addCooldownItems(row: ContainerRow, history: CooldownHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst duration = this.getCooldownDuration(entry)\n\n\t\t\t// TODO: with the adjusted cast time we might get some overlaps, should we try to avoid that?]\n\t\t\t// TODO: Add interrupt visuals. CD2 only records interrupts within the bounds of a cooldown, so we'll need to track it in some manner for long-cast actions.\n\t\t\tconst start = entry.start - this.parser.pull.timestamp\n\t\t\tconst end = start + duration\n\t\t\trow.addItem(new SimpleItem({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tcontent: <div className={styles.cooldown}/>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate addChargeItems(row: ContainerRow, history: ChargeHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst item = entry.delta < 0\n\t\t\t\t? new ActionItem({\n\t\t\t\t\tdepth: ItemDepth.ACTION,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t\taction: entry.action,\n\t\t\t\t})\n\t\t\t\t: new ChargeGainItem({\n\t\t\t\t\tdepth: ItemDepth.CHARGE_GAIN,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t})\n\t\t\trow.addItem(item)\n\t\t}\n\t}\n\n\tprivate getCooldownDuration(entry: CooldownHistoryEntry) {\n\t\tlet duration = entry.end - entry.start\n\n\t\t// If the cooldown expired naturally, it _may_ have a cast time greater than its cooldown.\n\t\tif (entry.endReason === CooldownEndReason.EXPIRED) {\n\t\t\tconst castTime = this.castTime.forAction(entry.action.id, entry.start) ?? 0\n\n\t\t\t// We add the animation lock constant to the cast time to mimic the game's\n\t\t\t// behaviour - also sometimes known as \"caster tax\".\n\t\t\tduration = Math.max(duration, castTime + ANIMATION_LOCK)\n\t\t}\n\n\t\treturn duration\n\t}\n}\n\nclass ChargeGainItem extends BaseItem {\n\tContent = () => (\n\t\t<div className={styles.chargeGain}>\n\t\t\t<Icon name=\"angle double up\" className={styles.icon}/>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundColour\":\"rgba(213, 221, 246, .4)\",\"chargeColor\":\"color(rgba(213, 221, 246, .4) a(100%) l(-20%))\",\"cooldown\":\"ActionTimeline-module_cooldown__3u1x3\",\"chargeGain\":\"ActionTimeline-module_chargeGain__3-Of9\",\"icon\":\"ActionTimeline-module_icon__8OvsF\"};","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {BuffWindow} from './ActionWindow/windows/BuffWindow'\n\nexport class Tincture extends BuffWindow {\n\tstatic override handle = 'tincture'\n\tstatic override title = t('core.tincture.title')`Tinctures`\n\n\tbuffStatus = this.data.statuses.MEDICATED\n\n\t// No initialise since only the table display is desired without\n\t// any evaluation as to expected actions.\n}\n","import {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\n\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\n\t\t// Stance\n\t\t'ROYAL_GUARD',\n\n\t\t// Buffs\n\t\t'NO_MERCY',\n\t\t'BLOODFEST',\n\n\t\t// Continuation\n\t\t'CONTINUATION',\n\n\t\t// oGCD Damage\n\t\t'DANGER_ZONE',\n\t\t'BLASTING_ZONE',\n\t\t'BOW_SHOCK',\n\t\t'ROUGH_DIVIDE',\n\n\t\t// Personal Mitigation\n\t\t'SUPERBOLIDE',\n\t\t'CAMOUFLAGE',\n\t\t'NEBULA',\n\t\t'RAMPART',\n\n\t\t// Party Mitigation\n\t\t'HEART_OF_LIGHT',\n\t\t'HEART_OF_STONE',\n\t\t'HEART_OF_CORUNDUM',\n\t\t'AURORA',\n\t\t'REPRISAL',\n\n\t\t// Tank Utility\n\t\t'PROVOKE',\n\t\t'SHIRK',\n\n\t\t// Disrupt Utility\n\t\t'INTERJECT',\n\t\t'LOW_BLOW',\n\t\t'ARMS_LENGTH',\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {JOBS} from 'data/JOBS'\nimport {Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\ntype GaugeModifier = Partial<Record<Event['type'], number>>\n\nconst LEFTOVER_AMMO_SEVERITY_TIERS = {\n\t1: SEVERITY.MINOR,\n\t2: SEVERITY.MEDIUM,\n}\n\nconst MAX_AMMO = 3\n\nexport class Ammo extends CoreGauge {\n\tstatic override handle = 'ammo'\n\tstatic override title = t('gnb.ammo.title')`Cartridge Timeline`\n\n\t@dependency private suggestions!: Suggestions\n\t@dependency private checklist!: Checklist\n\n\tprivate ammoGauge = this.add(new CounterGauge({\n\t\tmaximum: MAX_AMMO,\n\t\t/* We'll see how people like it being in the timeline over a seperate chart.\n\t\tI've grown to prefer it on the timeline myself\n\t\tchart: {label: 'Ammo', color: JOBS.GUNBREAKER.colour}, */\n\t\tgraph: {\n\t\t\thandle: 'ammo',\n\t\t\tlabel: <Trans id=\"gnb.gauge.resource.ammoLabel\">Ammo</Trans>,\n\t\t\tcolor: JOBS.GUNBREAKER.colour,\n\t\t},\n\t}))\n\n\t// Used for Checklist as CounterGauge seems to lack total tracking at this time.\n\tprivate totalGeneratedAmmo = 0\n\n\tprivate ammoModifiers = new Map<number, GaugeModifier>([\n\t\t//Builders. Well more of loaders\n\t\t[this.data.actions.SOLID_BARREL.id, {combo: 1}],\n\t\t[this.data.actions.DEMON_SLAUGHTER.id, {combo: 1}],\n\t\t[this.data.actions.BLOODFEST.id, {action: MAX_AMMO}],\n\t\t//Spenders/Unloaders\n\t\t[this.data.actions.BURST_STRIKE.id, {action: -1}],\n\t\t[this.data.actions.FATED_CIRCLE.id, {action: -1}],\n\t\t[this.data.actions.GNASHING_FANG.id, {action: -1}],\n\t\t[this.data.actions.DOUBLE_DOWN.id, {action: -2}],\n\n\t])\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst ammoActions = Array.from(this.ammoModifiers.keys())\n\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type(oneOf(['action', 'combo']))\n\t\t\t\t.action(oneOf(ammoActions)),\n\t\t\tthis.onGaugeModifier,\n\t\t)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onGaugeModifier(event: Events['action' | 'combo']) {\n\t\tconst modifier = this.ammoModifiers.get(event.action)\n\n\t\tif (modifier != null) {\n\t\t\tconst amount = modifier[event.type] ?? 0\n\n\t\t\tif (amount > 0) {\n\t\t\t\tthis.totalGeneratedAmmo += amount //Increment total tracker for generated ammo\n\t\t\t}\n\t\t\tthis.ammoGauge.modify(amount)\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.BLOODFEST.icon,\n\t\t\tcontent: <Trans id=\"gnb.ammo.leftover-ammo.content\">\n\t\t\t\tAvoid having leftover ammo at the end of a fight, consider using the ammo earlier if possible. <ActionLink action=\"BURST_STRIKE\"/> is more potency than any of your <ActionLink action=\"SOLID_BARREL\"/> combo.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"gnb.ammo.leftover-ammo.why\">\n\t\t\t\tYou had <Plural value={this.ammoGauge.value} one=\"# cartridge\" other=\"# cartridges\"/> remaining at the end of the fight.\n\t\t\t</Trans>,\n\t\t\ttiers: LEFTOVER_AMMO_SEVERITY_TIERS,\n\t\t\tvalue: this.ammoGauge.value,\n\t\t}))\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"gnb.ammo.usage.title\">Cartridge usage</Trans>,\n\t\t\tdescription: <Trans id=\"gnb.ammo.waste.content\">\n\t\t\t\tWasted cartridge generation, ending the fight with cartridges loaded, or dying with cartridges loaded is a\n\t\t\t\tdirect potency loss. Use <ActionLink action=\"BURST_STRIKE\"/> (or <ActionLink action=\"FATED_CIRCLE\"/> if\n\t\t\t\tthere is more than one target) to avoid wasting cartridges.\n\t\t\t</Trans>,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"gnb.ammo.checklist.requirement.waste.name\">\n\t\t\t\t\t\tUse as many of your loaded cartridges as possible\n\t\t\t\t\t</Trans>,\n\t\t\t\t\tvalue: this.totalGeneratedAmmo - this.ammoGauge.overCap,\n\t\t\t\t\ttarget: this.totalGeneratedAmmo,\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {RotationTable} from 'components/ui/RotationTable'\nimport ACTIONS from 'data/ACTIONS'\nimport {Event, Events} from 'event'\nimport _ from 'lodash'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\n\n// Expected within a standard gnashing.\nconst EXPECTED_USES = {\n\tJUGULAR_RIP: 1,\n\tSAVAGE_CLAW: 1,\n\tABDOMEN_TEAR: 1,\n\tWICKED_TALON: 1,\n\tEYE_GOUGE: 1,\n\tTOTAL_SKILLS_PER_COMBO: 6,\n}\n\nclass GnashingComboState {\n\tstartTime: number\n\tendTime?: number\n\trotation: Array<Events['action']>\n\tisProper: boolean = false\n\n\tconstructor(start: number) {\n\t\tthis.startTime = start\n\t\tthis.rotation = []\n\t}\n\tpublic get totalHits(): number { return this.rotation.length }\n\n}\n\nexport class AmmoCombo extends Analyser {\n\tstatic override handle = 'Gnashing Fang Combo issues'\n\tstatic override debug = false\n\n\t@dependency private checklist!: Checklist\n\t@dependency private timeline!: Timeline\n\t@dependency private data!: Data\n\n\tprivate buffs = 0\n\tprivate actions = 0\n\tprivate errors = 0\n\n\tprivate COMBO_BREAKERS = [this.data.actions.KEEN_EDGE.id, this.data.actions.BRUTAL_SHELL.id, this.data.actions.SOLID_BARREL.id] // These skills will break the Gnashing combo\n\tprivate COMBO_ACTIONS = [this.data.actions.GNASHING_FANG.id, this.data.actions.JUGULAR_RIP.id, this.data.actions.SAVAGE_CLAW.id, this.data.actions.ABDOMEN_TEAR.id, this.data.actions.WICKED_TALON.id, ACTIONS.EYE_GOUGE.id]\n\n\tprivate gnashingComboWindows: GnashingComboState[] = [] // Store all the gnashing fang combos to be output to the rotationTable\n\n\tprivate get lastGnashingCombo(): GnashingComboState | undefined {\n\t\treturn _.last(this.gnashingComboWindows)\n\t}\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst RELEVANT_ACTIONS = [this.data.actions.JUGULAR_RIP.id, this.data.actions.ABDOMEN_TEAR.id, this.data.actions.EYE_GOUGE.id, this.data.actions.HYPERVELOCITY.id]\n\t\tconst RELEVANT_STATUSES = [this.data.statuses.READY_TO_TEAR.id, this.data.statuses.READY_TO_RIP.id, this.data.statuses.READY_TO_GOUGE.id, this.data.statuses.READY_TO_BLAST.id]\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(oneOf(RELEVANT_STATUSES)), () => this.buffs++)\n\t\tthis.addEventHook(playerFilter.type('action').action(oneOf(RELEVANT_ACTIONS)), () => this.actions++)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\tonCast(event: Events['action']): void {\n\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (action) { //If it ain't defined I don't want it\n\n\t\t\t// If ain't a combo or a breaker IDGAF\n\t\t\tif (!this.COMBO_ACTIONS.includes(action.id)  || (!this.COMBO_BREAKERS.includes(action.id))) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlet lastGnashingCombo = this.lastGnashingCombo\n\n\t\t\tthis.debug(`Checking if action ${action?.name} (${action}) is a Gnashing Fang action`)\n\n\t\t\tif (action === this.data.actions.GNASHING_FANG) {\n\n\t\t\t\tthis.debug(`Action ${action?.name} (${action}) is a Gnashing Fang action`)\n\n\t\t\t\tif (lastGnashingCombo != null && lastGnashingCombo.endTime == null) { // They dropped the combo via timeout\n\t\t\t\t\tthis.onEndGnashingCombo(event)\n\t\t\t\t}\n\n\t\t\t\tconst gnashingComboState = new GnashingComboState(event.timestamp)\n\t\t\t\tthis.gnashingComboWindows.push(gnashingComboState)\n\t\t\t}\n\n\t\t\tif (this.COMBO_BREAKERS.includes(action.id)) {\n\n\t\t\t\tthis.onEndGnashingCombo(event)\n\t\t\t}\n\n\t\t\t// If the action is a gnashingCombo one, log it\n\n\t\t\tlastGnashingCombo = this.lastGnashingCombo\n\n\t\t\tif (lastGnashingCombo != null && lastGnashingCombo.endTime == null) {\n\n\t\t\t\tif (this.COMBO_ACTIONS.includes(action.id)) {\n\t\t\t\t\tlastGnashingCombo.rotation.push(event)\n\n\t\t\t\t\tif (action === this.data.actions.EYE_GOUGE) {\n\t\t\t\t\t\tthis.onEndGnashingCombo(event)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onEndGnashingCombo(event: Events['action']) {\n\n\t\tconst lastGnashingCombo = this.lastGnashingCombo\n\n\t\tif (lastGnashingCombo != null) {\n\n\t\t\tlastGnashingCombo.endTime = event.timestamp\n\n\t\t\tif (lastGnashingCombo.totalHits === EXPECTED_USES.TOTAL_SKILLS_PER_COMBO) {\n\t\t\t\tlastGnashingCombo.isProper = true\n\t\t\t}\n\n\t\t\tif (lastGnashingCombo.isProper === false) {\n\t\t\t\tthis.errors++\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\n\t\tconst lastGnashingCombo = this.lastGnashingCombo\n\n\t\tif (lastGnashingCombo != null && lastGnashingCombo.endTime == null) {\n\n\t\t\tlastGnashingCombo.endTime = this.parser.currentEpochTimestamp\n\t\t}\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"gnb.continuation.checklist.title\">Use a Continuation once per single-target ammo action</Trans>,\n\t\t\tdescription: <Trans id=\"gnb.continuation.checklist.description\">\n\t\t\t\tOne <ActionLink {...ACTIONS.CONTINUATION}/> action should be used for each single-target ammo skill\n\t\t\t</Trans>,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"gnb.continuation.checklist.requirement.continuation.name\">\n\t\t\t\t\t\t<ActionLink {...ACTIONS.CONTINUATION}/> uses per <ActionLink {...ACTIONS.GNASHING_FANG}/> combo action\n\t\t\t\t\t</Trans>,\n\t\t\t\t\tvalue: this.actions,\n\t\t\t\t\ttarget: this.buffs,\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\t}\n\n\toverride output() {\n\n\t\tif (this.errors !== 0) {\n\n\t\t\treturn <RotationTable\n\t\t\t\ttargets={[\n\t\t\t\t\t{\n\t\t\t\t\t\theader: <ActionLink showName={false} {...ACTIONS.GNASHING_FANG}/>,\n\t\t\t\t\t\taccessor: 'TotalActions',\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t\tdata={this.gnashingComboWindows\n\t\t\t\t\t.filter(window => !window.isProper)\n\t\t\t\t\t.map(window => {\n\t\t\t\t\t\treturn ({\n\t\t\t\t\t\t\tstart: window.startTime - this.parser.pull.timestamp,\n\t\t\t\t\t\t\tend: window.endTime != null ? window.endTime - this.parser.pull.timestamp : window.startTime - this.parser.pull.timestamp,\n\t\t\t\t\t\t\ttargetsData: {\n\t\t\t\t\t\t\t\tTotalActions: {\n\t\t\t\t\t\t\t\t\tactual: window.totalHits,\n\t\t\t\t\t\t\t\t\texpected: EXPECTED_USES.TOTAL_SKILLS_PER_COMBO,\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trotation: window.rotation,\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tonGoto={this.timeline.show}\n\t\t\t/>\n\t\t}\n\t}\n}\n","import {AoEAction, AoEUsages} from 'parser/core/modules/AoEUsages'\n\nexport class AoE extends AoEUsages {\n\tstatic override handle = 'aoe'\n\n\tsuggestionIcon = this.data.actions.FATED_CIRCLE.icon\n\n\t/*\n\tThis does NOT cover the following optimizing trick covered by Rin:\n\t\tWhile this isn't any specific fight knowledge, I realize I can't recall if I've ever said this tech before and it might prove useful here and there for peeps.\n\t\tUnder the following conditions\n\t\t\t- Boss leaves in 3 GCDs\n\t\t\t- 3rd GCD Ghosts\n\t\t\t- Gnashing isn't up\n\t\t\t- You wish to end cartridge neutral\n\t\t\t- You were not mid combo:\n\t\t650p in 2 GCDs\n\t\tBurst Strike(500p), Demon Slice(150p), Demon Slaughter(0p Ghosts)\n\t\tVersus\n\t\t500p in 2 GCDs\n\t\tKeen Edge(200p), Brutal Shell(300p), Solid Barrel(0p Ghosts)\n\t\tIf you would get all 3 GCDs with no ghosting then Both combos are 900 potency\n\tI consider this to be high level enough that if you are doing this, you know what you are doing.\n\t*/\n\n\ttrackedActions: AoEAction[] = [\n\t\t{\n\t\t\taoeAction: this.data.actions.DEMON_SLICE,\n\t\t\tstActions: [this.data.actions.KEEN_EDGE],\n\t\t\tminTargets: 2, //May cause erroneous good feedback if they forget to fated circle/choose not to after\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.FATED_CIRCLE,\n\t\t\tstActions: [this.data.actions.BURST_STRIKE],\n\t\t\tminTargets: 2,\n\t\t},\n\t]\n\n}\n\n","import ACTIONS from 'data/ACTIONS'\nimport {Combos as CoreCombos} from 'parser/core/modules/Combos'\n\nexport class Combos extends CoreCombos {\n\t// Overrides\n\toverride suggestionIcon = ACTIONS.BRUTAL_SHELL.icon\n}\n","import {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\n/*\nGNB: There is no spefific opener, it's fight dependent\nAlso GNB: makes no easy track record of each fight by fight opener\n\nThat being said, 1NM23 is the \"general all rounder\" opener for blind prog,\n1NM23 captures all big buttons with raid buffs unlike the 6.0 123NM opener that *may* miss\n\n*Current offsets are based off: 6.1 Opener / 1NM23 (https://media.discordapp.net/attachments/441424599310270464/1010362485578145842/unknown.png?width=1664&height=936)\n*Note: This infograph is out of date due to it using 6.1 BF, but the opener offsets are the safe.\n\n*All values are seperate in case the current ones fall out of favor in the future\n*/\n\nconst FIRST_USE_OFFSET_NO_MERCY = 2500 // Current opener has NM used as before 2nd gcd, but in second weave slot\n\nconst FIRST_USE_OFFSET_BLOODFEST = 10000 // Current Opener have bloodfest by after the 4th gcd\n\nconst FIRST_USE_OFFSET_PEWPEWZONE = 12500 // Current Opener has Blasting and Bow after 5th\nconst FIRST_USE_OFFSET_BOWSHOCK = 12500\n\nconst FIRST_USE_OFFSET_DOUBLE_DOWN = 12500 //Curent Opener has double being used as 5th GCD. *GCD Skill*\n\nconst FIRST_USE_OFFSET_DIVIDE = 15000 //Current Opener has rough divide set to be after 6th GCD\n\nconst FIRST_USE_OFFSET_SONIC_BREAK = 15000 //Current Opener has Sonic Break as 6th GCD *GCD Skill*\n\nexport class AbilityDowntime extends CooldownDowntime {\n\n\ttrackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.NO_MERCY],\n\t\t\tfirstUseOffset: FIRST_USE_OFFSET_NO_MERCY,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.BLOODFEST],\n\t\t\tfirstUseOffset: FIRST_USE_OFFSET_BLOODFEST,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.DOUBLE_DOWN],\n\t\t\tfirstUseOffset: FIRST_USE_OFFSET_DOUBLE_DOWN,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.SONIC_BREAK],\n\t\t\tfirseUseOffset: FIRST_USE_OFFSET_SONIC_BREAK,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.BLASTING_ZONE, this.data.actions.DANGER_ZONE],\n\t\t\tfirstUseOffset: FIRST_USE_OFFSET_PEWPEWZONE,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.BOW_SHOCK],\n\t\t\tfirstUseOffset: FIRST_USE_OFFSET_BOWSHOCK,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.ROUGH_DIVIDE],\n\t\t\tfirstUseOffset: FIRST_USE_OFFSET_DIVIDE, // but not by 0.\n\t\t},\n\t]\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.SUPERBOLIDE,\n\t\tthis.data.actions.NEBULA,\n\t\tthis.data.actions.HEART_OF_LIGHT,\n\t\tthis.data.actions.HEART_OF_CORUNDUM,\n\t\tthis.data.actions.AURORA,\n\t\tthis.data.actions.CAMOUFLAGE,\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {dependency} from 'parser/core/Injectable'\nimport {BuffWindow, EvaluatedAction, ExpectedActionsEvaluator, ExpectedGcdCountEvaluator, NotesEvaluator, TrackedAction} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nconst SEVERITIES = {\n\tMISSING_EXPECTED_USES: {\n\t\t1: SEVERITY.MINOR,\n\t\t4: SEVERITY.MEDIUM,\n\t\t8: SEVERITY.MAJOR,\n\t},\n\n\tTOO_FEW_GCDS: {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t4: SEVERITY.MAJOR,\n\t},\n}\n\nconst GCD_SLOW = 2.47\n\nconst EXPECTED_USES = {\n\tDOUBLE_DOWN: 1, //This is assuming that you enter NM with 3 carts: 1 cart: Gnashing, 2 carts: Double Down\n\tBURST_STRIKE: 1,\n\tGNASHING_FANG: 1,\n\tSONIC_BREAK: 1,\n\tROUGH_DIVIDE: 1,\n\tBLASTING_ZONE: 1,\n\tBOW_SHOCK: 1,\n\tGCD: 9,\n\tGCD_SLOW: 8,\n\n\t// Don't check for correct Continuations; that will be covered by the Continuation module.\n\t// Don't check for correctness on the Gnashing Fang combo; that's covered by the built-in Combo tracker.\n}\n\nconst openerGracePeriod = 22500 //Perhaps I'm being overly generous, but after 9 regular gcds a proper full burst could be done.\n\nclass BloodfestEvaluator extends NotesEvaluator {\n\n\t// Because this class is not an Analyser, it cannot use Data directly\n\t// to get the id for Bloodfest, so it has to take it in here.\n\tprivate bloodfestId: number\n\n\tconstructor(bloodfestId: number) {\n\t\tsuper()\n\t\tthis.bloodfestId = bloodfestId\n\t}\n\n\theader = {\n\t\theader: <Trans id=\"gnb.nomercy.notes.header\">Bloodfest Used</Trans>,\n\t\taccessor: 'bloodfestused',\n\t}\n\n\toverride generateNotes(window: HistoryEntry<EvaluatedAction[]>) {\n\t\treturn window.data.find(cast => cast.action.id === this.bloodfestId) ?\n\t\t\t<Trans id=\"gnb.nomercy.chart.notes.yes\">Yes</Trans> : <Trans id = \"gnb.nomercy.chart.notes.no\">No</Trans>\n\n\t}\n}\n\nexport class NoMercy extends BuffWindow {\n\tstatic override handle = 'nomercy'\n\tstatic override title = t('gnb.nomercy.title')`No Mercy Windows`\n\n\t@dependency globalCooldown!: GlobalCooldown\n\n\toverride buffStatus = this.data.statuses.NO_MERCY\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst suggestionIcon = this.data.actions.NO_MERCY.icon\n\t\tconst suggestionWindowName = <ActionLink action=\"NO_MERCY\" showIcon={false}/>\n\t\tthis.addEvaluator(new ExpectedGcdCountEvaluator({\n\t\t\texpectedGcds: EXPECTED_USES.GCD,\n\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\thasStacks: false,\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"gnb.nomercy.suggestions.gcds.content\">\n\t\t\t\tTry to land {EXPECTED_USES.GCD} weaponskills ({EXPECTED_USES.GCD_SLOW} weaponskills at {GCD_SLOW} GCD or slower) during every <ActionLink action=\"NO_MERCY\" /> window.\n\t\t\t\t\tA 20 second duration fits all weaponskills with full uptime if you wait until the last third of your GCD timer to activate <ActionLink action=\"NO_MERCY\" />.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: SEVERITIES.TOO_FEW_GCDS,\n\t\t}))\n\n\t\tthis.addEvaluator(new ExpectedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.GNASHING_FANG,\n\t\t\t\t\texpectedPerWindow: EXPECTED_USES.GNASHING_FANG,\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.DOUBLE_DOWN,\n\t\t\t\t\texpectedPerWindow: EXPECTED_USES.DOUBLE_DOWN,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.BURST_STRIKE,\n\t\t\t\t\texpectedPerWindow: EXPECTED_USES.BURST_STRIKE,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.SONIC_BREAK,\n\t\t\t\t\texpectedPerWindow: EXPECTED_USES.SONIC_BREAK,\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.BLASTING_ZONE,\n\t\t\t\t\texpectedPerWindow: EXPECTED_USES.BLASTING_ZONE,\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.BOW_SHOCK,\n\t\t\t\t\texpectedPerWindow: EXPECTED_USES.BOW_SHOCK,\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.ROUGH_DIVIDE,\n\t\t\t\t\texpectedPerWindow: EXPECTED_USES.ROUGH_DIVIDE,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon,\n\t\t\tsuggestionContent: <Trans id=\"gnb.nomercy.suggestions.expected-uses.content\">\n\t\t\t\tWatch your uses of certain abilities during <ActionLink action=\"NO_MERCY\" />. Under ideal conditions, you should\n\t\t\t\t\tbe using <ActionLink action=\"SONIC_BREAK\" />, a full <ActionLink action=\"GNASHING_FANG\" /> combo, and all of\n\t\t\t\t\tyour off-GCD skills <ActionLink action=\"BLASTING_ZONE\" />, <ActionLink action=\"BOW_SHOCK\" />, and at least one\n\t\t\t\t\tcharge of <ActionLink action=\"ROUGH_DIVIDE\" /> under the buff duration.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName,\n\t\t\tseverityTiers: SEVERITIES.MISSING_EXPECTED_USES,\n\t\t\tadjustCount: this.adjustExpectedActionCount.bind(this),\n\t\t}))\n\n\t\tthis.addEvaluator(new BloodfestEvaluator(this.data.actions.BLOODFEST.id))\n\t}\n\n\tprivate adjustExpectedActionCount(window: HistoryEntry<EvaluatedAction[]>, action: TrackedAction) {\n\t\tif (action.action.id !== this.data.actions.BURST_STRIKE.id) { return 0 }\n\n\t\tif (window.data.find(cast => cast.action.id === this.data.actions.BLOODFEST.id) && window.start > (this.parser.pull.timestamp + openerGracePeriod)) {\n\t\t\t//Outside of opener, all Bloodfest NM bursts should have 6 ammo uses, 1 for GF combo 2 for DD and 3 for BS\n\t\t\treturn 2\n\t\t}\n\n\t\treturn 0\n\t}\n\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ExpectedActionsEvaluator} from 'parser/core/modules/ActionWindow'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport {Tincture as CoreTincture} from 'parser/core/modules/Tincture'\nimport React from 'react'\n\nexport class Tincture extends CoreTincture {\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEvaluator(new ExpectedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.WICKED_TALON,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.BLASTING_ZONE,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.DOUBLE_DOWN,\n\t\t\t\t\texpectedPerWindow: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon: this.data.actions.INFUSION_STR.icon,\n\t\t\tsuggestionContent: <Trans id=\"gnb.tincture.suggestions.trackedActions.content\">\n\t\t\t\tTry to cover as much damage as possible with your Tinctures of Strength.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName: <DataLink action=\"INFUSION_STR\" showIcon={false}/>,\n\t\t\tseverityTiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t\t3: SEVERITY.MAJOR,\n\t\t\t},\n\t\t}))\n\t}\n}\n","import {ActionTimeline} from './ActionTimeline'\nimport {Ammo} from './Ammo'\nimport {AmmoCombo} from './AmmoCombo'\nimport {AoE} from './AoE'\nimport {Combos} from './Combos'\nimport {AbilityDowntime} from './Cooldowns'\nimport {Defensives} from './Defensives'\nimport {NoMercy} from './NoMercy'\nimport {Tincture} from './Tincture'\n\nexport default [\n\tAbilityDowntime,\n\tActionTimeline,\n\tAmmo,\n\tAmmoCombo,\n\tAoE,\n\tCombos,\n\tDefensives,\n\tNoMercy,\n\tTincture,\n]\n"],"names":["ItemDepth","ActionTimeline","CastTime","Cooldowns","Data","Timeline","resolvedRows","groupRows","action","this","addRow","content","constructor","rows","config","resolvedConfig","resolveConfig","push","addEventHook","onComplete","maybeAction","fullAction","undefined","data","getAction","actions","uses","cooldowns","cooldownHistory","id","length","name","populatedGroups","row","lateResolveLabel","label","resolveRowLabel","populateRow","forEach","specifier","groups","group","add","allGroups","has","finalConfig","Array","isArray","ensureArray","existingRow","get","isDefined","firstContent","Trans","timeline","ContainerRow","order","collapse","set","addCooldownItems","addChargeItems","chargeHistory","history","entry","duration","getCooldownDuration","start","parser","pull","timestamp","end","addItem","SimpleItem","className","item","delta","ActionItem","depth","ACTION","ChargeGainItem","CHARGE_GAIN","endReason","CooldownEndReason","castTime","forAction","Math","max","Analyser","handle","debug","dependency","Content","styles","Icon","BaseItem","estimateHelp","__all","legacyFflogs","GlobalCooldown","Statistics","SpeedAdjustments","speedAdjustments","getAdjustedDuration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","SimpleStatistic","title","icon","ATTACK","value","formatDuration","getDuration","info","source","report","meta","Tincture","buffStatus","statuses","MEDICATED","BuffWindow","CoreActionTimeline","LEFTOVER_AMMO_SEVERITY_TIERS","SEVERITY","Ammo","Suggestions","Checklist","ammoGauge","CounterGauge","maximum","graph","color","JOBS","totalGeneratedAmmo","ammoModifiers","SOLID_BARREL","combo","DEMON_SLAUGHTER","BLOODFEST","BURST_STRIKE","FATED_CIRCLE","GNASHING_FANG","DOUBLE_DOWN","ammoActions","filter","actor","type","oneOf","onGaugeModifier","event","modifier","amount","modify","suggestions","TieredSuggestion","why","tiers","checklist","Rule","description","requirements","Requirement","overCap","target","CoreGauge","GnashingComboState","startTime","endTime","rotation","isProper","AmmoCombo","buffs","errors","COMBO_BREAKERS","KEEN_EDGE","BRUTAL_SHELL","COMBO_ACTIONS","JUGULAR_RIP","SAVAGE_CLAW","ABDOMEN_TEAR","WICKED_TALON","ACTIONS","gnashingComboWindows","RELEVANT_ACTIONS","EYE_GOUGE","HYPERVELOCITY","RELEVANT_STATUSES","READY_TO_TEAR","READY_TO_RIP","READY_TO_GOUGE","READY_TO_BLAST","playerFilter","status","lastGnashingCombo","onEndGnashingCombo","gnashingComboState","totalHits","currentEpochTimestamp","RotationTable","targets","header","showName","accessor","window","targetsData","TotalActions","actual","expected","onGoto","show","AoE","suggestionIcon","trackedActions","aoeAction","DEMON_SLICE","stActions","minTargets","AoEUsages","Combos","CoreCombos","AbilityDowntime","trackedCds","NO_MERCY","firstUseOffset","SONIC_BREAK","firseUseOffset","BLASTING_ZONE","DANGER_ZONE","BOW_SHOCK","ROUGH_DIVIDE","CooldownDowntime","Defensives","trackedDefensives","SUPERBOLIDE","NEBULA","HEART_OF_LIGHT","HEART_OF_CORUNDUM","AURORA","CAMOUFLAGE","CoreDefensives","SEVERITIES","MISSING_EXPECTED_USES","TOO_FEW_GCDS","BloodfestEvaluator","bloodfestId","cast","NotesEvaluator","NoMercy","suggestionWindowName","showIcon","addEvaluator","ExpectedGcdCountEvaluator","expectedGcds","globalCooldown","hasStacks","suggestionContent","GCD_SLOW","severityTiers","ExpectedActionsEvaluator","expectedActions","expectedPerWindow","adjustCount","adjustExpectedActionCount","bind","INFUSION_STR","CoreTincture"],"sourceRoot":""}