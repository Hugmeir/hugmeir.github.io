{"version":3,"file":"assets/jobs-mnk.0dd7fdc8.js","mappings":"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","sources":["webpack://@xivanalysis/client/./node_modules/@babel/runtime-corejs3/core-js-stable/math/trunc.js","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/ActionTimeline/ActionTimeline.module.css?2f05","webpack://@xivanalysis/client/./src/parser/core/modules/DoTs.ts","webpack://@xivanalysis/client/./src/parser/core/modules/GlobalCooldown.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Positionals.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Statuses.ts","webpack://@xivanalysis/client/./src/parser/core/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/ActionTimeline.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/AoE.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/CooldownDowntime.ts","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/Demolish.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/DISPLAY_ORDER.ts","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/constants.ts","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/utilities.ts","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/Forms.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/GreasedLightning.ts","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/Positionals.ts","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/Revolution.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/evaluators/BlitzEvaluator.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/RiddleOfFire.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/RiddleOfWind.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/Steppies.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/TwinSnakes.tsx","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/Weaving.ts","webpack://@xivanalysis/client/./src/parser/jobs/mnk/modules/index.ts","webpack://@xivanalysis/client/./node_modules/core-js-pure/es/math/trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/modules/es.math.trunc.js","webpack://@xivanalysis/client/./node_modules/core-js-pure/stable/math/trunc.js"],"sourcesContent":["module.exports = require(\"core-js-pure/stable/math/trunc\");","import {Trans} from '@lingui/react'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {ChargeHistoryEntry, CooldownEndReason, CooldownGroup, CooldownHistoryEntry, Cooldowns, SelectionSpecifier} from 'parser/core/modules/Cooldowns'\nimport {Data} from 'parser/core/modules/Data'\nimport {ActionItem, BaseItem, ContainerRow, SimpleItem, Timeline} from 'parser/core/modules/Timeline'\nimport React, {ReactNode} from 'react'\nimport {Icon} from 'semantic-ui-react'\nimport {ensureArray, isDefined} from 'utilities'\nimport styles from './ActionTimeline.module.css'\n\nconst ANIMATION_LOCK = 100\n\n// We're excluding the Action interface as it's unessecary for this config format, and complicates the discrimination later.\ntype RowSpecifierEntry = Exclude<SelectionSpecifier, Action>\n\n/**\n * One or more actions, action keys, or cooldown group IDs. The special-case\n * value \"GCD\" is available for selection of the GCD cooldown group.\n */\nexport type RowSpecifier = RowSpecifierEntry | RowSpecifierEntry[]\n\n/** Advanced configuration options for a row. */\nexport interface ActionRowConfig {\n\t/** Specifier(s) for items that should be displayed in this row. */\n\tcontent: RowSpecifier\n\t/** Label to display for the row. */\n\tlabel?: ReactNode\n\t/** Order of the row within the timeline. */\n\torder?: number\n\t/** For multi-action rows, should we resolve the name of the action late?\n\t*  This allows setting the name of the row to whatever actions was first used\n\t*  of the set of possibilities.\n\t* */\n\tlateResolveLabel?: boolean\n}\n\n/** Configuration for a single row. */\nexport type ActionRow = RowSpecifier | ActionRowConfig\n\n// Internal row config used within the module\ntype InternalRowConfig =\n\t& Omit<ActionRowConfig, 'content'>\n\t& {content: readonly SelectionSpecifier[]}\n\nenum ItemDepth {\n\tCHARGE_GAIN = 0,\n\tACTION = 1,\n}\n\nexport class ActionTimeline extends Analyser {\n\tstatic override handle = 'actionTimeline'\n\tstatic override debug = false\n\n\t/**\n\t * Configuration for the rows generated by this module. Any cooldown groups\n\t * not represented in this configuration will be added to automatically\n\t * generated rows in order of use.\n\t */\n\tstatic rows: ActionRow[] = [\n\t\t{content: 'GCD', order: -97},\n\t]\n\n\t@dependency private castTime!: CastTime\n\t@dependency private cooldowns!: Cooldowns\n\t@dependency private data!: Data\n\t@dependency private timeline!: Timeline\n\n\tprivate resolvedRows: InternalRowConfig[] = []\n\tprivate groupRows = new Map<CooldownGroup, ContainerRow>()\n\n\t/** Retrieve the timeline row representing the specified action. */\n\tgetRow(action: ActionKey | Action) {\n\t\treturn this.addRow({content: [action]})\n\t}\n\n\toverride initialise() {\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of (this.constructor as typeof ActionTimeline).rows) {\n\t\t\tconst resolvedConfig = this.resolveConfig(config)\n\t\t\tthis.resolvedRows.push(resolvedConfig)\n\t\t\tthis.addRow(resolvedConfig)\n\t\t}\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprotected resolveRowLabel(config: InternalRowConfig) {\n\t\tfor (const maybeAction of config.content) {\n\t\t\tlet fullAction = undefined\n\t\t\tif (typeof maybeAction === 'object') {\n\t\t\t\tfullAction = maybeAction\n\t\t\t} else if (typeof maybeAction === 'number') {\n\t\t\t\tfullAction = this.data.getAction(maybeAction)\n\t\t\t} else if (typeof maybeAction === 'string') {\n\t\t\t\tfullAction = this.data.actions[maybeAction as ActionKey]\n\t\t\t}\n\t\t\tif (fullAction === undefined || fullAction === null) { continue }\n\n\t\t\tconst uses = this.cooldowns.cooldownHistory(fullAction.id) ?? []\n\t\t\tif (uses.length === 0) { continue }\n\n\t\t\treturn uses[0].action.name\n\t\t}\n\t}\n\tprivate onComplete() {\n\t\t// Track the groups with configured rows so backfill doesn't duplicate\n\t\tconst populatedGroups = new Set<number>()\n\n\t\t// Add rows for all the configured entries\n\t\tfor (const config of this.resolvedRows) {\n\t\t\tconst row = this.addRow(config)\n\t\t\tif (config.lateResolveLabel) {\n\t\t\t\t// Resolve the label for multi-action rows late, by finding which one\n\t\t\t\t// of the actions was first used\n\t\t\t\trow.label = this.resolveRowLabel(config) ?? row.label\n\t\t\t}\n\t\t\tthis.populateRow(row, config)\n\t\t\tconfig.content.forEach(specifier =>\n\t\t\t\tthis.cooldowns.groups(specifier).forEach(group => populatedGroups.add(group))\n\t\t\t)\n\t\t}\n\n\t\t// Figure out what groups have not been explicitly configured and build rows for them\n\t\tthis.cooldowns.allGroups()\n\t\t\t.filter(group => !populatedGroups.has(group))\n\t\t\t.forEach(group => {\n\t\t\t\tconst config = {content: [group]}\n\t\t\t\tconst row = this.addRow(config)\n\t\t\t\tthis.populateRow(row, config)\n\t\t\t})\n\t}\n\n\tprivate resolveConfig(config: ActionRow): InternalRowConfig {\n\t\t// Standardise the simple config into the main config shape\n\t\tlet finalConfig = config\n\t\tif (typeof finalConfig !== 'object' || Array.isArray(finalConfig)) {\n\t\t\tfinalConfig = {content: finalConfig}\n\t\t}\n\t\treturn {\n\t\t\t...finalConfig,\n\t\t\tcontent: ensureArray(finalConfig.content),\n\t\t}\n\t}\n\n\tprivate addRow(config: InternalRowConfig) {\n\t\t// If there's already a row for one of the specifiers, use it\n\t\tconst groups = config.content.flatMap(specifier => this.cooldowns.groups(specifier))\n\t\tconst existingRow = groups\n\t\t\t.map(group => this.groupRows.get(group))\n\t\t\t.find(isDefined)\n\t\tif (existingRow != null) {\n\t\t\treturn existingRow\n\t\t}\n\n\t\t// Using an IIFE because pattern matching isn't in the spec yet\n\t\tconst firstContent = config.content[0]\n\t\tconst label = (() => {\n\t\t\tif (config.label != null) { return config.label }\n\t\t\tif (firstContent === 'GCD')  { return <Trans id=\"core.action-timeline.label.gcd\">GCD</Trans> }\n\t\t\tif (typeof firstContent === 'string') { return this.data.actions[firstContent].name }\n\t\t\tif (typeof firstContent === 'number') { return this.cooldowns.cooldownHistory(firstContent)[0]?.action.name }\n\t\t\treturn firstContent.name\n\t\t})()\n\n\t\t// Build the row and save it to the groups for this config\n\t\t// TODO: collision handling?\n\t\tconst row = this.timeline.addRow(new ContainerRow({\n\t\t\tlabel,\n\t\t\torder: config.order,\n\t\t\tcollapse: true,\n\t\t}))\n\t\tgroups.forEach(group => this.groupRows.set(group, row))\n\n\t\treturn row\n\t}\n\n\tprivate populateRow(row: ContainerRow, {content}: InternalRowConfig) {\n\t\t// Add all the items\n\t\tthis.addCooldownItems(row, content.flatMap(specifier => this.cooldowns.cooldownHistory(specifier)))\n\t\tthis.addChargeItems(row, content.flatMap(specifier => this.cooldowns.chargeHistory(specifier)))\n\t}\n\n\tprivate addCooldownItems(row: ContainerRow, history: CooldownHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst duration = this.getCooldownDuration(entry)\n\n\t\t\t// TODO: with the adjusted cast time we might get some overlaps, should we try to avoid that?]\n\t\t\t// TODO: Add interrupt visuals. CD2 only records interrupts within the bounds of a cooldown, so we'll need to track it in some manner for long-cast actions.\n\t\t\tconst start = entry.start - this.parser.pull.timestamp\n\t\t\tconst end = start + duration\n\t\t\trow.addItem(new SimpleItem({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tcontent: <div className={styles.cooldown}/>,\n\t\t\t}))\n\t\t}\n\t}\n\n\tprivate addChargeItems(row: ContainerRow, history: ChargeHistoryEntry[]) {\n\t\tfor (const entry of history) {\n\t\t\tconst item = entry.delta < 0\n\t\t\t\t? new ActionItem({\n\t\t\t\t\tdepth: ItemDepth.ACTION,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t\taction: entry.action,\n\t\t\t\t})\n\t\t\t\t: new ChargeGainItem({\n\t\t\t\t\tdepth: ItemDepth.CHARGE_GAIN,\n\t\t\t\t\tstart: entry.timestamp - this.parser.pull.timestamp,\n\t\t\t\t})\n\t\t\trow.addItem(item)\n\t\t}\n\t}\n\n\tprivate getCooldownDuration(entry: CooldownHistoryEntry) {\n\t\tlet duration = entry.end - entry.start\n\n\t\t// If the cooldown expired naturally, it _may_ have a cast time greater than its cooldown.\n\t\tif (entry.endReason === CooldownEndReason.EXPIRED) {\n\t\t\tconst castTime = this.castTime.forAction(entry.action.id, entry.start) ?? 0\n\n\t\t\t// We add the animation lock constant to the cast time to mimic the game's\n\t\t\t// behaviour - also sometimes known as \"caster tax\".\n\t\t\tduration = Math.max(duration, castTime + ANIMATION_LOCK)\n\t\t}\n\n\t\treturn duration\n\t}\n}\n\nclass ChargeGainItem extends BaseItem {\n\tContent = () => (\n\t\t<div className={styles.chargeGain}>\n\t\t\t<Icon name=\"angle double up\" className={styles.icon}/>\n\t\t</div>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundColour\":\"rgba(213, 221, 246, .4)\",\"chargeColor\":\"color(rgba(213, 221, 246, .4) a(100%) l(-20%))\",\"cooldown\":\"ActionTimeline-module_cooldown__3u1x3\",\"chargeGain\":\"ActionTimeline-module_chargeGain__3-Of9\",\"icon\":\"ActionTimeline-module_icon__8OvsF\"};","import {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actor, Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\n\nconst MILLISECONDS_PER_MINUTE = 60000\n\ntype DotTracking = Map<Status['id'], Map<Actor['id'], DotTargetTracking>>\ninterface DotTargetTracking {\n\tlastApplied: number\n\ttotalClipping: number\n}\n\nexport abstract class DoTs extends Analyser {\n\tstatic override handle = 'dots'\n\n\t@dependency protected data!: Data\n\t@dependency private actors!: Actors\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private statuses!: Statuses\n\n\t/** Implementing modules MUST override this with a list of Status IDs. */\n\tprotected abstract trackedStatuses: number[] = []\n\n\tprivate statusApplications: DotTracking = new Map<number, Map<string, DotTargetTracking>>()\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('statusApply')\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.status(oneOf(this.trackedStatuses)),\n\t\t\tthis.onApply,\n\t\t)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Implementing modules MUST override this to configure the checklist.\n\t * This should be handled on a job-by-job basis rather than generically, since the description\n\t * text isn't one-size-fits-all, and some jobs may have custom targets.\n\t */\n\tprotected abstract addChecklistRules(): void\n\n\t/**\n\t * Implementing modules MUST override this to configure suggestions.\n\t * This should be handled on a job-by-job basis rather than generically, since different jobs have\n\t * different thresholds for what constitutes bad clipping with varying explanations as to why.\n\t */\n\tprotected abstract addClippingSuggestions(): void\n\n\t/**\n\t * Implementing modules can optionally exclude applications of a status from clipping calculations.\n\t * (e.g. SMN rushing)\n\t */\n\tprotected excludeApplication() {\n\t\treturn false\n\t}\n\n\tprivate onApply(event: Events['statusApply']) {\n\t\tconst status = this.data.getStatus(event.status)\n\t\t// Cannot track for statuses that are not defined with a duration\n\t\tif (status?.duration == null) { return }\n\n\t\t// Get the tracking object for this status\n\t\tlet trackedStatus = this.statusApplications.get(status.id)\n\t\tif (trackedStatus == null) {\n\t\t\ttrackedStatus = new Map<string, DotTargetTracking>()\n\t\t\tthis.statusApplications.set(status.id, trackedStatus)\n\t\t}\n\n\t\t// Get the tracking object for this status on this target\n\t\tconst target = event.target\n\t\tlet trackedStatusOnTarget = trackedStatus.get(target)\n\t\tif (trackedStatusOnTarget == null) {\n\t\t\ttrackedStatusOnTarget = {lastApplied: 0, totalClipping: 0}\n\t\t\ttrackedStatus.set(target, trackedStatusOnTarget)\n\t\t}\n\n\t\t// If it's not been applied yet or should be excluded per job-specific logic (if any), set it and skip out\n\t\tif (trackedStatusOnTarget.lastApplied === 0 || this.excludeApplication()) {\n\t\t\ttrackedStatusOnTarget.lastApplied = event.timestamp\n\t\t\treturn\n\t\t}\n\n\t\t// Base clip calc\n\t\tconst clip = status.duration - (event.timestamp - trackedStatusOnTarget.lastApplied)\n\t\t// Cap clip at 0 - less than that is downtime, which is handled by the checklist requirement\n\t\ttrackedStatusOnTarget.totalClipping += Math.max(0, clip)\n\t\ttrackedStatusOnTarget.lastApplied = event.timestamp\n\t}\n\n\tprivate onComplete() {\n\t\tthis.addChecklistRules()\n\t\tthis.addClippingSuggestions()\n\t}\n\n\t// These two functions are helpers for submodules and should be used but not overridden\n\tprotected getUptimePercent(statusId: number) {\n\t\tconst status = this.data.getStatus(statusId)\n\t\tif (status == null) { return 0 }\n\n\t\tconst statusUptime = this.statuses.getUptime(status, this.actors.foes)\n\t\tconst fightDuration = this.parser.pull.duration - this.invulnerability.getDuration({types: ['invulnerable']})\n\t\treturn (statusUptime / fightDuration) * 100\n\t}\n\n\t// This normalises clipping as milliseconds clipped per minute,\n\t// since some level of clipping is expected and we need tiers that work for both long and short fights\n\tprotected getClippingAmount(statusId: number) {\n\t\tconst fightDuration = (this.parser.pull.duration - this.invulnerability.getDuration({types: ['invulnerable']}))\n\t\tif (fightDuration <= 0) { return 0 }\n\n\t\tconst statusApplications = this.statusApplications.get(statusId)\n\t\tif (statusApplications == null) { return 0 }\n\n\t\tconst totalClipping = Array.from(statusApplications.values()).reduce((clip, target) => clip + target.totalClipping, 0)\n\t\tconst clipMSPerMin = Math.round(totalClipping / (fightDuration / MILLISECONDS_PER_MINUTE))\n\t\treturn clipMSPerMin\n\t}\n}\n","import {MessageDescriptor} from '@lingui/core'\nimport {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport TransMarkdown from 'components/ui/TransMarkdown'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport React from 'react'\nimport {Report} from 'report'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Data} from './Data'\nimport {SpeedAdjustments} from './SpeedAdjustments'\nimport {SimpleStatistic, Statistics} from './Statistics'\n\nconst estimateHelp: Record<Report['meta']['source'] | '__all', MessageDescriptor> = {\n\t__all: t('core.gcd.no-statistics.v2')`This GCD recast is an *estimate*, and may be incorrect. If it is reporting a GCD recast *longer* than reality, you likely need to focus on keeping your GCD rolling.`,\n\tlegacyFflogs: t('core.gcd.estimate-help.fflogs')`Precise attribute values are only available from FF Logs for the player who logged the report in ACT.`,\n}\n\nexport class GlobalCooldown extends Analyser {\n\tstatic override handle = 'gcd'\n\n\t@dependency private data!: Data\n\t@dependency private statistics!: Statistics\n\t@dependency private speedAdjustments!: SpeedAdjustments\n\n\toverride initialise() {\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\t/**\n\t * Get the base recast time of the parsed actor's GCD cooldown group, in milliseconds.\n\t * The value returned from this function _may_ be an estimate - check {@link GlobalCooldown.isEstimated}\n\t * to see if it is.\n\t */\n\tpublic getDuration() {\n\t\treturn this.speedAdjustments.getAdjustedDuration({duration: BASE_GCD})\n\t}\n\n\t/** Returns whether the GCD duration calculated by this module is an estimate. */\n\tpublic isEstimated() {\n\t\treturn this.speedAdjustments.isAdjustmentEstimated()\n\t}\n\n\tprivate onComplete() {\n\t\tconst estimated = this.isEstimated()\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: estimated\n\t\t\t\t? <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>\n\t\t\t\t: <Trans id=\"core.gcd.gcd\">GCD Recast</Trans>,\n\t\t\ticon: this.data.actions.ATTACK.icon,\n\t\t\tvalue: this.parser.formatDuration(this.getDuration()),\n\t\t\tinfo: estimated ? <>\n\t\t\t\t<TransMarkdown source={estimateHelp.__all}/>\n\t\t\t\t<TransMarkdown source={estimateHelp[this.parser.report.meta.source]}/>\n\t\t\t</> : undefined,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport {Action, getPotencyWithMods, getBasePotency} from 'data/ACTIONS'\nimport {BonusModifier} from 'data/ACTIONS/type'\nimport {Event, Events} from 'event'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport React from 'react'\nimport {Button, Table} from 'semantic-ui-react'\nimport {Analyser} from '../Analyser'\nimport {Data} from './Data'\n\nexport interface PositionalResult {\n\tpositional: Action,\n\thits: Array<Events['damage']>,\n\tmisses: Array<Events['damage']>\n}\n\nconst NO_BONUS_PERCENT = 0\n\nexport abstract class Positionals extends Analyser {\n\t@dependency protected data!: Data\n\t@dependency private checklist!: Checklist\n\t@dependency private timeline!: Timeline\n\n\tstatic override handle = 'positionals'\n\tstatic override title = t('core.positionals.title')`Positionals`\n\tstatic override displayOrder = DISPLAY_ORDER.POSITIONALS\n\n\tprivate positionalResults: PositionalResult[] = []\n\n\t/**\n\t * Jobs MUST provide a list of their positional actions\n\t *\n\t * TODO: This should just be a filter on all actions for the job for\n\t * any actions they have with positional potencies.\n\t */\n\tprotected abstract positionals: Action[]\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('damage')\n\t\t\t\t.cause(this.data.matchCauseActionId(this.positionals.map(positional => positional.id))), this.onCast)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['damage']) {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\t\tconst action = this.data.getAction(event.cause.action)\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\t\tconst positional = this.positionals.find(positional => positional === action)\n\t\tif (positional == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst positionalResult = this.getOrCreatePositionalResult(positional)\n\n\t\t// All positionals are single target skills, so getting the 0 index\n\t\t// should be all we need to do here.\n\t\tif (this.positionalHit(positional, event.targets[0].bonusPercent)) {\n\t\t\tpositionalResult.hits.push(event)\n\t\t} else {\n\t\t\tpositionalResult.misses.push(event)\n\t\t}\n\t}\n\n\tprivate getOrCreatePositionalResult(positional: Action) {\n\t\tlet positionalResult = this.positionalResults.find(result => result.positional === positional)\n\t\tif (positionalResult == null) {\n\t\t\tpositionalResult = {\n\t\t\t\tpositional,\n\t\t\t\thits: [],\n\t\t\t\tmisses: [],\n\t\t\t}\n\t\t\tthis.positionalResults.push(positionalResult)\n\t\t}\n\t\treturn positionalResult\n\t}\n\n\t// The \"hit\" version of this function needs to check for more\n\t// things such as DRG's 5th hit combo buff and RPR's reaver buff.\n\t// Luckily, assessing misses is easy and sufficient for the purposes\n\t// of detecting positional hits.\n\tprivate missedPositionalBonusPercents(action: Action) {\n\t\tconst missed_positional_combo_bonus_percent = this.calculateBonusPercent(\n\t\t\tgetBasePotency(action),\n\t\t\tgetPotencyWithMods(action, [BonusModifier.COMBO], []))\n\t\treturn [...new Set([NO_BONUS_PERCENT, missed_positional_combo_bonus_percent])]\n\t}\n\n\t// Currently just checks that you didn't miss. Checking for hits would\n\t// otherwise be more complex.\n\tprivate positionalHit(action: Action, bonusPercent: number) {\n\t\treturn !this.missedPositionalBonusPercents(action).includes(bonusPercent)\n\t}\n\n\t// The bonusPercent is based on the final potency number.\n\tprivate calculateBonusPercent(base: number, bonus: number) {\n\t\treturn Math.trunc(100 * (1 - base / bonus))\n\t}\n\n\tprivate relativeTimestamp(timestamp: number) {\n\t\treturn timestamp - this.parser.pull.timestamp\n\t}\n\n\tprivate createTimelineButton(timestamp: number) {\n\t\tconst relative_timestamp = this.relativeTimestamp(timestamp)\n\t\treturn <Button\n\t\t\tcircular\n\t\t\tcompact\n\t\t\ticon=\"time\"\n\t\t\tsize=\"small\"\n\t\t\tonClick={() => this.timeline.show(relative_timestamp, relative_timestamp)}\n\t\t\tcontent={this.parser.formatEpochTimestamp(timestamp)}\n\t\t/>\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.positionalResults.length === 0) {\n\t\t\treturn\n\t\t}\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.positionals.checklist.title\">Hit your positionals</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.POSITIONALS,\n\t\t\tdescription: <Trans id=\"core.positionals.checklist.description\">\n\t\t\t\tMelee DPS jobs have some skills that will do more damage when used from the rear or flank.\n\t\t\t\tMake sure you use those skills in the right position to do the most damage, or\n\t\t\t\tuse <DataLink action=\"TRUE_NORTH\"/> when you are out of position.\n\t\t\t</Trans>,\n\t\t\trequirements: this.positionalResults.map(this.positionalRequirement),\n\t\t}))\n\t}\n\tprivate positionalRequirement(result: PositionalResult) {\n\t\tconst actual = result.hits.length\n\t\tconst numMisses = result.misses.length\n\t\tconst expected = actual + numMisses\n\t\tlet percent = actual / expected * 100\n\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\tpercent = Math.min(percent, 100)\n\t\t}\n\t\treturn new Requirement({\n\t\t\tname: <ActionLink {...result.positional}/>,\n\t\t\tpercent: percent,\n\t\t\tweight: expected,\n\t\t\toverrideDisplay: `${actual} / ${expected} (${percent.toFixed(2)}%)`,\n\t\t})\n\t}\n\n\toverride output(): React.ReactNode {\n\t\tconst totalMisses = this.positionalResults.reduce((total, current) => total + current.misses.length, 0)\n\n\t\tif (totalMisses === 0) { return }\n\n\t\treturn <Table compact unstackable celled textAlign=\"center\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.action\">Action</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.hits\">Hits</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.positionals-table.header.misses\">Misses</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{\n\t\t\t\t\tthis.positionalResults.map(result => {\n\t\t\t\t\t\tconst numHits = result.hits.length\n\t\t\t\t\t\tconst numMisses = result.misses.length\n\t\t\t\t\t\tconst success = numMisses === 0\n\t\t\t\t\t\treturn <Table.Row key={result.positional.id}>\n\t\t\t\t\t\t\t<Table.Cell style={{whiteSpace: 'nowrap'}}>\n\t\t\t\t\t\t\t\t<ActionLink {...result.positional} showName={false} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t\t\t\t\tpositive={success}\n\t\t\t\t\t\t\t\tnegative={!success}\n\t\t\t\t\t\t\t>{numHits}/{numMisses + numHits}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell textAlign=\"left\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tresult.misses.map(miss => {\n\t\t\t\t\t\t\t\t\t\treturn this.createTimelineButton(miss.timestamp)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t}\n}\n","import {Status, StatusKey} from 'data/STATUSES'\nimport {Events} from 'event'\nimport {ensureArray} from 'utilities'\nimport {Analyser} from '../Analyser'\nimport {dependency} from '../Injectable'\nimport {Actor, StatusEvent} from './Actors'\nimport {Data} from './Data'\nimport {Invulnerability} from './Invulnerability'\n\ninterface Edge {\n\tside: 'apply' | 'remove'\n\ttimestamp: number\n}\n\nexport class Statuses extends Analyser {\n\tstatic override handle = 'statuses'\n\tstatic override debug = false\n\n\t@dependency private readonly data!: Data\n\t@dependency private readonly invulnerability!: Invulnerability\n\n\t/**\n\t * Calculate the total uptime of the specified status across allspecified actors.\n\t * @param statusSpecifier Status to calculate uptime of.\n\t * @param targetSpecifier Target(s) that should be checked for the status.\n\t * @param source Source of statuses to filter by. Defaults to the parsed actor.\n\t */\n\tgetUptime(\n\t\tstatusSpecifier: StatusKey | Status,\n\t\ttargetSpecifier: Actor | Actor[],\n\t\tsource = this.parser.actor\n\t) {\n\t\t// Resolve arguments.\n\t\tconst status = typeof statusSpecifier === 'string'\n\t\t\t? this.data.statuses[statusSpecifier]\n\t\t\t: statusSpecifier\n\n\t\tconst targets = ensureArray(targetSpecifier)\n\n\t\t// Collect all the status history for the specified status/target/source combo.\n\t\tconst edges = targets.flatMap(target => this.edgesForActor(\n\t\t\ttarget,\n\t\t\ttarget.statusHistory.get(status.id)?.get(source.id) ?? []\n\t\t))\n\n\t\t// Edges are mapped from multiple potential targets; interlace by sorting by timestamp.\n\t\tedges.sort((a, b) => a.timestamp - b.timestamp)\n\n\t\t// Sum time when any of the specified targets had the status.\n\t\tconst meta = {uptime: 0, depth: 0, application: 0}\n\t\tfor (const edge of edges) {\n\t\t\tif (edge.side === 'apply') {\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.application = edge.timestamp\n\t\t\t\t}\n\t\t\t\tmeta.depth ++\n\n\t\t\t} else {\n\t\t\t\tmeta.depth --\n\t\t\t\tif (meta.depth === 0) {\n\t\t\t\t\tmeta.uptime += edge.timestamp - meta.application\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.debug(`Status ${status.name} ${edge.side} at ${this.ft(edge.timestamp)}, depth=${meta.depth}`)\n\t\t}\n\n\t\treturn meta.uptime\n\t}\n\n\tprivate edgesForActor(target: Actor, events: StatusEvent[]) {\n\t\t// We can safely assume status events from an actor will alternate between apply and remove.\n\t\tconst edges: Edge[] = []\n\t\tlet apply: Events['statusApply'] | undefined\n\t\tlet refresh: Events['statusApply'] | undefined\n\n\t\tfor (const event of events) {\n\t\t\t// Track the initial application and refreshes.\n\t\t\tif (event.type === 'statusApply') {\n\t\t\t\tapply ??= event\n\t\t\t\trefresh = event\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (apply == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Window has been closed, merge any edges in.\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tevent.timestamp\n\t\t\t))\n\t\t\tapply = undefined\n\t\t}\n\n\t\t// If we've got a dangling apply, build edges for it.\n\t\tif (apply != null) {\n\t\t\t// Try to find a reasonable remove time for the status, if it has a duration.  Cap to the end of the fight.\n\t\t\tconst statusDuration = this.data.getStatus(apply.status)?.duration\n\t\t\tconst remove = statusDuration == null\n\t\t\t\t? this.parser.currentEpochTimestamp\n\t\t\t\t: Math.min((refresh ?? apply).timestamp + statusDuration, this.parser.currentEpochTimestamp)\n\n\t\t\tedges.push(...this.splitRangeForInvulns(\n\t\t\t\ttarget,\n\t\t\t\tapply.timestamp,\n\t\t\t\tremove,\n\t\t\t))\n\t\t}\n\n\t\treturn edges\n\t}\n\n\tprivate splitRangeForInvulns(target: Actor, apply: number, remove: number): Edge[] {\n\t\tlet range = {apply, remove}\n\t\tconst finalRanges = [range]\n\n\t\t// Get the invuln windows that occured during this range\n\t\tconst invulns = this.invulnerability.getWindows({\n\t\t\tstart: apply,\n\t\t\tend: remove,\n\t\t\tactorFilter: actor => actor.kind === target.kind,\n\t\t\ttypes: ['invulnerable'],\n\t\t})\n\n\t\tfor (const invuln of invulns) {\n\t\t\t// Invuln clipped start of range.\n\t\t\tif (invuln.start < range.apply && invuln.end >= range.apply) {\n\t\t\t\tthis.debug(`Start clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t\trange.apply = invuln.end\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Invuln clipped end of range.\n\t\t\tif (invuln.start <= range.remove && invuln.end > range.remove) {\n\t\t\t\tthis.debug(`End clip, [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}]`)\n\n\t\t\t\trange.remove = invuln.start\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Everything else should be a range split, sanity check.\n\t\t\tif (invuln.start < range.apply || invuln.end > range.remove) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.debug(`Split [${this.ft(range.apply)},${this.ft(range.remove)}] -> [${this.ft(range.apply)},${this.ft(invuln.start)}], [${this.ft(invuln.end)},${this.ft(range.remove)}]`)\n\n\t\t\t// Split the range into two around the invuln.\n\t\t\tconst previousRange = range\n\t\t\trange = {...range}\n\t\t\tfinalRanges.push(range)\n\n\t\t\tpreviousRange.remove = invuln.start\n\t\t\trange.apply = invuln.end\n\t\t}\n\n\t\t// Map the ranges into edges.\n\t\treturn finalRanges.flatMap(range => [\n\t\t\t{side: 'apply', timestamp: range.apply},\n\t\t\t{side: 'remove', timestamp: range.remove},\n\t\t] as const)\n\t}\n\n\t// Small utility for formatting timestamps, as we do it a _lot_ in debug messages\n\tprivate ft = (timestamp: number) => this.parser.formatEpochTimestamp(timestamp, 1)\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {matchClosestLower} from 'utilities'\n\nconst CAST_TIME_MAX_WEAVES = {\n\t0: 2,\n\t1000: 1,\n\t2500: 0,\n}\nconst REDUCE_MAX_WEAVES_RECAST_BELOW = 1800\nconst DEFAULT_MAX_WEAVES = 2\n\nconst WEAVING_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport interface Weave {\n\tleadingGcdEvent?: Events['action'],\n\ttrailingGcdEvent: Events['action'],\n\tgcdTimeDiff: number,\n\tweaves: Array<Events['action']>,\n}\n\nexport class Weaving extends Analyser {\n\tstatic override handle = 'weaving'\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency protected suggestions!: Suggestions\n\n\tstatic override title = t('core.weaving.title')`Weaving Issues`\n\n\tprotected suggestionIcon: string = 'https://xivapi.com/i/001000/001785.png' // WVR Focused Synth\n\n\tprotected moduleLink = (\n\t\t<a style={{cursor: 'pointer'}} onClick={() => this.parser.scrollTo(Weaving.handle)}>\n\t\t\t<NormalisedMessage message={Weaving.title}/>\n\t\t</a>\n\t)\n\tprotected suggestionContent: ReactNode = <Trans id=\"core.weaving.content\">\n\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the {this.moduleLink} module below for more detailed analysis.\n\t</Trans>\n\n\tprotected severity = WEAVING_SEVERITY\n\n\tprivate weaves: Array<Events['action']> = []\n\tprivate ongoingCastEvent?: Events['prepare']\n\tprivate leadingGcdEvent?: Events['action']\n\tprivate trailingGcdEvent?: Events['action']\n\tprivate badWeaves: Weave[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBeginCast)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t\tthis.addEventHook(filter<Event>().type('death'), this.clearWeave)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.ongoingCastEvent = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// If the action is an auto, just ignore it\n\t\tif (!action || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// If it's not a GCD, just bump the weave count\n\t\tif (this.isOgcd(action)) {\n\t\t\tthis.weaves.push(event)\n\t\t\treturn\n\t\t}\n\n\t\tif (this.ongoingCastEvent && this.ongoingCastEvent.action === action.id) {\n\t\t\t// This event is the end of a GCD cast\n\t\t\tthis.trailingGcdEvent = {\n\t\t\t\t...event,\n\t\t\t\t// Override the timestamp of the GCD with when its cast began\n\t\t\t\ttimestamp: this.ongoingCastEvent.timestamp,\n\t\t\t}\n\t\t} else {\n\t\t\t// This event was an instant GCD (or log missed the cast starting)\n\t\t\tthis.trailingGcdEvent = event\n\t\t}\n\n\t\t// Always reset the ongoing cast\n\t\tthis.ongoingCastEvent = undefined\n\n\t\t// Throw the current state onto the history\n\t\tthis.saveIfBad()\n\n\t\t// Reset\n\t\tthis.leadingGcdEvent = this.trailingGcdEvent\n\t\tthis.weaves = []\n\t}\n\n\tprivate onComplete() {\n\t\t// If there's been at least one gcd, run a cleanup on any remnant data\n\t\tif (this.leadingGcdEvent) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// Few triples is medium, any more is major\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.weaving.why\"\n\t\t\t\tvalue={this.badWeaves.length}\n\t\t\t\t_1=\"# instance of incorrect weaving\"\n\t\t\t\tother=\"# instances of incorrect weaving\"\n\t\t\t/>,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.badWeaves.length,\n\t\t}))\n\t}\n\n\tprivate saveIfBad() {\n\t\tif (this.trailingGcdEvent == null) { return }\n\n\t\tconst leadingTimestamp = this.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp\n\t\tconst gcdTimeDiff = this.trailingGcdEvent.timestamp\n\t\t\t- leadingTimestamp\n\t\t\t- this.invulnerability.getDuration({\n\t\t\t\tstart: leadingTimestamp,\n\t\t\t\tend: this.trailingGcdEvent.timestamp,\n\t\t\t})\n\n\t\tconst weave: Weave = {\n\t\t\tleadingGcdEvent: this.leadingGcdEvent,\n\t\t\ttrailingGcdEvent: this.trailingGcdEvent,\n\t\t\tgcdTimeDiff,\n\t\t\tweaves: this.weaves,\n\t\t}\n\n\t\tif (weave.weaves.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isBadWeave(weave)) {\n\t\t\tthis.badWeaves.push(weave)\n\t\t}\n\t}\n\n\tprivate isOgcd(action: Action) {\n\t\treturn !action.onGcd && !action.autoAttack\n\t}\n\n\tprivate isBadWeave(weave: Weave) {\n\t\t// Calc. the no. of weaves - we're ignoring any made while the boss is untargetable, and events that happened before the pull\n\t\tconst weaveCount = weave.weaves.filter(\n\t\t\tevent => true\n\t\t\t\t&& !this.invulnerability.isActive({timestamp: event.timestamp, types: ['untargetable']})\n\t\t\t\t&& event.timestamp >= this.parser.pull.timestamp,\n\t\t).length\n\n\t\tconst recast = ((weave.leadingGcdEvent != null) ? this.castTime.recastForEvent(weave.leadingGcdEvent) : undefined) ?? BASE_GCD\n\t\t// Check the downtime-adjusted GCD time difference for this weave - do not treat multiple weaves during downtime as bad weaves\n\t\treturn weave.gcdTimeDiff > recast && weaveCount > this.getMaxWeaves(weave)\n\t}\n\n\tprivate clearWeave() {\n\t\t// prompts saving any existing weaves if they're bad, and reset\n\t\tif (this.weaves.length > 0) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// remove existing weaves and pretend the next leadingGcdEvent is like a fresh start (which I guess it is)\n\t\tthis.weaves = []\n\t\tthis.leadingGcdEvent = undefined\n\t}\n\n\t/**\n\t * Implementing classes MAY override this in order to provide custom logic for determining the number of max weaves, given the leading GCD Event\n\t * @param event The Action Event of the leading GCD.  Will be undefined for the first GCD of the pull - default behavior is to allow 2 weaves in case of missing pre-pull action\n\t * @returns number of allowed weaves after the leading GCD before flagging as bad weaving\n\t */\n\tprotected getMaxWeaves(weave: Weave): number {\n\t\tif (weave.leadingGcdEvent == null) {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst castTime = this.castTime.forEvent(weave.leadingGcdEvent)\n\t\tif (castTime == null)  {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst maxWeaves = matchClosestLower(CAST_TIME_MAX_WEAVES, castTime) ?? DEFAULT_MAX_WEAVES\n\t\tconst recastTime = this.castTime.recastForEvent(weave.leadingGcdEvent) ?? BASE_GCD\n\n\t\treturn maxWeaves - (recastTime < REDUCE_MAX_WEAVES_RECAST_BELOW ? 1 : 0)\n\t}\n\n\toverride output() {\n\t\tif (this.badWeaves.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.badWeaves.map(item => ({\n\t\t\tkey: item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp,\n\t\t\ttitle: {\n\t\t\t\tcontent: <>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural\n\t\t\t\t\t\tid=\"core.weaving.panel-count\"\n\t\t\t\t\t\tvalue={item.weaves.length}\n\t\t\t\t\t\t_1=\"# weave\"\n\t\t\t\t\t\tother=\"# weaves\"\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tcontent: <Rotation events={[\n\t\t\t\t\t...(item.leadingGcdEvent != null ? [item.leadingGcdEvent] : []),\n\t\t\t\t\t...item.weaves,\n\t\t\t\t]}/>,\n\t\t\t},\n\t\t}))\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {ActionRow, ActionTimeline as CoreActionTimeline} from 'parser/core/modules/ActionTimeline'\nimport React from 'react'\n\nexport class ActionTimeline extends CoreActionTimeline {\n\tstatic override rows: ActionRow[] = [\n\t\t...CoreActionTimeline.rows,\n\n\t\t{\n\t\t\tlabel: <Trans id=\"mnk.action-timeline.chakras\">Chakras</Trans>,\n\t\t\tcontent: ['STEEL_PEAK', 'HOWLING_FIST', 'THE_FORBIDDEN_CHAKRA', 'ENLIGHTENMENT'],\n\t\t},\n\t\t'RIDDLE_OF_FIRE',\n\t\t'BROTHERHOOD',\n\t\t'PERFECT_BALANCE',\n\t\t'RIDDLE_OF_WIND',\n\t\t'RIDDLE_OF_EARTH',\n\t\t'MANTRA',\n\t\t'THUNDERCLAP',\n\t\t'ANATMAN',\n\t]\n}\n","import {Events} from 'event'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {AoEAction, AoEUsages} from 'parser/core/modules/AoEUsages'\n\nexport class AoE extends AoEUsages {\n\tstatic override handle = 'aoe'\n\n\t@dependency private actors!: Actors\n\n\t// You awake to find yourself enlightened to the true power of AoE\n\tsuggestionIcon = this.data.actions.ENLIGHTENMENT.icon\n\n\t// SotD is on-par with DK at 2 targets, but needs 3 to beat out Boot\n\ttrackedActions: AoEAction[] = [\n\t\t{\n\t\t\taoeAction: this.data.actions.SHADOW_OF_THE_DESTROYER,\n\t\t\tstActions: [this.data.actions.BOOTSHINE, this.data.actions.DRAGON_KICK],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.FOUR_POINT_FURY,\n\t\t\tstActions: [this.data.actions.TRUE_STRIKE, this.data.actions.TWIN_SNAKES],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.ROCKBREAKER,\n\t\t\tstActions: [this.data.actions.DEMOLISH, this.data.actions.SNAP_PUNCH],\n\t\t\tminTargets: 3,\n\t\t},\n\t\t{\n\t\t\taoeAction: this.data.actions.ENLIGHTENMENT,\n\t\t\tstActions: [this.data.actions.THE_FORBIDDEN_CHAKRA],\n\t\t\tminTargets: 2,\n\t\t},\n\t]\n\n\tprotected override adjustMinTargets(event: Events['damage'], minTargets: number): number {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn minTargets\n\t\t}\n\n\t\tconst action = this.data.getAction(event.cause.action)\n\n\t\t// How in the fuck did we even get here tbh\n\t\tif (action == null) {\n\t\t\treturn minTargets\n\t\t}\n\n\t\t// If Leaden Fist is up, Boot is extra strong\n\t\tif (action.id === this.data.actions.SHADOW_OF_THE_DESTROYER.id && this.actors.current.hasStatus(this.data.statuses.LEADEN_FIST.id)) {\n\t\t\treturn minTargets + 1\n\t\t}\n\n\t\treturn minTargets\n\t}\n}\n","import {CooldownDowntime as CoreCooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\n// Approximate downtime window to account for aligning GCDs and unreliable FBC procs:\n// 2 GCDs at a slowest possible 2.0s GCD, 600ms for animation lock, and another 250ms\n// to deal with high end of \"sane\" ping or a late FBC proc clipping the GCD.\nconst DEFAULT_AVERAGE_DOWNTIME = 2425\n\nexport class CooldownDowntime extends CoreCooldownDowntime {\n\tprotected override defaultAllowedAverageDowntime = DEFAULT_AVERAGE_DOWNTIME\n\tprotected override trackedCds = [\n\t\t{\n\t\t\tcooldowns: [this.data.actions.BROTHERHOOD],\n\t\t\tfirstUseOffset: 7000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.PERFECT_BALANCE],\n\t\t\tfirstUseOffset: 3000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.RIDDLE_OF_FIRE],\n\t\t\tfirstUseOffset: 5000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.RIDDLE_OF_WIND],\n\t\t\tfirstUseOffset: 10000,\n\t\t},\n\t]\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.RIDDLE_OF_EARTH,\n\t]\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {dependency} from 'parser/core/Injectable'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {DoTs} from 'parser/core/modules/DoTs'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nconst SUGGESTION_TIERS = {\n\tCLIPPING: {\n\t\t7000: SEVERITY.MINOR,\n\t\t10000: SEVERITY.MEDIUM,\n\t\t12000: SEVERITY.MAJOR,\n\t},\n}\n\nexport class Demolish extends DoTs {\n\tstatic override handle = 'demolish'\n\n\t@dependency private checklist!: Checklist\n\t@dependency private suggestions!: Suggestions\n\n\tprotected override trackedStatuses = [\n\t\tthis.data.statuses.DEMOLISH.id,\n\t]\n\n\tprotected override addChecklistRules() {\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"mnk.demolish.checklist.name\">Keep Demolish up</Trans>,\n\t\t\tdescription: <Trans id=\"mnk.demolish.checklist.description\">\n\t\t\t\t<DataLink action=\"DEMOLISH\"/> is your strongest finisher (assuming at least 3 DoT ticks hit).\n\t\t\t</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.DEMOLISH,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"mnk.demolish.checklist.requirement.name\"><DataLink action=\"DEMOLISH\"/> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getUptimePercent(this.data.statuses.DEMOLISH.id),\n\t\t\t\t}),\n\t\t\t],\n\t\t\t// TODO: calculate the number of good Demolishes a fight should have\n\t\t\t//       and set target to allow dropping without losing a tick\n\t\t\ttarget: 85,\n\t\t}))\n\t}\n\n\tprotected override addClippingSuggestions() {\n\t\tconst demolishClipPerMinute = this.getClippingAmount(this.data.statuses.DEMOLISH.id)\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.DEMOLISH.icon,\n\t\t\tcontent: <Trans id=\"mnk.demolish.suggestion.content\">\n\t\t\t\tAvoid refreshing <DataLink action=\"DEMOLISH\"/> significantly before its expiration. Unnecessary refreshes risk overwriting buff snapshots.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS.CLIPPING,\n\t\t\tvalue: demolishClipPerMinute,\n\t\t\twhy: <Trans id=\"mnk.demolish.suggestion.why\">\n\t\t\t\tAn average of {this.parser.formatDuration(demolishClipPerMinute, 1)} seconds of <DataLink status=\"DEMOLISH\" /> clipped per minute due to early refreshes.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","export const DISPLAY_ORDER = {\n\tRIDDLE_OF_FIRE: 2,\n\tPERFECT_BALANCE: 3,\n\tDRAGON_KICK: 5,\n\tTWIN_SNAKES: 6,\n\tDEMOLISH: 7,\n}\n","import {ActionKey} from 'data/ACTIONS'\nimport {StatusKey} from 'data/STATUSES'\n\n// Forms\nexport const FORM_TIMEOUT_MILLIS = 30000\n\nexport const FORMS: StatusKey[] = [\n\t'OPO_OPO_FORM',\n\t'RAPTOR_FORM',\n\t'COEURL_FORM',\n]\n\nexport const OPO_OPO_ACTIONS: ActionKey[] = [\n\t'BOOTSHINE',\n\t'DRAGON_KICK',\n\t'SHADOW_OF_THE_DESTROYER',\n]\n\nexport const RAPTOR_ACTIONS: ActionKey[] = [\n\t'TRUE_STRIKE',\n\t'TWIN_SNAKES',\n\t'FOUR_POINT_FURY',\n]\n\nexport const COEURL_ACTIONS: ActionKey[] = [\n\t'SNAP_PUNCH',\n\t'DEMOLISH',\n\t'ROCKBREAKER',\n]\n\nexport const FORM_ACTIONS: ActionKey[] = [\n\t...OPO_OPO_ACTIONS,\n\t...RAPTOR_ACTIONS,\n\t...COEURL_ACTIONS,\n]\n\n// Blitzes\nexport const BLITZ_ACTIONS: ActionKey[] = [\n\t'ELIXIR_FIELD',\n\t'CELESTIAL_REVOLUTION',\n\t'RISING_PHOENIX',\n\t'PHANTOM_RUSH',\n]\n","import {Action, ActionKey} from 'data/ACTIONS'\nimport {Status, StatusKey} from 'data/STATUSES'\nimport {Data} from 'parser/core/modules/Data'\n\nexport function fillActions(list: ActionKey[], data: Data): Array<Action['id']> {\n\treturn list.map(actionKey => data.actions[actionKey].id)\n}\n\nexport function fillStatuses(list: StatusKey[], data: Data): Array<Status['id']> {\n\treturn list.map(statusKey => data.statuses[statusKey].id)\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport Suggestions, {SEVERITY, Suggestion, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {FORM_TIMEOUT_MILLIS, FORMS, OPO_OPO_ACTIONS} from './constants'\nimport {fillActions, fillStatuses} from './utilities'\n\nexport class Forms extends Analyser {\n\tstatic override handle = 'forms'\n\n\t@dependency private actors!: Actors\n\t@dependency private data!: Data\n\t@dependency private downtime!: Downtime\n\t@dependency private suggestions!: Suggestions\n\n\tprivate forms: Array<Status['id']> = []\n\tprivate opoOpoSkills: Array<Action['id']> = []\n\n\tprivate formless: number = 0\n\tprivate resetForms: number = 0\n\tprivate skippedForms: number = 0\n\tprivate droppedForms: number = 0\n\n\tprivate lastFormChanged: number | undefined\n\tprivate lastFormDropped: number | undefined\n\tprivate perfectlyFresh?: number\n\n\tprivate formHook?: EventHook<Events['action']>\n\n\toverride initialise(): void {\n\t\tthis.forms = fillStatuses(FORMS, this.data)\n\t\tthis.opoOpoSkills = fillActions(OPO_OPO_ACTIONS, this.data)\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(oneOf(this.forms)), this.onGain)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(oneOf(this.forms)), this.onRemove)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.PERFECT_BALANCE.id), this.onPerfectOut)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['action']): void {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (action == null || !(action.onGcd ?? false)) { return }\n\n\t\t// Check the current form, or zero for no form\n\t\tconst currentForm = this.forms.find(form => this.actors.current.hasStatus(form)) || 0\n\t\tconst untargetable = this.lastFormChanged != null\n\t\t\t? this.downtime.getDowntime(this.lastFormChanged, event.timestamp)\n\t\t\t: 0\n\n\t\tif (action.id === this.data.actions.FORM_SHIFT.id) {\n\t\t\t// Only ignore Form Shift if we're in downtime\n\t\t\tif (untargetable === 0) {\n\t\t\t\tthis.skippedForms++\n\t\t\t}\n\n\t\t\treturn\n\t\t}\n\n\t\t// If we have PB/FS, we can just ignore forms\n\t\tif (\n\t\t\tthis.actors.current.hasStatus(this.data.statuses.PERFECT_BALANCE.id) ||\n\t\t\tthis.actors.current.hasStatus(this.data.statuses.FORMLESS_FIST.id)\n\t\t) { return }\n\n\t\t// Handle relevant actions per form\n\t\tswitch (currentForm) {\n\t\tcase this.data.statuses.OPO_OPO_FORM.id:\n\t\t\tbreak\n\n\t\t// Using Opo-Opo skills resets form, but we don't care if we're in PB or FS\n\t\tcase this.data.statuses.RAPTOR_FORM.id:\n\t\tcase this.data.statuses.COEURL_FORM.id:\n\t\t\tif (this.opoOpoSkills.includes(action.id)) { this.resetForms++ }\n\t\t\tbreak\n\n\t\tdefault:\n\t\t\t// Fresh out of PB, they'll have no form\n\t\t\tif (this.perfectlyFresh != null) {\n\t\t\t\tthis.perfectlyFresh = undefined\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Check if we timed out\n\t\t\tif (untargetable === 0 && this.lastFormDropped != null && this.lastFormChanged != null) {\n\t\t\t\tif ((this.lastFormDropped - this.lastFormChanged) > FORM_TIMEOUT_MILLIS) {\n\t\t\t\t\tthis.droppedForms++\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// No form used\n\t\t\tif (this.opoOpoSkills.includes(action.id)) {\n\t\t\t\tthis.formless++\n\t\t\t}\n\t\t}\n\t}\n\n\t// Anatman doesn't freeze, it just refreshes every tick, so it's the same as a gain\n\tprivate onGain(event: Events['statusApply']): void {\n\t\tthis.lastFormChanged = event.timestamp\n\n\t\t// Reset forms - we need this to avoid DK spam rotations leaving trailing hooks\n\t\tthis.resetFormHook()\n\n\t\tthis.formHook = this.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type('action'),\n\t\t\tthis.onCast,\n\t\t)\n\t}\n\n\tprivate onRemove(event: Events['statusRemove']): void {\n\t\tthis.lastFormDropped = event.timestamp\n\n\t\tthis.resetFormHook()\n\t}\n\n\tprivate resetFormHook() {\n\t\tif (this.formHook != null) {\n\t\t\tthis.removeEventHook(this.formHook)\n\t\t\tthis.formHook = undefined\n\t\t}\n\t}\n\n\tprivate onPerfectOut(event: Events['statusRemove']): void {\n\t\tthis.perfectlyFresh = event.timestamp\n\t}\n\n\tprivate onComplete(): void {\n\t\t// Using the wrong form\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.FORM_SHIFT.icon,\n\t\t\tcontent: <Trans id=\"mnk.forms.suggestions.formless.content\">\n\t\t\t\tAvoid using combo starters outside of <DataLink status=\"OPO_OPO_FORM\"/> as the Form bonus is only activated in the correct form.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t},\n\t\t\tvalue: this.formless,\n\t\t\twhy: <Trans id=\"mnk.forms.suggestions.formless.why\">\n\t\t\t\t<Plural value={this.formless} one=\"# combo-starter was\" other=\"# combo-starters were\" /> used Formlessly, cancelling form bonus effects.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\t// Cancelling forms\n\t\tif (this.resetForms >= 1) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.FORM_SHIFT.icon,\n\t\t\t\tseverity: SEVERITY.MEDIUM,\n\t\t\t\tcontent: <Trans id=\"mnk.forms.suggestions.reset.content\">\n\t\t\t\t\tTry not to cancel combos by using <DataLink action=\"BOOTSHINE\"/>, <DataLink action=\"DRAGON_KICK\"/>, or <DataLink action=\"SHADOW_OF_THE_DESTROYER\"/> mid-rotation.\n\t\t\t\t</Trans>,\n\t\t\t\twhy: <Trans id=\"mnk.forms.suggestions.reset.why\">\n\t\t\t\t\t<Plural value={this.resetForms} one=\"# combo was\" other=\"# combos were\" /> reset by an Opo-Opo Form skill.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\t// Skipping a form\n\t\tif (this.skippedForms >= 1) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.FORM_SHIFT.icon,\n\t\t\t\tseverity: SEVERITY.MEDIUM,\n\t\t\t\tcontent: <Trans id=\"mnk.forms.suggestions.skipped.content\">\n\t\t\t\t\tAvoid skipping Forms outside of downtime. A skipped GCD could otherwise be used for damage.\n\t\t\t\t</Trans>,\n\t\t\t\twhy: <Trans id=\"mnk.forms.suggestions.skipped.why\">\n\t\t\t\t\t<Plural value={this.skippedForms} one=\"# form was\" other=\"# forms were\" /> skipped by Form Shift unnecessarily.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\t// Form timeout\n\t\tif (this.droppedForms >= 1) {\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.FORM_SHIFT.icon,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\tcontent: <Trans id=\"mnk.forms.suggestions.dropped.content\">\n\t\t\t\t\tAvoid dropping Forms. You may need to use a gap closer or stay closer to the enemy to avoid your combo timing out. This usually indicates a bigger problem.\n\t\t\t\t</Trans>,\n\t\t\t\twhy: <Trans id=\"mnk.forms.suggestions.dropped.why\">\n\t\t\t\t\tForm was dropped <Plural value={this.droppedForms} one=\"# time.\" other=\"# times.\" />\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n}\n","import {JOBS} from 'data/JOBS'\nimport {SpeedAdjustments, SpeedAttribute} from 'parser/core/modules/SpeedAdjustments'\nimport {Actor} from 'report'\n\nconst GREASED_LIGHTNING_MODIFIER = 0.8\n\nexport class GreasedLightning extends SpeedAdjustments {\n\toverride getAdjustedDuration({\n\t\tduration,\n\t\tattribute = JOBS[this.parser.actor.job].speedStat,\n\t\tactor = this.parser.actor.id,\n\t}: {\n\t\tduration: number,\n\t\tattribute?: SpeedAttribute,\n\t\tactor?: Actor['id']\n\t}) {\n\t\t// Safety check so that only the MNK is affected\n\t\tif (actor === this.parser.actor.id) {\n\t\t\treturn super.getAdjustedDuration({duration, attribute, actor}) * GREASED_LIGHTNING_MODIFIER\n\t\t}\n\n\t\treturn super.getAdjustedDuration({duration, attribute, actor})\n\t}\n}\n","import {Positionals as CorePositionals} from 'parser/core/modules/Positionals'\n\nexport class Positionals extends CorePositionals {\n\tpositionals = [\n\t\tthis.data.actions.DEMOLISH,\n\t\tthis.data.actions.SNAP_PUNCH,\n\t]\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {getBasePotency} from 'data/ACTIONS'\nimport {Event} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {Suggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\n\nexport class Revolution extends Analyser {\n\tstatic override handle = 'cr'\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate revolutions: number = 0\n\n\toverride initialise(): void {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type('action')\n\t\t\t\t.action(this.data.actions.CELESTIAL_REVOLUTION.id),\n\t\t\t() => this.revolutions++)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onComplete(): void {\n\t\tif (this.revolutions > 0) {\n\t\t\tconst lowerBound = this.revolutions * (getBasePotency(this.data.actions.ELIXIR_FIELD) - getBasePotency(this.data.actions.CELESTIAL_REVOLUTION))\n\t\t\tconst upperBound = this.revolutions * (getBasePotency(this.data.actions.RISING_PHOENIX) - getBasePotency(this.data.actions.CELESTIAL_REVOLUTION))\n\t\t\tthis.suggestions.add(new Suggestion({\n\t\t\t\ticon: this.data.actions.CELESTIAL_REVOLUTION.icon,\n\t\t\t\tcontent: <Trans id=\"mnk.cr.suggestions.content\">\n\t\t\t\t\tAvoid using <ActionLink action=\"CELESTIAL_REVOLUTION\"/> over <ActionLink action=\"ELIXIR_FIELD\"/> or <ActionLink action=\"RISING_PHOENIX\"/> as they have higher potency even for a single target.\n\t\t\t\t</Trans>,\n\t\t\t\tseverity: SEVERITY.MAJOR,\n\t\t\t\twhy: <Trans id=\"mnk.cr.suggestions.why\">\n\t\t\t\t\t{lowerBound} - {upperBound} potency lost due to <Plural value={this.revolutions} one=\"# use\" other=\"# uses\"/> of <ActionLink action=\"CELESTIAL_REVOLUTION\"/>.\n\t\t\t\t</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n}\n","import {DataLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {EvaluatedAction, EvaluationOutput, WindowEvaluator} from 'parser/core/modules/ActionWindow'\nimport {HistoryEntry} from 'parser/core/modules/ActionWindow/History'\nimport React from 'react'\n\ninterface BlitzEvaluatorOpts {\n\tblitzActions: Array<Action['id']>,\n}\n\nexport class BlitzEvaluator implements WindowEvaluator {\n\tprivate blitzActions: Array<Action['id']>\n\n\tconstructor(opts: BlitzEvaluatorOpts) {\n\t\tthis.blitzActions = opts.blitzActions\n\t}\n\n\tsuggest() {\n\t\treturn undefined\n\t}\n\n\toutput(windows: Array<HistoryEntry<EvaluatedAction[]>>): EvaluationOutput {\n\t\treturn {\n\t\t\tformat: 'table',\n\t\t\theader: {\n\t\t\t\theader: <DataLink showName={false} action=\"MASTERFUL_BLITZ\"/>,\n\t\t\t\taccessor: 'masterfulblitz',\n\t\t\t},\n\t\t\trows: windows.map(window => {\n\t\t\t\treturn {\n\t\t\t\t\tactual: this.countBlitzes(window),\n\t\t\t\t\texpected: undefined,\n\t\t\t\t}\n\t\t\t}),\n\t\t}\n\t}\n\n\tprivate countBlitzes(window: HistoryEntry<EvaluatedAction[]>): number {\n\t\treturn window.data.filter(value => this.blitzActions.includes(value.action.id)).length\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {ActionKey} from 'data/ACTIONS'\nimport {dependency} from 'parser/core/Injectable'\nimport {BuffWindow, ExpectedGcdCountEvaluator, LimitedActionsEvaluator} from 'parser/core/modules/ActionWindow'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {BLITZ_ACTIONS} from './constants'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\nimport {BlitzEvaluator} from './evaluators/BlitzEvaluator'\nimport {fillActions} from './utilities'\n\nconst EXPECTED_GCDS = 11\n\nconst SEVERITIES = {\n\tTOTAL_GCDS: {\n\t\t10: SEVERITY.MINOR,\n\t\t9: SEVERITY.MEDIUM,\n\t\t6: SEVERITY.MAJOR,\n\t},\n\tBAD_GCDS: {\n\t\t1: SEVERITY.MEDIUM,\n\t\t2: SEVERITY.MAJOR,\n\t},\n}\n\nconst IGNORED_ACTIONS: ActionKey[] = [\n\t'FEINT',\n\t'MANTRA',\n\t'THUNDERCLAP',\n\t'RIDDLE_OF_EARTH',\n\t'SECOND_WIND',\n\t'LEG_SWEEP',\n\t'BLOODBATH',\n\t'ARMS_LENGTH',\n\t'TRUE_NORTH',\n\t'SPRINT',\n]\n\nexport class RiddleOfFire extends BuffWindow {\n\tstatic override handle = 'riddleoffire'\n\tstatic override title = t('mnk.rof.title')`Riddle of Fire`\n\tstatic override displayOrder = DISPLAY_ORDER.RIDDLE_OF_FIRE\n\n\t@dependency globalCooldown!: GlobalCooldown\n\n\tprivate blitzActions = fillActions(BLITZ_ACTIONS, this.data)\n\tbuffStatus = this.data.statuses.RIDDLE_OF_FIRE\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst suggestionWindowName = <DataLink action=\"RIDDLE_OF_FIRE\"/>\n\n\t\tthis.ignoreActions(fillActions(IGNORED_ACTIONS, this.data))\n\n\t\tthis.addEvaluator(new BlitzEvaluator({\n\t\t\tblitzActions: this.blitzActions,\n\t\t}))\n\n\t\tthis.addEvaluator(new ExpectedGcdCountEvaluator({\n\t\t\texpectedGcds: EXPECTED_GCDS,\n\t\t\tglobalCooldown: this.globalCooldown,\n\t\t\thasStacks: false,\n\t\t\tsuggestionIcon: this.data.actions.RIDDLE_OF_FIRE.icon,\n\t\t\tseverityTiers: SEVERITIES.TOTAL_GCDS,\n\t\t\tsuggestionWindowName: suggestionWindowName,\n\t\t\tsuggestionContent: <Trans id=\"mnk.rof.suggestions.gcd.content\">\n\t\t\t\tAim to hit {EXPECTED_GCDS} GCDs during each <DataLink action=\"RIDDLE_OF_FIRE\"/> window.\n\t\t\t</Trans>,\n\t\t\tadjustCount: window => {\n\t\t\t\t// 6SS counts as 2 GCDs\n\t\t\t\treturn -window.data.filter(value => value.action.id === this.data.actions.SIX_SIDED_STAR.id).length\n\t\t\t},\n\t\t}))\n\n\t\tthis.addEvaluator(new LimitedActionsEvaluator({\n\t\t\texpectedActions: [\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.MEDITATION,\n\t\t\t\t\texpectedPerWindow: 0,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.ANATMAN,\n\t\t\t\t\texpectedPerWindow: 0,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\taction: this.data.actions.FORM_SHIFT,\n\t\t\t\t\texpectedPerWindow: 0,\n\t\t\t\t},\n\t\t\t],\n\t\t\tsuggestionIcon: this.data.actions.MEDITATION.icon,\n\t\t\tsuggestionContent: <Trans id=\"mnk.rof.suggestions.wasted.content\">\n\t\t\t\tAvoid using <DataLink action=\"MEDITATION\"/>, <DataLink action=\"ANATMAN\"/>, or <DataLink action=\"FORM_SHIFT\"/> under <DataLink status=\"RIDDLE_OF_FIRE\"/> as this is essentially wasting a GCD.\n\t\t\t</Trans>,\n\t\t\tsuggestionWindowName: suggestionWindowName,\n\t\t\tseverityTiers: SEVERITIES.BAD_GCDS,\n\t\t}))\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport {SimpleStatistic, Statistics} from 'parser/core/modules/Statistics'\nimport React from 'react'\n\n/**\n * While it is possible to get 16 attacks in a Riddle of Wind window,\n * it's such a niche and time based thing that it's not worth handling.\n * Even in a lot of top parsing monk logs, it's effectively RNG if they get 16.\n */\nconst EXPECTED_ATTACKS_PER_ROW_WINDOW = 15\n\nexport class RiddleOfWind extends Analyser {\n\tstatic override handle = 'riddleofwind'\n\n\t@dependency data!: Data\n\t@dependency statistics!: Statistics\n\n\tprivate history: number[] = []\n\tprivate autos: number = 0\n\n\tprivate windHook?: EventHook<Events['action']>\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.RIDDLE_OF_WIND.id), this.onGain)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.RIDDLE_OF_WIND.id), this.onPass)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onGain(): void {\n\t\tif (this.windHook == null) {\n\t\t\tthis.windHook = this.addEventHook(\n\t\t\t\tfilter<Event>()\n\t\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t\t.type('action')\n\t\t\t\t\t.action(this.data.actions.ATTACK.id),\n\t\t\t\t() => this.autos++\n\t\t\t)\n\t\t}\n\t}\n\n\t// Passing Wind, get it\n\tprivate onPass(): void {\n\t\tif (this.windHook != null) {\n\t\t\t// Cleanup data\n\t\t\tthis.history.push(this.autos)\n\t\t\tthis.autos = 0\n\n\t\t\t// Cleanup hooks\n\t\t\tthis.removeEventHook(this.windHook)\n\t\t\tthis.windHook = undefined\n\t\t}\n\t}\n\n\tprivate onComplete() {\n\t\tconst expectedAttacks = this.history.length * EXPECTED_ATTACKS_PER_ROW_WINDOW\n\t\tconst actualAttacks = this.history.reduce((total, autos) => total + autos, 0)\n\n\t\tthis.statistics.add(new SimpleStatistic({\n\t\t\ttitle: <Trans id=\"mnk.row.statistic.title\">\n\t\t\t\tAuto Attacks Hits\n\t\t\t</Trans>,\n\t\t\ticon: this.data.actions.RIDDLE_OF_WIND.icon,\n\t\t\tvalue: `${actualAttacks}/${expectedAttacks}`,\n\t\t\tinfo: <Trans id=\"mnk.row.statistic.info\">\n\t\t\t\tMissing auto attacks during <ActionLink action=\"RIDDLE_OF_WIND\"/> means you were not\n\t\t\t\table get full uptime on the boss. This is a DPS loss due to missing auto attacks.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {getBasePotency, getPotencyWithMods} from 'data/ACTIONS'\nimport {Cause, Event, Events, SourceModifier} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nconst SUGGESTION_TIERS = {\n\t// Typically a player with lag can derp positional in opener, this usually happens 2 times per fight.\n\t// With 3 charges of RoE for a 6s no positionals buff, and True North every 45s tho, this shouldn't be\n\t// an issue even if the player is lagging worse than the author of this comment.\n\tCRIT: {\n\t\t1: SEVERITY.MEDIUM,\n\t\t3: SEVERITY.MAJOR,\n\t},\n\n\t// 3 is pretty much \"you ruined a Perfect Balance you turkey\".\n\tWEAK: {\n\t\t1: SEVERITY.MEDIUM,\n\t\t4: SEVERITY.MAJOR,\n\t},\n}\n\nconst CRIT_MODIFIERS = new Set([SourceModifier.CRITICAL, SourceModifier.CRITICAL_DIRECT])\n\n// Essentially allow us to work on a single target\ntype EventDamageTarget = Events['damage']['targets'] extends Array<infer T> ? T : never\n\ninterface Boot {\n\tcrit: boolean\n\topo: boolean\n\tweak: boolean\n\ttimestamp: number\n}\n\nexport class Steppies extends Analyser {\n\tstatic override handle = 'steppies'\n\n\t@dependency private actors!: Actors\n\t@dependency private checklist!: Checklist\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\n\tprivate liteBootPotency = getBasePotency(this.data.actions.BOOTSHINE)\n\tprivate leadBootPotency = getPotencyWithMods(this.data.actions.BOOTSHINE, [], ['LEADEN_FIST'])\n\n\tprivate steppies: Boot[] = []\n\n\toverride initialise(): void {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.type('damage')\n\t\t\t\t.cause(filter<Cause>().action(this.data.actions.BOOTSHINE.id)),\n\t\t\tthis.onStep,\n\t\t)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onStep(event: Events['damage']): void {\n\t\tconst boot: Boot = {\n\t\t\tcrit: event.targets.some(this.isCriticalHit),\n\t\t\topo: this.actors.current.hasStatus(this.data.statuses.OPO_OPO_FORM.id),\n\t\t\tweak: !this.actors.current.hasStatus(this.data.statuses.LEADEN_FIST.id),\n\t\t\ttimestamp: event.timestamp,\n\t\t}\n\n\t\tthis.steppies.push(boot)\n\t}\n\n\tprivate onComplete(): void {\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"mnk.steppies.checklist.name\">Buff Bootshine</Trans>,\n\t\t\tdescription: <Trans id=\"mnk.steppies.checklist.description\">\n\t\t\t\t<DataLink action=\"BOOTSHINE\"/> is your strongest form GCD when you buff it by using <DataLink action=\"DRAGON_KICK\" /> beforehand.\n\t\t\t</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.DRAGON_KICK,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"mnk.steppies.checklist.requirement.name\"><DataLink status=\"LEADEN_FIST\"/> buff rate</Trans>,\n\t\t\t\t\tpercent: () => this.getLeadenPercent(this.steppies),\n\t\t\t\t}),\n\t\t\t],\n\t\t\ttarget: 100,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.DRAGON_KICK.icon,\n\t\t\tcontent: <Trans id=\"mnk.steppies.suggestions.dragon_kick.content\">\n\t\t\t\tAvoid unbuffed <DataLink action=\"BOOTSHINE\"/> by using <DataLink action=\"DRAGON_KICK\" /> before it.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"mnk.steppies.suggestions.dragon_kick.why\">\n\t\t\t\t{this.getUnbuffedCount(this.steppies) * (this.leadBootPotency - this.liteBootPotency)} potency lost to missing <DataLink status=\"LEADEN_FIST\"/> buff {this.getUnbuffedCount(this.steppies)} times.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS.WEAK,\n\t\t\tvalue: this.getUnbuffedCount(this.steppies),\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.BOOTSHINE.icon,\n\t\t\tcontent: <Trans id=\"mnk.steppies.suggestions.bootshine.content\">\n\t\t\t\tTry to always hit your positional on <DataLink action=\"BOOTSHINE\"/>. Between the guaranteed critical hit under <DataLink status=\"OPO_OPO_FORM\"/> and the potency buff from <DataLink status=\"LEADEN_FIST\"/>, this is essentially your strongest skill.\n\t\t\t</Trans>,\n\t\t\twhy: <Trans id=\"mnk.steppies.suggestions.bootshine.why\">\n\t\t\t\t<Plural value={this.getUncritCount(this.steppies)} one=\"# use of\" other=\"# uses of\" /> <DataLink action=\"BOOTSHINE\"/> executed with incorrect position.\n\t\t\t</Trans>,\n\t\t\ttiers: SUGGESTION_TIERS.CRIT,\n\t\t\tvalue: this.getUncritCount(this.steppies),\n\t\t}))\n\t}\n\n\tgetUnbuffedCount = (boots: Boot[]): number => boots.filter(boot => boot.weak).length\n\n\tgetUncritCount = (boots: Boot[]): number => boots.filter(boot => !boot.crit && boot.opo).length\n\n\tgetLeadenPercent = (boots: Boot[]): number => 100 - (this.getUnbuffedCount(boots) / boots.length) * 100\n\n\tprivate isCriticalHit({sourceModifier}: EventDamageTarget): boolean {\n\t\treturn CRIT_MODIFIERS.has(sourceModifier)\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action, ActionKey, getBasePotency} from 'data/ACTIONS'\nimport {Status} from 'data/STATUSES'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {EventHook} from 'parser/core/Dispatcher'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport {Statuses} from 'parser/core/modules/Statuses'\nimport Suggestions, {SEVERITY, TieredSuggestion} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\nimport {fillActions} from './utilities'\n\n// Expected maximum time left to refresh TS - this is the slowest possible GCD for a full set of forms\nconst TWIN_SNAKES_BUFFER = 6000\n\nconst TWIN_IGNORED_GCDS: ActionKey[] = [\n\t'FORM_SHIFT',\n\t'MEDITATION',\n]\n\ninterface TwinState {\n\tcasts: Array<Events['action']>\n\tstart: number\n\tend?: number\n}\n\nexport class TwinSnakes extends Analyser {\n\tstatic override handle = 'twinsnakes'\n\n\t@dependency private actors!: Actors\n\t@dependency private checklist!: Checklist\n\t@dependency private data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency private statuses!: Statuses\n\t@dependency private suggestions!: Suggestions\n\n\tprivate history: TwinState[] = []\n\tprivate ignoredGcds: Array<Action['id']> = []\n\tprivate twinSnake: TwinState | undefined\n\tprivate lastRefresh: number = this.parser.pull.timestamp\n\tprivate lastDrop: number = this.parser.pull.timestamp\n\n\t// Clipping the duration\n\tprivate earlySnakes: number = 0\n\n\t// Antman used without TS active\n\tprivate failedAnts: number = 0\n\n\tprivate twinHook?: EventHook<Events['action']>\n\n\toverride initialise() {\n\t\tthis.ignoredGcds = fillActions(TWIN_IGNORED_GCDS, this.data)\n\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerFilter.type('statusApply').status(this.data.statuses.DISCIPLINED_FIST.id), this.onGain)\n\t\tthis.addEventHook(playerFilter.type('statusRemove').status(this.data.statuses.DISCIPLINED_FIST.id), this.onDrop)\n\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['action']): void {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// Only include GCDs\n\t\tif (action == null || !(action.onGcd ?? false)) { return }\n\n\t\t// Ignore FS and Meditation\n\t\tif (this.ignoredGcds.includes(action.id)) { return }\n\n\t\t// Check for actions used without TS up. In the case of TS, the window will be opened\n\t\t// by the gain hook, so this GCD won't count anyway. For anything else, there's no\n\t\t// window so no need to count them.\n\t\tif (this.twinSnake == null) {\n\t\t\t// Did Anatman refresh TS?\n\t\t\tif (action.id === this.data.actions.ANATMAN.id) {\n\t\t\t\tthis.failedAnts++\n\t\t\t}\n\n\t\t\t// Since TS isn't active, we always return early\n\t\t\treturn\n\t\t}\n\n\t\t// Verify the window isn't closed, and count the GCDs:\n\t\tif (this.twinSnake.end != null) {\n\t\t\t// We still count TS in the GCD list of the window, just flag if it's early\n\t\t\tif (action.id === this.data.actions.TWIN_SNAKES.id) {\n\t\t\t\tconst expected = this.data.statuses.DISCIPLINED_FIST.duration - TWIN_SNAKES_BUFFER\n\t\t\t\tif (event.timestamp - this.lastRefresh < expected) { this.earlySnakes++ }\n\t\t\t}\n\n\t\t\tthis.twinSnake.casts.push(event)\n\t\t}\n\t}\n\n\t// Can be TS, FPF, or Antman - new window for TS as needed, otherwise just reset the GCD count\n\tprivate onGain(event: Events['statusApply']): void {\n\t\t// Check if existing window or not\n\t\tif (this.twinSnake == null) {\n\t\t\tthis.twinSnake = {start: event.timestamp, casts: []}\n\n\t\t\t// Hook all GCDs so we can count GCDs in buff windows\n\t\t\tthis.twinHook = this.addEventHook(\n\t\t\t\tfilter<Event>()\n\t\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t\t.type('action'),\n\t\t\t\tthis.onCast,\n\t\t\t)\n\t\t}\n\n\t\t// Set the time for Twin refresh\n\t\tthis.lastRefresh = event.timestamp\n\t}\n\n\tprivate onDrop(event: Events['statusRemove']): void {\n\t\t// Only account for the drop here, not at end of fight cleanup\n\t\tthis.lastDrop = event.timestamp\n\t\tthis.stopAndSave(event.timestamp)\n\t}\n\n\tprivate stopAndSave(endTime: number = this.parser.currentEpochTimestamp): void {\n\t\tif (this.twinSnake != null) {\n\t\t\tthis.twinSnake.end = endTime\n\n\t\t\tthis.history.push(this.twinSnake)\n\n\t\t\tif (this.twinHook != null) {\n\t\t\t\tthis.removeEventHook(this.twinHook)\n\t\t\t\tthis.twinHook = undefined\n\t\t\t}\n\t\t}\n\n\t\tthis.twinSnake = undefined\n\t}\n\n\tprivate onComplete() {\n\t\t// Close off the last window\n\t\tthis.stopAndSave(this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\t// Calculate derped potency to early refreshes\n\t\tconst lostTruePotency = this.earlySnakes * (getBasePotency(this.data.actions.TRUE_STRIKE) - getBasePotency(this.data.actions.TWIN_SNAKES))\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"mnk.twinsnakes.checklist.name\">Keep <DataLink status=\"DISCIPLINED_FIST\" showIcon={false}/> up</Trans>,\n\t\t\tdescription: <Trans id=\"mnk.twinsnakes.checklist.description\">Disciplined Fist is an easy 15% buff to your DPS.</Trans>,\n\t\t\tdisplayOrder: DISPLAY_ORDER.TWIN_SNAKES,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"mnk.twinsnakes.checklist.requirement.name\"><DataLink status=\"DISCIPLINED_FIST\"/> uptime</Trans>,\n\t\t\t\t\tpercent: () => this.getBuffUptimePercent(this.data.statuses.DISCIPLINED_FIST.id),\n\t\t\t\t}),\n\t\t\t],\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.TWIN_SNAKES.icon,\n\t\t\tcontent: <Trans id=\"mnk.twinsnakes.suggestions.early.content\">\n\t\t\t\tAvoid refreshing <DataLink action=\"TWIN_SNAKES\"/> signficantly before its expiration as you're losing uses of the higher potency <DataLink action=\"TRUE_STRIKE\"/>.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MEDIUM,\n\t\t\t\t4: SEVERITY.MAJOR,\n\t\t\t},\n\t\t\tvalue: this.earlySnakes,\n\t\t\twhy: <Trans id=\"mnk.twinsnakes.suggestions.early.why\">\n\t\t\t\t{lostTruePotency} potency lost to <Plural value={this.earlySnakes} one=\"# early refresh\" other=\"# early refreshes\" />.\n\t\t\t</Trans>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.ANATMAN.icon,\n\t\t\tcontent: <Trans id=\"mnk.twinsnakes.suggestions.antman.content\">\n\t\t\t\tTry to get <DataLink status=\"DISCIPLINED_FIST\"/> up before using <DataLink action=\"ANATMAN\"/> to take advantage of its free refresh.\n\t\t\t</Trans>,\n\t\t\ttiers: {\n\t\t\t\t1: SEVERITY.MINOR,\n\t\t\t\t2: SEVERITY.MEDIUM,\n\t\t\t},\n\t\t\tvalue: this.failedAnts,\n\t\t\twhy: <Trans id=\"mnk.twinsnakes.suggestions.antman.why\">\n\t\t\t\t<Plural value={this.failedAnts} one=\"# use\" other=\"# uses\" /> of <DataLink action=\"ANATMAN\"/> failed to refresh <DataLink status=\"DISCIPLINED_FIST\"/>.\n\t\t\t</Trans>,\n\t\t}))\n\t}\n\n\tprivate getBuffUptimePercent(statusId: Status['id']): number {\n\t\tconst status = this.data.getStatus(statusId)\n\t\tif (status == null) { return 0 }\n\n\t\tconst statusUptime = this.statuses.getUptime(status, this.actors.current)\n\t\tconst fightUptime = this.parser.currentDuration - this.invulnerability.getDuration({types: ['invulnerable']})\n\n\t\treturn (statusUptime / fightUptime) * 100\n\t}\n}\n","import {Weaving as CoreWeaving, Weave} from 'parser/core/modules/Weaving'\n\n// Due to Greased Lightning, Monk frequently hits GCD speeds that make double\n// weaving without clipping really close to the wire, to the point implementation\n// details such as server message delay can effect an effective GCD roll or not.\n// Core weaving marks this breakpoint (with wiggle room) as 1-weave only, but monk\n// realistically uses two weaves regardless in these situations, as the resultant\n// clipping is insufficient to outweigh the damage benefit. We're hard overriding\n// with a permitted double weave here to account for that case - the ABC module\n// will report on any significant downtime stemming from this, or otherwise.\nconst REGULAR_MAX_WEAVES = 2\nconst SSS_MAX_WEAVES = 4\n\nexport class Weaving extends CoreWeaving {\n\tprotected override getMaxWeaves(weave: Weave) {\n\t\tif (weave.leadingGcdEvent?.action === this.data.actions.SIX_SIDED_STAR.id) {\n\t\t\treturn SSS_MAX_WEAVES\n\t\t}\n\n\t\treturn REGULAR_MAX_WEAVES\n\t}\n}\n","import {ActionTimeline} from './ActionTimeline'\nimport {AoE} from './AoE'\nimport {CooldownDowntime} from './CooldownDowntime'\nimport {Defensives} from './Defensives'\nimport {Demolish} from './Demolish'\nimport {Forms} from './Forms'\nimport {GreasedLightning} from './GreasedLightning'\nimport {Positionals} from './Positionals'\nimport {Revolution} from './Revolution'\nimport {RiddleOfFire} from './RiddleOfFire'\nimport {RiddleOfWind} from './RiddleOfWind'\nimport {Steppies} from './Steppies'\nimport {TwinSnakes} from './TwinSnakes'\nimport {Weaving} from './Weaving'\n\nexport default [\n\tActionTimeline,\n\tAoE,\n\tCooldownDowntime,\n\tRevolution,\n\tDefensives,\n\tDemolish,\n\tForms,\n\tGreasedLightning,\n\tPositionals,\n\tRiddleOfFire,\n\tRiddleOfWind,\n\tSteppies,\n\tTwinSnakes,\n\tWeaving,\n]\n","require('../../modules/es.math.trunc');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Math.trunc;\n","var $ = require('../internals/export');\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n$({ target: 'Math', stat: true }, {\n  trunc: function trunc(it) {\n    return (it > 0 ? floor : ceil)(it);\n  }\n});\n","var parent = require('../../es/math/trunc');\n\nmodule.exports = parent;\n"],"names":["module","exports","ItemDepth","ActionTimeline","CastTime","Cooldowns","Data","Timeline","resolvedRows","groupRows","action","this","addRow","content","constructor","rows","config","resolvedConfig","resolveConfig","push","addEventHook","onComplete","maybeAction","fullAction","undefined","data","getAction","actions","uses","cooldowns","cooldownHistory","id","length","name","populatedGroups","row","lateResolveLabel","label","resolveRowLabel","populateRow","forEach","specifier","groups","group","add","allGroups","has","finalConfig","Array","isArray","ensureArray","existingRow","get","isDefined","firstContent","Trans","timeline","ContainerRow","order","collapse","set","addCooldownItems","addChargeItems","chargeHistory","history","entry","duration","getCooldownDuration","start","parser","pull","timestamp","end","addItem","SimpleItem","className","item","delta","ActionItem","depth","ACTION","ChargeGainItem","CHARGE_GAIN","endReason","CooldownEndReason","castTime","forAction","Math","max","Analyser","handle","debug","dependency","Content","styles","Icon","BaseItem","DoTs","Actors","Invulnerability","Statuses","trackedStatuses","statusApplications","filter","type","source","actor","status","oneOf","onApply","event","getStatus","trackedStatus","target","trackedStatusOnTarget","lastApplied","totalClipping","excludeApplication","clip","addChecklistRules","addClippingSuggestions","statusId","statuses","getUptime","actors","foes","invulnerability","getDuration","types","fightDuration","round","estimateHelp","__all","legacyFflogs","GlobalCooldown","Statistics","SpeedAdjustments","speedAdjustments","getAdjustedDuration","BASE_GCD","isAdjustmentEstimated","estimated","isEstimated","statistics","SimpleStatistic","title","icon","ATTACK","value","formatDuration","info","report","meta","Positionals","Checklist","positionalResults","positionals","cause","matchCauseActionId","positional","onCast","positionalResult","getOrCreatePositionalResult","positionalHit","targets","bonusPercent","hits","misses","result","missed_positional_combo_bonus_percent","calculateBonusPercent","getBasePotency","getPotencyWithMods","BonusModifier","missedPositionalBonusPercents","base","bonus","relative_timestamp","relativeTimestamp","circular","compact","size","onClick","show","formatEpochTimestamp","checklist","Rule","displayOrder","DISPLAY_ORDER","description","requirements","positionalRequirement","actual","expected","percent","min","Requirement","weight","overrideDisplay","toFixed","total","current","unstackable","celled","textAlign","numHits","numMisses","success","style","whiteSpace","showName","positive","negative","miss","createTimelineButton","ft","statusSpecifier","targetSpecifier","edges","edgesForActor","statusHistory","a","b","uptime","application","edge","side","events","apply","refresh","splitRangeForInvulns","statusDuration","remove","currentEpochTimestamp","range","finalRanges","invulns","getWindows","actorFilter","kind","invuln","previousRange","CAST_TIME_MAX_WEAVES","WEAVING_SEVERITY","SEVERITY","Weaving","Suggestions","suggestionIcon","moduleLink","cursor","scrollTo","message","suggestionContent","severity","weaves","ongoingCastEvent","leadingGcdEvent","trailingGcdEvent","badWeaves","playerFilter","onBeginCast","clearWeave","autoAttack","isOgcd","saveIfBad","suggestions","TieredSuggestion","why","tiers","leadingTimestamp","gcdTimeDiff","weave","isBadWeave","onGcd","weaveCount","isActive","recast","recastForEvent","getMaxWeaves","forEvent","matchClosestLower","panels","key","exclusive","styled","fluid","CoreActionTimeline","AoE","ENLIGHTENMENT","trackedActions","aoeAction","SHADOW_OF_THE_DESTROYER","stActions","BOOTSHINE","DRAGON_KICK","minTargets","FOUR_POINT_FURY","TRUE_STRIKE","TWIN_SNAKES","ROCKBREAKER","DEMOLISH","SNAP_PUNCH","THE_FORBIDDEN_CHAKRA","hasStatus","LEADEN_FIST","AoEUsages","CooldownDowntime","defaultAllowedAverageDowntime","trackedCds","BROTHERHOOD","firstUseOffset","PERFECT_BALANCE","RIDDLE_OF_FIRE","RIDDLE_OF_WIND","CoreCooldownDowntime","Defensives","trackedDefensives","RIDDLE_OF_EARTH","CoreDefensives","SUGGESTION_TIERS","CLIPPING","Demolish","getUptimePercent","demolishClipPerMinute","getClippingAmount","FORMS","OPO_OPO_ACTIONS","BLITZ_ACTIONS","fillActions","list","actionKey","Forms","Downtime","forms","opoOpoSkills","formless","resetForms","skippedForms","droppedForms","lastFormChanged","lastFormDropped","perfectlyFresh","formHook","statusKey","onGain","onRemove","onPerfectOut","currentForm","form","untargetable","downtime","getDowntime","FORM_SHIFT","FORMLESS_FIST","OPO_OPO_FORM","RAPTOR_FORM","COEURL_FORM","resetFormHook","removeEventHook","Suggestion","GreasedLightning","attribute","JOBS","job","speedStat","CorePositionals","Revolution","revolutions","CELESTIAL_REVOLUTION","lowerBound","ELIXIR_FIELD","upperBound","RISING_PHOENIX","BlitzEvaluator","opts","blitzActions","windows","format","header","accessor","window","countBlitzes","SEVERITIES","TOTAL_GCDS","BAD_GCDS","IGNORED_ACTIONS","RiddleOfFire","buffStatus","suggestionWindowName","ignoreActions","addEvaluator","ExpectedGcdCountEvaluator","expectedGcds","globalCooldown","hasStacks","severityTiers","EXPECTED_GCDS","adjustCount","SIX_SIDED_STAR","LimitedActionsEvaluator","expectedActions","MEDITATION","expectedPerWindow","ANATMAN","BuffWindow","RiddleOfWind","autos","windHook","onPass","expectedAttacks","actualAttacks","CRIT","WEAK","CRIT_MODIFIERS","SourceModifier","Steppies","liteBootPotency","leadBootPotency","steppies","getUnbuffedCount","boots","boot","weak","getUncritCount","crit","opo","getLeadenPercent","onStep","some","isCriticalHit","sourceModifier","TWIN_IGNORED_GCDS","TwinSnakes","ignoredGcds","twinSnake","lastRefresh","lastDrop","earlySnakes","failedAnts","twinHook","DISCIPLINED_FIST","onDrop","casts","stopAndSave","endTime","lostTruePotency","showIcon","getBuffUptimePercent","currentDuration","CoreWeaving","path","trunc","$","ceil","floor","stat","it","parent"],"sourceRoot":""}