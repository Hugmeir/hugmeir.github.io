{"version":3,"file":"assets/jobs-rdm.635ae75c.js","mappings":"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","sources":["webpack://@xivanalysis/client/./src/parser/core/modules/AlwaysBeCasting.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Defensives.tsx","webpack://@xivanalysis/client/./src/parser/core/modules/Weaving.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/CastTime.ts","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/Combos.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/DISPLAY_ORDER.ts","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/Defensives.ts","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/Dualcast.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/Embolden.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/GeneralCDDowntime.ts","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/Interrupts.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/MeleeCombos.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/statistics/DualStatistic.module.css?2ede","webpack://@xivanalysis/client/./src/parser/jobs/rdm/statistics/DualStatistic.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/ManaGauge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/ManaStackGauge.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/Procs.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/Swiftcast.tsx","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/Weaving.ts","webpack://@xivanalysis/client/./src/parser/jobs/rdm/modules/index.tsx"],"sourcesContent":["import {Trans} from '@lingui/react'\nimport {Action} from 'data/ACTIONS'\nimport {ANIMATION_LOCK} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport Checklist, {Requirement, Rule} from 'parser/core/modules/Checklist'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {GlobalCooldown} from 'parser/core/modules/GlobalCooldown'\nimport {SpeedAdjustments} from 'parser/core/modules/SpeedAdjustments'\nimport React from 'react'\n\nconst UPTIME_TARGET = 98\n\nexport class AlwaysBeCasting extends Analyser {\n\tstatic override handle = 'abc'\n\tstatic override debug = false\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected checklist!: Checklist\n\t@dependency protected data!: Data\n\t@dependency protected downtime!: Downtime\n\t@dependency protected globalCooldown!: GlobalCooldown\n\t@dependency protected speedAdjustments!: SpeedAdjustments\n\n\tprotected gcdUptimeSuggestionContent: JSX.Element = <Trans id=\"core.always-cast.description\">\n\t\tMake sure you're always doing something. It's often better to make small\n\t\tmistakes while keeping the GCD rolling than it is to perform the correct\n\t\trotation slowly.\n\t</Trans>\n\n\tprotected gcdUptime: number = 0\n\tprotected gcdsCounted: number = 0\n\n\tprivate lastBeginCast?: Events['prepare']\n\n\toverride initialise() {\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('prepare'),\n\t\t\tthis.onBeginCast\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>().source(this.parser.actor.id).type('action'),\n\t\t\tthis.onCast\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.lastBeginCast = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (action == null || action.onGcd == null || !action.onGcd) {\n\t\t\treturn\n\t\t}\n\n\t\tlet castTime = this.castTime.forEvent(event) ?? 0\n\t\tconst adjustedBaseGCD = this.globalCooldown.getDuration()\n\t\tif (castTime >= adjustedBaseGCD) {\n\t\t\t// Account for \"caster tax\" - animation lock on spells with cast time equal to or greater than the GCD that prevents starting the next spell until the animation finishes\n\t\t\tcastTime += ANIMATION_LOCK\n\t\t}\n\t\tconst recastTime = this.castTime.recastForEvent(event) ?? 0\n\n\t\tconst castStart = (this.lastBeginCast != null && this.lastBeginCast.action === event.action) ? this.lastBeginCast.timestamp : event.timestamp\n\t\tif (this.considerCast(action, castStart)) {\n\t\t\tconst relativeTimestamp = event.timestamp - this.parser.pull.timestamp\n\t\t\tif (castTime > relativeTimestamp) {\n\t\t\t\tthis.debug(`GCD Uptime for precast ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)} - Cast time: ${castTime} | Recast time: ${recastTime} | Time of completion: ${relativeTimestamp}`)\n\t\t\t\tthis.gcdUptime += Math.max(0, relativeTimestamp)\n\t\t\t} else {\n\t\t\t\tthis.debug(`GCD Uptime for ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)} - Cast time: ${castTime} | Recast time: ${recastTime}`)\n\t\t\t\tthis.gcdUptime += Math.max(castTime, recastTime)\n\t\t\t}\n\t\t\tthis.gcdsCounted += 1\n\t\t} else {\n\t\t\tthis.debug(`Excluding cast of ${action.name} at ${this.parser.formatEpochTimestamp(event.timestamp, 1)}`)\n\t\t}\n\t\tthis.lastBeginCast = undefined\n\t}\n\n\t/**\n\t * Implementing modules MAY override this to return false and exclude certain events from GCD uptime calculations.\n\t * By default, returns true if the cast did not start during downtime\n\t * @param action Action being considered for GCD uptime\n\t * @param timestamp Timestamp the action occurred at\n\t * @param castTime Calculated cast time of the action (adjusted by speed modifiers, if any active)\n\t */\n\tprotected considerCast(_action: Action, castStart: number) {\n\t\treturn !this.downtime.isDowntime(castStart)\n\t}\n\n\tprotected getUptimePercent(): number {\n\t\tthis.debug(`Observed ${this.gcdsCounted} GCDs for a total of ${this.gcdUptime} ms of uptime`)\n\t\tconst fightDuration = this.parser.currentDuration - this.downtime.getDowntime()\n\t\tconst uptime = this.gcdUptime / fightDuration * 100\n\t\tthis.debug(`Total fight duration: ${this.parser.currentDuration} - Downtime: ${this.downtime.getDowntime()} - Uptime percentage ${uptime}`)\n\t\treturn uptime\n\t}\n\n\tprotected onComplete() {\n\t\tif (this.gcdUptime === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.checklist.add(new Rule({\n\t\t\tname: <Trans id=\"core.always-cast.title\">Always be casting</Trans>,\n\t\t\tdescription: this.gcdUptimeSuggestionContent,\n\t\t\tdisplayOrder: -1,\n\t\t\trequirements: [\n\t\t\t\tnew Requirement({\n\t\t\t\t\tname: <Trans id=\"core.always-cast.gcd-uptime\">GCD Uptime</Trans>,\n\t\t\t\t\tpercent: this.getUptimePercent(),\n\t\t\t\t}),\n\t\t\t],\n\t\t\ttarget: UPTIME_TARGET,\n\t\t}))\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Plural, Trans} from '@lingui/react'\nimport {ActionLink} from 'components/ui/DbLink'\nimport {Action, ActionKey} from 'data/ACTIONS'\nimport {JOBS, RoleKey} from 'data/JOBS'\nimport {Analyser} from 'parser/core/Analyser'\nimport {dependency} from 'parser/core/Injectable'\nimport {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\nimport {Data} from 'parser/core/modules/Data'\nimport React, {Fragment, ReactNode} from 'react'\nimport {Accordion, Button, Icon, Message, Table} from 'semantic-ui-react'\nimport {CooldownEndReason, CooldownHistoryEntry, Cooldowns} from './Cooldowns'\nimport DISPLAY_ORDER from './DISPLAY_ORDER'\nimport {Timeline} from './Timeline'\n\nconst DEFENSIVE_ROLE_ACTIONS: Map<RoleKey, ActionKey[]> = new Map<RoleKey, ActionKey[]>([\n\t['TANK', ['RAMPART', 'REPRISAL']],\n\t['MELEE', ['FEINT', 'BLOODBATH', 'SECOND_WIND']],\n\t['PHYSICAL_RANGED', ['SECOND_WIND']],\n\t['MAGICAL_RANGED', ['ADDLE']],\n\t['HEALER', []],\n])\n\nexport class Defensives extends Analyser {\n\tstatic override handle = 'defensives'\n\tstatic override title = t('core.defensives.title')`Defensives`\n\tstatic override displayOrder = DISPLAY_ORDER.DEFENSIVES\n\n\t@dependency protected cooldowns!:Cooldowns\n\t@dependency protected cooldownDowntime!: CooldownDowntime\n\t@dependency protected data!: Data\n\t@dependency private timeline!: Timeline\n\n\t/**\n\t * Implementing modules should provide a list of job-specific defensive actions to track\n\t */\n\tprotected trackedDefensives: Action[] = []\n\t/**\n\t * Implementing modules may override the main header message text\n\t */\n\tprotected headerContent: ReactNode = <Trans id=\"core.defensives.header.content\">\n\t\tUsing your mitigation and healing cooldowns can help you survive mistakes, or relieve some stress on the healers and let them deal more damage.<br/>\n\t\tWhile you shouldn't use them at the expense of your rotation or buff alignment, you should try to find helpful times to use them.\n\t</Trans>\n\n\toverride initialise() {\n\t\tconst roleDefensives = DEFENSIVE_ROLE_ACTIONS.get(JOBS[this.parser.actor.job].role)?.map(key => this.data.actions[key]) ?? []\n\t\troleDefensives.forEach(roleAction => {\n\t\t\tif (!this.trackedDefensives.find(action => roleAction.id === action.id)) {\n\t\t\t\tthis.trackedDefensives.push(roleAction)\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate getUsageCount(defensive: Action): number {\n\t\treturn this.getUses(defensive).length\n\t}\n\n\tprivate getUses(defensive: Action): CooldownHistoryEntry[] {\n\t\treturn this.cooldowns.cooldownHistory(defensive).filter((entry) => entry.endReason !== CooldownEndReason.INTERRUPTED)\n\t}\n\n\tprivate getMaxUses(defensive: Action): number {\n\t\tconst totalAdditionalUses = this.getUses(defensive).reduce((acc, usage) => acc + this.getAdditionalUsageData(defensive, usage.start).chargesBeforeNextUse, this.getAdditionalUsageData(defensive).chargesBeforeNextUse)\n\t\treturn this.getUsageCount(defensive) + totalAdditionalUses\n\t}\n\n\toverride output() {\n\t\tif (this.trackedDefensives.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\treturn <Fragment>\n\t\t\t<Message icon>\n\t\t\t\t<Icon name=\"info\" />\n\t\t\t\t<Message.Content>\n\t\t\t\t\t{this.headerContent}\n\t\t\t\t\t<br/><br/>\n\t\t\t\t\t<Trans id=\"core.defensives.header.sub-content\">\n\t\t\t\t\t\tThe below tables will show you where you can gain additional uses of these cooldowns, without interfering with your existing ones.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message.Content>\n\t\t\t</Message>\n\t\t\t<Accordion\n\t\t\t\texclusive={false}\n\t\t\t\tstyled\n\t\t\t\tfluid\n\t\t\t\tpanels={\n\t\t\t\t\tthis.trackedDefensives.map((defensive, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: defensive.id,\n\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\tcontent: <><ActionLink key={index} {...defensive} /> - {this.getUsageCount(defensive)} / {this.getMaxUses(defensive)}</>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\tcontent: <Table compact unstackable celled>\n\t\t\t\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.tryGetAdditionalUseRow(defensive)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.getUses(defensive).map((entry) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn this.getUsageRow(entry, defensive)\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t\t\t</Table>,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t/>\n\t\t</Fragment>\n\t}\n\n\tprivate getUsageRow(entry: CooldownHistoryEntry, defensive: Action): ReactNode {\n\t\treturn <>\n\t\t\t<Table.Row key={entry.start}>\n\t\t\t\t<Table.Cell>\n\t\t\t\t\t<Trans id=\"core.defensives.table.usage-row.text\">Used at <Button\n\t\t\t\t\t\tcircular\n\t\t\t\t\t\tcompact\n\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\ticon=\"time\"onClick={() => this.timeline.show(entry.start - this.parser.pull.timestamp, entry.end - this.parser.pull.timestamp)}>\n\t\t\t\t\t</Button> {this.parser.formatEpochTimestamp(entry.start)}\n\t\t\t\t\t</Trans>\n\t\t\t\t</Table.Cell>\n\t\t\t</Table.Row>\n\t\t\t{\n\t\t\t\tthis.tryGetAdditionalUseRow(defensive, entry.start)\n\t\t\t}\n\t\t</>\n\t}\n\n\tprivate getAdditionalUsageData(defensive: Action, timestamp: number = this.parser.pull.timestamp): {chargesBeforeNextUse: number, availableTimestamp: number, useByTimestamp: number} {\n\t\tlet availableTimestamp: number, currentCharges\n\n\t\tif (timestamp === this.parser.pull.timestamp) {\n\t\t\tavailableTimestamp = this.parser.pull.timestamp\n\t\t\tcurrentCharges = defensive.charges || 1\n\t\t} else {\n\t\t\tconst chargesAvailableEvent = this.cooldowns.chargeHistory(defensive).find(charges => charges.timestamp >= timestamp && charges.current > 0)\n\t\t\tavailableTimestamp = chargesAvailableEvent?.timestamp || (this.parser.pull.duration + this.parser.pull.timestamp)\n\t\t\tcurrentCharges = chargesAvailableEvent?.current || 0\n\t\t}\n\n\t\tconst cooldown = defensive.cooldown || this.parser.pull.duration\n\t\tconst nextEntry = this.getUses(defensive).find(historyEntry => historyEntry.start > timestamp)\n\t\tconst useByTimestamp = nextEntry != null ? (nextEntry.start - cooldown) : (this.parser.pull.timestamp + this.parser.pull.duration)\n\n\t\tif (useByTimestamp <= availableTimestamp) {\n\t\t\treturn {chargesBeforeNextUse: 0, availableTimestamp, useByTimestamp}\n\t\t}\n\n\t\treturn {chargesBeforeNextUse: currentCharges + Math.floor((useByTimestamp - availableTimestamp) / cooldown), availableTimestamp, useByTimestamp}\n\t}\n\n\tprivate tryGetAdditionalUseRow(defensive: Action, timestamp: number = this.parser.pull.timestamp): ReactNode {\n\t\tconst {chargesBeforeNextUse, availableTimestamp, useByTimestamp} = this.getAdditionalUsageData(defensive, timestamp)\n\n\t\tif (chargesBeforeNextUse === 0) {\n\t\t\treturn <></>\n\t\t}\n\n\t\treturn <Table.Row>\n\t\t\t<Table.Cell>\n\t\t\t\t<Trans id=\"core.defensives.table.extra-usage-row.text\"><Plural value={chargesBeforeNextUse} one=\"1 extra use\" other=\"# extra uses\"/> available between <Button\n\t\t\t\t\tcircular\n\t\t\t\t\tcompact\n\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\ticon=\"time\"onClick={() => this.timeline.show(availableTimestamp - this.parser.pull.timestamp, useByTimestamp - this.parser.pull.timestamp)}>\n\t\t\t\t</Button> {this.parser.formatEpochTimestamp(availableTimestamp)} and {this.parser.formatEpochTimestamp(useByTimestamp)}\n\t\t\t\t</Trans>\n\t\t\t</Table.Cell>\n\t\t</Table.Row>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport NormalisedMessage from 'components/ui/NormalisedMessage'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport CastTime from 'parser/core/modules/CastTime'\nimport {Data} from 'parser/core/modules/Data'\nimport {Invulnerability} from 'parser/core/modules/Invulnerability'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {ReactNode} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {matchClosestLower} from 'utilities'\n\nconst CAST_TIME_MAX_WEAVES = {\n\t0: 2,\n\t1000: 1,\n\t2500: 0,\n}\nconst REDUCE_MAX_WEAVES_RECAST_BELOW = 1800\nconst DEFAULT_MAX_WEAVES = 2\n\nconst WEAVING_SEVERITY = {\n\t1: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport interface Weave {\n\tleadingGcdEvent?: Events['action'],\n\ttrailingGcdEvent: Events['action'],\n\tgcdTimeDiff: number,\n\tweaves: Array<Events['action']>,\n}\n\nexport class Weaving extends Analyser {\n\tstatic override handle = 'weaving'\n\n\t@dependency protected castTime!: CastTime\n\t@dependency protected data!: Data\n\t@dependency private invulnerability!: Invulnerability\n\t@dependency protected suggestions!: Suggestions\n\n\tstatic override title = t('core.weaving.title')`Weaving Issues`\n\n\tprotected suggestionIcon: string = 'https://xivapi.com/i/001000/001785.png' // WVR Focused Synth\n\n\tprotected moduleLink = (\n\t\t<a style={{cursor: 'pointer'}} onClick={() => this.parser.scrollTo(Weaving.handle)}>\n\t\t\t<NormalisedMessage message={Weaving.title}/>\n\t\t</a>\n\t)\n\tprotected suggestionContent: ReactNode = <Trans id=\"core.weaving.content\">\n\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the {this.moduleLink} module below for more detailed analysis.\n\t</Trans>\n\n\tprotected severity = WEAVING_SEVERITY\n\n\tprivate weaves: Array<Events['action']> = []\n\tprivate ongoingCastEvent?: Events['prepare']\n\tprivate leadingGcdEvent?: Events['action']\n\tprivate trailingGcdEvent?: Events['action']\n\tprivate badWeaves: Weave[] = []\n\n\toverride initialise() {\n\t\tconst playerFilter = filter<Event>().source(this.parser.actor.id)\n\n\t\tthis.addEventHook(playerFilter.type('prepare'), this.onBeginCast)\n\t\tthis.addEventHook(playerFilter.type('action'), this.onCast)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t\tthis.addEventHook(filter<Event>().type('death'), this.clearWeave)\n\t}\n\n\tprivate onBeginCast(event: Events['prepare']) {\n\t\tthis.ongoingCastEvent = event\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\t// If the action is an auto, just ignore it\n\t\tif (!action || action.autoAttack) {\n\t\t\treturn\n\t\t}\n\n\t\t// If it's not a GCD, just bump the weave count\n\t\tif (this.isOgcd(action)) {\n\t\t\tthis.weaves.push(event)\n\t\t\treturn\n\t\t}\n\n\t\tif (this.ongoingCastEvent && this.ongoingCastEvent.action === action.id) {\n\t\t\t// This event is the end of a GCD cast\n\t\t\tthis.trailingGcdEvent = {\n\t\t\t\t...event,\n\t\t\t\t// Override the timestamp of the GCD with when its cast began\n\t\t\t\ttimestamp: this.ongoingCastEvent.timestamp,\n\t\t\t}\n\t\t} else {\n\t\t\t// This event was an instant GCD (or log missed the cast starting)\n\t\t\tthis.trailingGcdEvent = event\n\t\t}\n\n\t\t// Always reset the ongoing cast\n\t\tthis.ongoingCastEvent = undefined\n\n\t\t// Throw the current state onto the history\n\t\tthis.saveIfBad()\n\n\t\t// Reset\n\t\tthis.leadingGcdEvent = this.trailingGcdEvent\n\t\tthis.weaves = []\n\t}\n\n\tprivate onComplete() {\n\t\t// If there's been at least one gcd, run a cleanup on any remnant data\n\t\tif (this.leadingGcdEvent) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// Few triples is medium, any more is major\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.suggestionIcon,\n\t\t\tcontent: this.suggestionContent,\n\t\t\twhy: <Plural\n\t\t\t\tid=\"core.weaving.why\"\n\t\t\t\tvalue={this.badWeaves.length}\n\t\t\t\t_1=\"# instance of incorrect weaving\"\n\t\t\t\tother=\"# instances of incorrect weaving\"\n\t\t\t/>,\n\t\t\ttiers: this.severity,\n\t\t\tvalue: this.badWeaves.length,\n\t\t}))\n\t}\n\n\tprivate saveIfBad() {\n\t\tif (this.trailingGcdEvent == null) { return }\n\n\t\tconst leadingTimestamp = this.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp\n\t\tconst gcdTimeDiff = this.trailingGcdEvent.timestamp\n\t\t\t- leadingTimestamp\n\t\t\t- this.invulnerability.getDuration({\n\t\t\t\tstart: leadingTimestamp,\n\t\t\t\tend: this.trailingGcdEvent.timestamp,\n\t\t\t})\n\n\t\tconst weave: Weave = {\n\t\t\tleadingGcdEvent: this.leadingGcdEvent,\n\t\t\ttrailingGcdEvent: this.trailingGcdEvent,\n\t\t\tgcdTimeDiff,\n\t\t\tweaves: this.weaves,\n\t\t}\n\n\t\tif (weave.weaves.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isBadWeave(weave)) {\n\t\t\tthis.badWeaves.push(weave)\n\t\t}\n\t}\n\n\tprivate isOgcd(action: Action) {\n\t\treturn !action.onGcd && !action.autoAttack\n\t}\n\n\tprivate isBadWeave(weave: Weave) {\n\t\t// Calc. the no. of weaves - we're ignoring any made while the boss is untargetable, and events that happened before the pull\n\t\tconst weaveCount = weave.weaves.filter(\n\t\t\tevent => true\n\t\t\t\t&& !this.invulnerability.isActive({timestamp: event.timestamp, types: ['untargetable']})\n\t\t\t\t&& event.timestamp >= this.parser.pull.timestamp,\n\t\t).length\n\n\t\tconst recast = ((weave.leadingGcdEvent != null) ? this.castTime.recastForEvent(weave.leadingGcdEvent) : undefined) ?? BASE_GCD\n\t\t// Check the downtime-adjusted GCD time difference for this weave - do not treat multiple weaves during downtime as bad weaves\n\t\treturn weave.gcdTimeDiff > recast && weaveCount > this.getMaxWeaves(weave)\n\t}\n\n\tprivate clearWeave() {\n\t\t// prompts saving any existing weaves if they're bad, and reset\n\t\tif (this.weaves.length > 0) {\n\t\t\tthis.saveIfBad()\n\t\t}\n\n\t\t// remove existing weaves and pretend the next leadingGcdEvent is like a fresh start (which I guess it is)\n\t\tthis.weaves = []\n\t\tthis.leadingGcdEvent = undefined\n\t}\n\n\t/**\n\t * Implementing classes MAY override this in order to provide custom logic for determining the number of max weaves, given the leading GCD Event\n\t * @param event The Action Event of the leading GCD.  Will be undefined for the first GCD of the pull - default behavior is to allow 2 weaves in case of missing pre-pull action\n\t * @returns number of allowed weaves after the leading GCD before flagging as bad weaving\n\t */\n\tprotected getMaxWeaves(weave: Weave): number {\n\t\tif (weave.leadingGcdEvent == null) {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst castTime = this.castTime.forEvent(weave.leadingGcdEvent)\n\t\tif (castTime == null)  {\n\t\t\treturn DEFAULT_MAX_WEAVES\n\t\t}\n\n\t\tconst maxWeaves = matchClosestLower(CAST_TIME_MAX_WEAVES, castTime) ?? DEFAULT_MAX_WEAVES\n\t\tconst recastTime = this.castTime.recastForEvent(weave.leadingGcdEvent) ?? BASE_GCD\n\n\t\treturn maxWeaves - (recastTime < REDUCE_MAX_WEAVES_RECAST_BELOW ? 1 : 0)\n\t}\n\n\toverride output() {\n\t\tif (this.badWeaves.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.badWeaves.map(item => ({\n\t\t\tkey: item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp,\n\t\t\ttitle: {\n\t\t\t\tcontent: <>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.leadingGcdEvent?.timestamp ?? this.parser.pull.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural\n\t\t\t\t\t\tid=\"core.weaving.panel-count\"\n\t\t\t\t\t\tvalue={item.weaves.length}\n\t\t\t\t\t\t_1=\"# weave\"\n\t\t\t\t\t\tother=\"# weaves\"\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tcontent: <Rotation events={[\n\t\t\t\t\t...(item.leadingGcdEvent != null ? [item.leadingGcdEvent] : []),\n\t\t\t\t\t...item.weaves,\n\t\t\t\t]}/>,\n\t\t\t},\n\t\t}))\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import {Event} from 'event'\nimport {filter} from 'parser/core/filter'\nimport CoreCastTime from 'parser/core/modules/CastTime'\n\nexport class CastTime extends CoreCastTime {\n\tprivate accelerationIndex: number | null = null\n\tprivate dualcastIndex: number | null = null\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tconst accelerationFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.ACCELERATION.id)\n\n\t\tthis.addEventHook(accelerationFilter.type('statusApply'), this.onGainAcceleration)\n\t\tthis.addEventHook(accelerationFilter.type('statusRemove'), this.onRemoveAcceleration)\n\n\t\tconst dualcastFilter = filter<Event>()\n\t\t\t.target(this.parser.actor.id)\n\t\t\t.status(this.data.statuses.DUALCAST.id)\n\n\t\tthis.addEventHook(dualcastFilter.type('statusApply'), this.onGainDualcast)\n\t\tthis.addEventHook(dualcastFilter.type('statusRemove'), this.onRemoveDualcast)\n\t}\n\n\tprivate onGainAcceleration(): void {\n\t\tthis.onRemoveAcceleration() // Close the previous stack's adjustment before starting a new one\n\t\tthis.accelerationIndex = this.setInstantCastAdjustment([\n\t\t\tthis.data.actions.VERAERO.id,\n\t\t\tthis.data.actions.VERAERO_III.id,\n\t\t\tthis.data.actions.VERTHUNDER.id,\n\t\t\tthis.data.actions.VERTHUNDER_III.id,\n\t\t\tthis.data.actions.SCATTER.id,\n\t\t\tthis.data.actions.IMPACT.id,\n\t\t])\n\t}\n\n\tprivate onRemoveAcceleration(): void {\n\t\tthis.reset(this.accelerationIndex)\n\t\tthis.accelerationIndex = null\n\t}\n\n\tprivate onGainDualcast(): void {\n\t\tthis.dualcastIndex = this.setInstantCastAdjustment()\n\t}\n\n\tprivate onRemoveDualcast(): void {\n\t\tthis.reset(this.dualcastIndex)\n\t\tthis.dualcastIndex = null\n\t}\n}\n","import {Plural, Trans} from '@lingui/react'\nimport ACTIONS from 'data/ACTIONS'\nimport {Events} from 'event'\nimport {Combos as CoreCombos} from 'parser/core/modules/Combos'\nimport {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React from 'react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Combos extends CoreCombos {\n\t// Overrides\n\toverride suggestionIcon = ACTIONS.ENCHANTED_REDOUBLEMENT.icon\n\tstatic override displayOrder = DISPLAY_ORDER.COMBO_ISSUES\n\n\t//These actions are considered a combo DERP\n\t_derpComboActions = [\n\t\tACTIONS.ENCHANTED_RIPOSTE.id,\n\t\tACTIONS.ENCHANTED_ZWERCHHAU.id,\n\t\tACTIONS.ENCHANTED_REDOUBLEMENT.id,\n\t]\n\t_severityDerpComboActions = {\n\t\t1: SEVERITY.MAJOR,\n\t}\n\t//These actions mean you went in without enough mana\n\t_notEnoughManaActions = [\n\t\tACTIONS.RIPOSTE.id,\n\t\tACTIONS.ZWERCHHAU.id,\n\t\tACTIONS.REDOUBLEMENT.id,\n\t]\n\t_severityNotEnoughManaActions = {\n\t\t1: SEVERITY.MAJOR,\n\t}\n\t//Generics, not handled by the rest\n\t_severityGenericActions = {\n\t\t1: SEVERITY.MAJOR,\n\t}\n\n\t//Overrides\n\toverride addJobSpecificSuggestions(comboBreakers: Array<Events['damage']>, uncomboedGcds: Array<Events['damage']>): boolean {\n\t\tif (comboBreakers.length === 0 && uncomboedGcds.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tlet derpComboCount = 0\n\t\tlet notEnoughManaCount = 0\n\n\t\tif (comboBreakers.length > 0) {\n\t\t\tcomboBreakers.map(breaker => {\n\t\t\t\tif (breaker.cause.type !== 'action') {\n\t\t\t\t\t// Type narrowing safety, this shouldn't ever get hit.  Throw?\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis.debug(`Checking combo breaker: ${JSON.stringify(breaker)}`)\n\t\t\t\tif (this._derpComboActions.includes(breaker.cause.action)) {\n\t\t\t\t\tthis.debug(`${derpComboCount}: derpComboCount`)\n\t\t\t\t\tderpComboCount++\n\t\t\t\t}\n\t\t\t\tif (this._notEnoughManaActions.includes(breaker.cause.action)) {\n\t\t\t\t\tthis.debug(`${notEnoughManaCount}: notEnoughManaCount`)\n\t\t\t\t\tnotEnoughManaCount++\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\t//Process Derped Combos\n\t\tif (derpComboCount > 0) {\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: ACTIONS.ENCHANTED_REDOUBLEMENT.icon,\n\t\t\t\twhy: <Plural id=\"rdm.combos.suggestions.derpcombos.why\" value={derpComboCount} one=\"# enchanted combo was lost due to using the combo skills out of order\" other= \"# enchanted combos were lost due to using the combo skills out of order\" />,\n\t\t\t\tcontent: <Trans id=\"rdm.combos.suggestions.derpcombos.content\">\n\t\t\t\t\tBe sure not to use combo actions out of order.\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: this._severityDerpComboActions,\n\t\t\t\tvalue: derpComboCount,\n\t\t\t}))\n\t\t}\n\n\t\t//Process Not Enough Mana Combos\n\t\tif (notEnoughManaCount > 0) {\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: ACTIONS.RESOLUTION.icon,\n\t\t\t\twhy: <Plural id=\"rdm.combos.suggestions.notenoughmanacombos.why\" value={notEnoughManaCount} one=\"# enchanted combo was lost due to entering the combo before having enough mana\" other= \"# enchanted combos were lost due to entering the combo before having enough mana\" />,\n\t\t\t\tcontent: <Trans id=\"rdm.combos.suggestions.notenoughmanacombos.content\">\n\t\t\t\t\tBe sure not to enter your combo before having 50|50 mana\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: this._severityNotEnoughManaActions,\n\t\t\t\tvalue: notEnoughManaCount,\n\t\t\t}))\n\t\t}\n\n\t\tconst theRest = comboBreakers.length + uncomboedGcds.length - derpComboCount - notEnoughManaCount\n\t\tthis.debug(`TheRest: ${theRest}`)\n\n\t\t//Process The Rest\n\t\tif (theRest > 0) {\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: ACTIONS.ENCHANTED_REDOUBLEMENT.icon,\n\t\t\t\twhy: <Plural id=\"rdm.combos.suggestions.therestcombos.why\" value={theRest} one=\"# enchanted combo was lost due to general combo breakage or combo timing out\" other= \"# enchanted combos were lost due to general combo breakage or combo timing out\" />,\n\t\t\t\tcontent: <Trans id=\"rdm.combos.suggestions.therestcombos.content\">\n\t\t\t\t\tDo not allow your combo to timeout or use GCD Skills or Manafication during your enchanted combos\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: this._severityGenericActions,\n\t\t\t\tvalue: theRest,\n\t\t\t}))\n\t\t}\n\n\t\treturn true\n\t}\n}\n","export const DISPLAY_ORDER = {\n\tDUALCAST: 1,\n\tCOMBO_ISSUES: 2,\n\tINTERRUPTED_CASTS: 3,\n\tWEAVING_ISSUES: 4,\n\tSWIFTCAST: 5,\n\tMELEE_COMBO: 6,\n\tEMBOLDEN: 7,\n\tTINCTURES: 8,\n}\n","import {Defensives as CoreDefensives} from 'parser/core/modules/Defensives'\n\nexport class Defensives extends CoreDefensives {\n\tprotected override trackedDefensives = [\n\t\tthis.data.actions.MAGICK_BARRIER,\n\t]\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport Rotation from 'components/ui/Rotation'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {Data} from 'parser/core/modules/Data'\nimport Downtime from 'parser/core/modules/Downtime'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {Fragment} from 'react'\nimport {Accordion} from 'semantic-ui-react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nconst SEVERITY_EXPIRED_DUALCAST = {\n\t1: SEVERITY.MEDIUM,\n\t2: SEVERITY.MAJOR,\n}\n\nconst SEVERITY_WASTED_DUALCAST = {\n\t1: SEVERITY.MINOR,\n\t3: SEVERITY.MEDIUM,\n\t5: SEVERITY.MAJOR,\n}\n\nexport class DualCast extends Analyser {\n\tstatic override handle = 'dualCast'\n\tstatic override title = t('rdm.dualcast.title')`Dualcast`\n\tstatic override displayOrder = DISPLAY_ORDER.DUALCAST\n\n\t@dependency private data!: Data\n\t@dependency private downtime!: Downtime\n\t@dependency private suggestions!: Suggestions\n\n\tprivate wastedDualCasts: Array<Events['action']> = []\n\tprivate expiredDualCasts = 0\n\tprivate dualcastActive = false\n\n\toverride initialise() {\n\t\tconst playerEvents = filter<Event>().source(this.parser.actor.id)\n\t\tthis.addEventHook(playerEvents.type('action'), this.onCast)\n\t\tthis.addEventHook(playerEvents\n\t\t\t.status(this.data.statuses.DUALCAST.id)\n\t\t\t.type('statusApply'), this.onGain)\n\t\tthis.addEventHook(playerEvents\n\t\t\t.status(this.data.statuses.DUALCAST.id)\n\t\t\t.type('statusRemove'), this.onRemove)\n\t\tthis.addEventHook(filter<Event>().type('complete'), this.onComplete)\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\t\tconst castTime = action?.castTime ?? 0\n\n\t\tif (this.dualcastActive && castTime > 0) {\n\t\t\tif (!this.downtime.isDowntime() && (castTime <= BASE_GCD || action === this.data.actions.SPRINT)) {\n\t\t\t\tthis.wastedDualCasts.push(event)\n\t\t\t}\n\t\t\tthis.dualcastActive = false\n\t\t}\n\t}\n\n\tprivate onGain() {\n\t\tthis.dualcastActive = true\n\t}\n\n\tprivate onRemove() {\n\t\tif (this.dualcastActive) {\n\t\t\tif (!this.downtime.isDowntime()) {\n\t\t\t\tthis.expiredDualCasts++\n\t\t\t}\n\t\t}\n\t\tthis.dualcastActive = false\n\t}\n\n\tprivate onComplete() {\n\t\tif (this.wastedDualCasts.length > 0) {\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.statuses.DUALCAST.icon,\n\t\t\t\tcontent: <Trans id=\"rdm.dualcast.suggestions.wasted.content\">\n\t\t\t\t\tSpells used while <DataLink status=\"DUALCAST\"/> is up should be limited to <DataLink action=\"VERAERO_III\"/>, <DataLink action=\"VERTHUNDER_III\"/>, or <DataLink action=\"VERRAISE\"/>\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: SEVERITY_WASTED_DUALCAST,\n\t\t\t\tvalue: this.wastedDualCasts.length,\n\t\t\t\twhy: <Trans id=\"rdm.dualcast.suggestions.wasted.why\">{this.wastedDualCasts.length} <Plural value={this.wastedDualCasts.length} one=\"Dualcast was\" other=\"Dualcasts were\" /> wasted on low cast-time spells.</Trans>,\n\t\t\t}))\n\t\t}\n\n\t\tif (this.expiredDualCasts > 0) {\n\t\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\t\ticon: this.data.statuses.DUALCAST.icon,\n\t\t\t\tcontent: <Trans id=\"rdm.dualcast.suggestions.missed.content\">\n\t\t\t\t\tYou should avoid wasting Dualcast procs entirely as it is lost potency overtime.\n\t\t\t\t</Trans>,\n\t\t\t\ttiers: SEVERITY_EXPIRED_DUALCAST,\n\t\t\t\tvalue: this.expiredDualCasts,\n\t\t\t\twhy: <Trans id=\"rdm.dualcast.suggestions.missed.why\">{this.expiredDualCasts} <Plural value={this.expiredDualCasts} one=\"Dualcast was\" other=\"Dualcasts were\" /> lost due to not casting.</Trans>,\n\t\t\t}))\n\t\t}\n\t}\n\n\toverride output() {\n\t\tif (this.wastedDualCasts.length === 0) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst panels = this.wastedDualCasts.map(cast => {\n\t\t\tconst action = this.data.getAction(cast.action)\n\t\t\treturn {\n\t\t\t\tkey: cast.timestamp,\n\t\t\t\ttitle: {\n\t\t\t\t\tcontent: <Fragment>\n\t\t\t\t\t\t{this.parser.formatEpochTimestamp(cast.timestamp)}&nbsp;-&nbsp;{action?.name}\n\t\t\t\t\t</Fragment>,\n\t\t\t\t},\n\t\t\t\tcontent: {\n\t\t\t\t\tcontent: <Rotation events={[cast]}/>,\n\t\t\t\t},\n\t\t\t}\n\t\t})\n\n\t\treturn <Accordion\n\t\t\texclusive={false}\n\t\t\tpanels={panels}\n\t\t\tstyled\n\t\t\tfluid\n\t\t/>\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {RaidBuffWindow} from 'parser/core/modules/ActionWindow'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Embolden extends RaidBuffWindow {\n\tstatic override handle = 'embolden'\n\tstatic override title = t('rdm.embolden.title')`Embolden`\n\tstatic override displayOrder = DISPLAY_ORDER.EMBOLDEN\n\toverride buffStatus = [this.data.statuses.EMBOLDEN_SELF, this.data.statuses.EMBOLDEN_PARTY]\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\t\tthis.ignoreActions(this.IGNORE_ACTIONS)\n\t}\n\n\tprivate readonly IGNORE_ACTIONS: number[] = [\n\t\t// Only magic damage is affected by Embolden\n\t\tthis.data.actions.FLECHE.id,\n\t\tthis.data.actions.CONTRE_SIXTE.id,\n\t\tthis.data.actions.CORPS_A_CORPS.id,\n\t\tthis.data.actions.ENGAGEMENT.id,\n\t\tthis.data.actions.DISPLACEMENT.id,\n\n\t\t// Non-damaging utility\n\t\tthis.data.actions.ADDLE.id,\n\t\tthis.data.actions.LUCID_DREAMING.id,\n\t\tthis.data.actions.MAGICK_BARRIER.id,\n\t\tthis.data.actions.SURECAST.id,\n\t]\n}\n","import {CooldownDowntime} from 'parser/core/modules/CooldownDowntime'\n\n// Time that Jump deems ok for a OGCD to be down : ^)\nconst DEFAULT_ALLOWED_DOWNTIME = 1000\nexport class GeneralCDDowntime extends CooldownDowntime {\n\toverride defaultAllowedAverageDowntime = DEFAULT_ALLOWED_DOWNTIME\n\n\toverride trackedCds = [\n\t\t// With the changes to Acceleration, we have a lot of instances where we should hold the skill.\n\t\t// Since it's not really possible to always know when during analysis we give a blanket grace of 20 and\n\t\t// hope that it's accurate enough\n\t\t{\n\t\t\tcooldowns: [this.data.actions.ACCELERATION],\n\t\t\tallowedAverageDowntime: 4000,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.MANAFICATION],\n\t\t\tfirstUseOffset: 17500,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.EMBOLDEN],\n\t\t\tfirstUseOffset: 7500,\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.FLECHE],\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.CONTRE_SIXTE],\n\t\t},\n\t\t{\n\t\t\tcooldowns: [this.data.actions.CORPS_A_CORPS],\n\t\t},\n\t\t{\n\t\t\tcooldowns: [\n\t\t\t\tthis.data.actions.ENGAGEMENT,\n\t\t\t\tthis.data.actions.DISPLACEMENT,\n\t\t\t],\n\t\t},\n\t]\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Interrupts as CoreInterrupts} from 'parser/core/modules/Interrupts'\nimport React from 'react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Interrupts extends CoreInterrupts {\n\tstatic override displayOrder = DISPLAY_ORDER.INTERRUPTED_CASTS\n\toverride suggestionContent = <Trans id=\"rdm.interrupts.suggestion.content\">\n\t\tAvoid interrupting casts by either prepositioning yourself or utilizing slidecasting where possible. If you need to move, try to save a use of <DataLink action=\"SWIFTCAST\"/>, <DataLink action=\"ACCELERATION\"/>, or pool mana for a melee combo or if none of these are available use <DataLink action=\"ENCHANTED_REPRISE\"/>.\n\t</Trans>\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport {ActionLink, DataLink} from 'components/ui/DbLink'\nimport Rotation from 'components/ui/Rotation'\nimport {Action} from 'data/ACTIONS/type'\nimport {Status} from 'data/STATUSES/type'\nimport {Event, Events} from 'event'\nimport {Analyser} from 'parser/core/Analyser'\nimport {filter} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {History} from 'parser/core/modules/ActionWindow/History'\nimport {Actors} from 'parser/core/modules/Actors'\nimport {Data} from 'parser/core/modules/Data'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport {Timeline} from 'parser/core/modules/Timeline'\nimport {DISPLAY_ORDER} from 'parser/jobs/rdm/modules/DISPLAY_ORDER'\nimport {ManaGauge, MANA_DIFFERENCE_THRESHOLD, MANA_CAP} from 'parser/jobs/rdm/modules/ManaGauge'\nimport React, {Fragment} from 'react'\nimport {Button, Message, Table} from 'semantic-ui-react'\n\ntype MeleeCombo = {\n\tevents: Array<Events['action']>,\n\tlastAction: Events['action'],\n\tfinisher: {\n\t\tused: number,\n\t\trecommendedActions: Action[],\n\t\trecommendation: JSX.Element\n\t},\n\tprocs: Status[]\n\tbroken: boolean,\n\tstartingMana: {\n\t\twhite: number,\n\t\tblack: number\n\t}\n}\n\ninterface ManaActions {\n\tproc: Action,\n\tdualcast: Action,\n\tfinisher: Action,\n}\n\ninterface ManaState {\n\tamount: number,\n\tprocReady: boolean,\n\tactions: ManaActions,\n}\n\nenum SuggestionKey {\n\tWRONG_FINISHER = 'WRONG_FINISHER',\n\tDELAY_COMBO = 'DELAY_COMBO',\n}\n\nexport class MeleeCombos extends Analyser {\n\tstatic override handle = 'mlc'\n\tstatic override title = t('rdm.meleecombos.title')`Melee Combos`\n\tstatic override displayOrder = DISPLAY_ORDER.MELEE_COMBO\n\n\t@dependency private data!: Data\n\t@dependency private suggestions!: Suggestions\n\t@dependency private timeline!: Timeline\n\t@dependency private actors!: Actors\n\t@dependency private manaGauge!: ManaGauge\n\n\tprivate readonly finishers = [\n\t\tthis.data.actions.VERHOLY.id,\n\t\tthis.data.actions.VERFLARE.id,\n\t]\n\tprivate readonly severityWastedFinisher = {\n\t\t1: SEVERITY.MINOR,\n\t\t2: SEVERITY.MEDIUM,\n\t\t3: SEVERITY.MAJOR,\n\t}\n\tprivate readonly whiteManaActions: ManaActions = {\n\t\tproc: this.data.actions.VERSTONE,\n\t\tdualcast: this.data.actions.VERAERO_III,\n\t\tfinisher: this.data.actions.VERHOLY,\n\t}\n\tprivate readonly blackManaActions: ManaActions = {\n\t\tproc: this.data.actions.VERFIRE,\n\t\tdualcast: this.data.actions.VERTHUNDER_III,\n\t\tfinisher: this.data.actions.VERFLARE,\n\t}\n\tprivate readonly ignoreFinisherProcsManaThreshold = 4\n\tprivate readonly upperComboTimeFrame = 13\n\tprivate readonly openerDelayForgivenessDuration = 15000\n\n\tprivate readonly suggestionText: Record<SuggestionKey, JSX.Element> = {\n\t\t[SuggestionKey.WRONG_FINISHER]: <Trans id=\"rdm.meleecombos.recommendation.wrongfinisher\">\n\t\t\tYou should use <DataLink action=\"VERFLARE\"/> when your black mana is lower or <DataLink action=\"VERHOLY\"/> when your white mana is lower.\n\t\t</Trans>,\n\t\t[SuggestionKey.DELAY_COMBO]: <Trans id=\"rdm.meleecombos.recommendation.delaycombo\">\n\t\t\tDo not enter your combo with your finisher's proc up. Consider dumping a proc before entering the melee combo as long as you waste less than {this.ignoreFinisherProcsManaThreshold} mana to overcapping.\n\t\t</Trans>,\n\t}\n\n\tprivate meleeCombos = new History<MeleeCombo>(() => ({\n\t\tevents: [],\n\t\tlastAction: {} as Events['action'],\n\t\tfinisher: {\n\t\t\tused: 0,\n\t\t\trecommendedActions: [],\n\t\t\trecommendation: <Trans></Trans>,\n\t\t},\n\t\tprocs: [],\n\t\tbroken: false,\n\t\tstartingMana: {\n\t\t\twhite: 0,\n\t\t\tblack: 0,\n\t\t}}))\n\tprivate incorrectFinishers = {\n\t\tverholy: 0,\n\t\tverflare: 0,\n\t\tdelay: 0,\n\t}\n\tprivate footnoteIndexes: SuggestionKey[] = [];\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('action')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.onCast)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('death')\n\t\t\t\t.actor(this.parser.actor.id),\n\t\t\tthis.onDeath\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('complete'),\n\t\t\tthis.onComplete\n\t\t)\n\t}\n\n\tprivate onCast(event: Events['action']) {\n\t\tconst action = this.data.getAction(event.action)\n\n\t\tif (action == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst current = this.meleeCombos.getCurrent()\n\n\t\tif (action.combo) {\n\t\t\t//We still want to merge the regular and finisher combos, so lets not make a new row for the finisher\n\t\t\tif (action.combo.start && !this.finishers.includes(action.id)) {\n\t\t\t\tthis.breakComboIfExists(event.timestamp)\n\t\t\t\tthis.startCombo(event)\n\t\t\t} else {\n\t\t\t\tif (current == null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t//Again we need to check against the finishers list, we still want one merged row with finisher calculations\n\t\t\t\tif (action.combo.from || this.finishers.includes(action.id)) {\n\t\t\t\t\tconst fromOptions = Array.isArray(action.combo.from) ? action.combo.from : [action.combo.from]\n\t\t\t\t\t//Make certain not to end the combo as broken if we're starting the finisher combo.\n\t\t\t\t\tif (!fromOptions.includes(current.data.lastAction.action ?? 0) && !this.finishers.includes(action.id)) {\n\t\t\t\t\t\tcurrent.data.broken = true\n\t\t\t\t\t\tthis.endCombo(event.timestamp)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrent.data.events.push(event)\n\t\t\t\t\t\tcurrent.data.lastAction = event\n\t\t\t\t\t\tif (this.finishers.includes(action.id)) {\n\t\t\t\t\t\t\tcurrent.data.finisher.used = event.action\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Only handle finisher if this is Resolution, since if we're here we shouldn't be broken.\n\t\t\t\t\t\tif (action.combo.end && event.action === this.data.actions.RESOLUTION.id) {\n\t\t\t\t\t\t\tthis.handleFinisher()\n\t\t\t\t\t\t\tthis.endCombo(event.timestamp)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (action.breaksCombo) {\n\t\t\t/*\n\t\t\tManafication does break combos, but the way we are currently modeling the full RDM combo isn't accurate anymore.\n\t\t\tA full fix for this entails modeling mana stacks, splitting the full combo into two, and fixing the UI to display that info in a reasonable way.\n\t\t\tHowever, as more people are starting to use Manafication after EncRedoublement (to fit multiple combos under buffs), this is a band-aid fix for now.\n\t\t\tAdditional Note: Event though we've now modeled the underlying combos differently, to accurately handle finishers we fabricate them appearing similar to\n\t\t\thow they were when they were one large combo.  As such for now this fix is no longer a bandaid but a permanent fixture.\n\t\t\t*/\n\t\t\tif (action.id === this.data.actions.MANAFICATION.id &&\n\t\t\t\tcurrent && current.data.lastAction.action === this.data.actions.ENCHANTED_REDOUBLEMENT.id) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.breakComboIfExists(event.timestamp)\n\t\t}\n\t}\n\n\tprivate onDeath(event: Events['death']) {\n\t\tthis.breakComboIfExists(event.timestamp)\n\t}\n\n\tprivate onComplete(event: Events['complete']) {\n\t\t// Finish any open combos\n\t\tthis.breakComboIfExists(event.timestamp)\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.VERFLARE.icon,\n\t\t\tcontent: this.suggestionText.WRONG_FINISHER,\n\t\t\twhy: <Plural id=\"rdm.meleecombos.recommendation.wrongfinisher.why\" value={this.incorrectFinishers.verholy + this.incorrectFinishers.verflare} one=\"# Verfire/Verstone cast was lost due to using the incorrect finisher.\" other=\"# Verfire/Verstone casts were lost due to using the incorrect finisher.\" />,\n\t\t\ttiers: this.severityWastedFinisher,\n\t\t\tvalue: this.incorrectFinishers.verholy + this.incorrectFinishers.verflare,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.VERSTONE.icon,\n\t\t\tcontent: this.suggestionText.DELAY_COMBO,\n\t\t\twhy: <Plural id=\"rdm.meleecombos.recommendation.delaycombo.why\" value={this.incorrectFinishers.delay} one=\"# Proc cast was lost due to entering the melee combo with the finisher proc up.\" other=\"# Proc casts were lost due to entering the melee combo with the finisher proc up.\" />,\n\t\t\ttiers: this.severityWastedFinisher,\n\t\t\tvalue: this.incorrectFinishers.delay,\n\t\t}))\n\t}\n\n\t// Helper needed to make this.timeline.show behave, remove when timeline is a Sith and deals in absolutes\n\tprivate relativeTimestamp(timestamp: number) {\n\t\treturn timestamp - this.parser.pull.timestamp\n\t}\n\n\t//Helper to ensure we never attempt to navigate the timeline beyond the ending bound of the fight\n\tprivate endTimestampCap(timestamp: number) {\n\t\tconst fightEnd = this.parser.pull.duration + this.parser.pull.timestamp\n\t\tif (timestamp > fightEnd) {\n\t\t\treturn fightEnd\n\t\t}\n\n\t\treturn timestamp\n\n\t}\n\n\toverride output() {\n\t\tif (this.meleeCombos.entries.length === 0) { return undefined }\n\n\t\treturn (<Fragment>\n\t\t\t<Table compact unstackable celled>\n\t\t\t\t<Table.Header>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t\t<strong><Trans id=\"rdm.meleecombos.table.header.time\">Time</Trans></strong>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t\t<strong><Trans id=\"rdm.meleecombos.table.header.starting-mana\">Starting Mana</Trans></strong>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t\t<strong><Trans id=\"rdm.meleecombos.table.header.starting-procs\">Starting Procs</Trans></strong>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t\t<strong><Trans id=\"rdm.meleecombos.table.header.rotation\">Rotation</Trans></strong>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t\t<strong><Trans id=\"rdm.meleecombos.table.header.recommended\">Recommended</Trans></strong>\n\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Header>\n\t\t\t\t<Table.Body>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.meleeCombos.entries.map(combo => {\n\t\t\t\t\t\t\tconst white = combo.data.startingMana.white\n\t\t\t\t\t\t\tconst black = combo.data.startingMana.black\n\n\t\t\t\t\t\t\t// Prevent null reference errors with broken combos - start with empty values and load with finisher data if exists\n\t\t\t\t\t\t\tconst recommendedActions = (combo.data.finisher) ? combo.data.finisher.recommendedActions : []\n\t\t\t\t\t\t\tconst recommendation = (combo.data.finisher) ? combo.data.finisher.recommendation : ''\n\n\t\t\t\t\t\t\treturn (<Table.Row key={combo.start}>\n\t\t\t\t\t\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t\t\t\t\t\t<span style={{marginRight: 5}}>{this.parser.formatEpochTimestamp(combo.start)}</span>\n\t\t\t\t\t\t\t\t\t{<Button\n\t\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\t\t\t\t\ticon=\"time\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => this.timeline.show(this.relativeTimestamp(combo.start), this.relativeTimestamp(this.endTimestampCap(combo.end ?? combo.start + this.upperComboTimeFrame)))}\n\t\t\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t\t<span style={{whiteSpace: 'nowrap'}}>{white} White | {black} Black</span>\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t\t<span>{\n\t\t\t\t\t\t\t\t\t\tcombo.data.procs.map((key) => {\n\t\t\t\t\t\t\t\t\t\t\tswitch (key) {\n\t\t\t\t\t\t\t\t\t\t\tcase this.data.statuses.VERSTONE_READY:\n\t\t\t\t\t\t\t\t\t\t\t\treturn (<DataLink key=\"verstone\" showName={false} status=\"VERSTONE_READY\"/>)\n\t\t\t\t\t\t\t\t\t\t\tcase this.data.statuses.VERFIRE_READY:\n\t\t\t\t\t\t\t\t\t\t\t\treturn (<DataLink key=\"verfire\" showName={false} status=\"VERFIRE_READY\"/>)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}</span>\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t\t<span style={{whiteSpace: 'nowrap'}}><Rotation events={combo.data.events} /></span>\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\trecommendedActions.map((action) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (<ActionLink key={action.id} showName={false} {...action}/>)\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\trecommendedActions.length > 0 && <br />\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t{recommendation}\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t</Table.Row>)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</Table.Body>\n\t\t\t</Table>\n\t\t\t{this.footnoteIndexes.length > 0 && <Message>\n\t\t\t\t{\n\t\t\t\t\tthis.footnoteIndexes.map((key, index) => {\n\t\t\t\t\t\treturn (<Fragment key={key}>\n\t\t\t\t\t\t\t<sup>{index + 1}</sup> {this.suggestionText[key]}\n\t\t\t\t\t\t\t{index < this.footnoteIndexes.length - 1 && <br />}\n\t\t\t\t\t\t</Fragment>)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Message>}\n\t\t</Fragment>)\n\t}\n\n\tprivate startCombo(event: Events['action']) {\n\t\tconst current = this.meleeCombos.openNew(event.timestamp)\n\t\tcurrent.data.events.push(event)\n\t\tcurrent.data.lastAction = event\n\t\tif (this.actors.current.at(event.timestamp).hasStatus(this.data.statuses.VERSTONE_READY.id)) {\n\t\t\tcurrent.data.procs.push(this.data.statuses.VERSTONE_READY)\n\t\t}\n\t\tif (this.actors.current.at(event.timestamp).hasStatus(this.data.statuses.VERFIRE_READY.id)) {\n\t\t\tcurrent.data.procs.push(this.data.statuses.VERFIRE_READY)\n\t\t}\n\t\tcurrent.data.startingMana.white = this.manaGauge.getWhiteManaAt(event.timestamp - 1)\n\t\tcurrent.data.startingMana.black = this.manaGauge.getBlackManaAt(event.timestamp - 1)\n\t}\n\n\tprivate breakComboIfExists(timestamp: number) {\n\t\tconst current = this.meleeCombos.getCurrent()\n\t\tif (current) {\n\t\t\tcurrent.data.broken = true\n\t\t\tthis.endCombo(timestamp)\n\t\t}\n\t}\n\n\tprivate endCombo(timestamp: number) {\n\t\tthis.meleeCombos.closeCurrent(timestamp)\n\t}\n\n\tprivate handleFinisher() {\n\t\tconst combo = this.meleeCombos.getCurrent()\n\t\tif (!combo) { return }\n\n\t\tconst whiteState = {\n\t\t\tamount: combo.data.startingMana.white,\n\t\t\tprocReady: combo.data.procs.includes(this.data.statuses.VERSTONE_READY),\n\t\t\tactions: this.whiteManaActions,\n\t\t} as ManaState\n\t\tconst blackState = {\n\t\t\tamount: combo.data.startingMana.black,\n\t\t\tprocReady: combo.data.procs.includes(this.data.statuses.VERFIRE_READY),\n\t\t\tactions: this.blackManaActions,\n\t\t} as ManaState\n\t\tconst finisherAction = this.data.getAction(combo.data.finisher.used)\n\t\tif (finisherAction == null) {\n\t\t\treturn\n\t\t}\n\n\t\tlet recommendedFinisher = null\n\t\tif (whiteState.amount < blackState.amount) {\n\t\t\trecommendedFinisher = this.outOfBalanceFinisher(whiteState, blackState)\n\t\t} else if (blackState.amount < whiteState.amount) {\n\t\t\trecommendedFinisher = this.outOfBalanceFinisher(blackState, whiteState)\n\t\t} else {\n\t\t\trecommendedFinisher = this.inBalanceFinisher(blackState, whiteState)\n\t\t}\n\n\t\tif (recommendedFinisher instanceof Array) {\n\t\t\tif (recommendedFinisher === this.finishers) {\n\t\t\t\t// a recommendation of both finishers means ignore the finisher, either one is valid\n\t\t\t\tcombo.data.finisher.recommendedActions.push(finisherAction)\n\t\t\t} else if (combo.start - this.parser.pull.timestamp < this.openerDelayForgivenessDuration) {\n\t\t\t\tcombo.data.finisher.recommendation = <Fragment>\n\t\t\t\t\t<Trans id=\"rdm.meleecombos.recommendation.opener.short\">It's okay to lose procs in the opener.</Trans>\n\t\t\t\t</Fragment>\n\t\t\t} else {\n\t\t\t\t//We've been requested at least for now to not recommend delays for combos, we're not certain if this goes away\n\t\t\t\t//entirely or not, as such I'm just commenting out the final push of the recommendation but leaving the logic in place for now\n\t\t\t\t//Instead we'll just push it as if the first check was correct, that the finisher used was the correct one to utilize.\n\t\t\t\tcombo.data.finisher.recommendedActions.push(finisherAction)\n\t\t\t\t// a recommendation of an array of actions is to delay the combo\n\t\t\t\t// Array.prototype.push.apply(combo.data.finisher.recommendedActions, recommendedFinisher)\n\t\t\t\t// this.incorrectFinishers.delay++\n\t\t\t\t// combo.data.finisher.recommendation = <Fragment>\n\t\t\t\t// \t<Trans id=\"rdm.meleecombos.recommendation.delaycombo.short\">Delay combo</Trans><sup>{this.assignOrGetFootnoteIndex(SuggestionKey.DELAY_COMBO)}</sup>\n\t\t\t\t// </Fragment>\n\t\t\t}\n\t\t} else {\n\t\t\tconst finisherAction = recommendedFinisher\n\t\t\tif (finisherAction == null) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// A specific finisher was recommended\n\t\t\tcombo.data.finisher.recommendedActions.push(finisherAction)\n\t\t\tif (combo.data.finisher.used !== recommendedFinisher.id) {\n\t\t\t\t// wrong finisher was used, add an incorrect finisher tally\n\t\t\t\tif (combo.data.finisher.used === this.data.actions.VERHOLY.id) {\n\t\t\t\t\tthis.incorrectFinishers.verholy++\n\t\t\t\t}\n\t\t\t\tif (combo.data.finisher.used === this.data.actions.VERFLARE.id) {\n\t\t\t\t\tthis.incorrectFinishers.verflare++\n\t\t\t\t}\n\t\t\t\tcombo.data.finisher.recommendation = <Fragment>\n\t\t\t\t\t<Trans id=\"rdm.meleecombos.recommendation.wrongfinisher.short\">Wrong finisher</Trans><sup>{this.assignOrGetFootnoteIndex(SuggestionKey.WRONG_FINISHER)}</sup>\n\t\t\t\t</Fragment>\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate outOfBalanceFinisher(lowerManaState: ManaState, higherManaState: ManaState) {\n\t\tif (!lowerManaState.procReady) {\n\t\t\t// no proc of the lower mana spell, use that finisher\n\t\t\treturn lowerManaState.actions.finisher\n\t\t}\n\n\t\tconst comboDelayResults = this.manaLossToDelayCombo(lowerManaState, higherManaState)\n\t\tif (!higherManaState.procReady) {\n\t\t\t// no proc of the higher mana spell, check accleration and potential out of balance to make recommendation\n\t\t\tconst finisherManaGain = (this.manaGauge.gaugeModifiers.get(higherManaState.actions.finisher.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(higherManaState.actions.finisher.id)?.black ?? 0)\n\t\t\tif (higherManaState.amount - lowerManaState.amount + finisherManaGain > MANA_DIFFERENCE_THRESHOLD) {\n\t\t\t\t// We will go out of balance if we use the finisher of the higher mana, check to see if delaying combo would have been better\n\t\t\t\tif (comboDelayResults !== null && comboDelayResults.manaLoss <= this.ignoreFinisherProcsManaThreshold) {\n\t\t\t\t\t// return null (delay combo) if below threshold\n\t\t\t\t\treturn comboDelayResults.finisher\n\t\t\t\t}\n\t\t\t\t// Going out of balance is worse than overwriting the lowerManaProc - recommend using the lowerMana finisher to stay in balance\n\t\t\t\treturn lowerManaState.actions.finisher\n\t\t\t}\n\n\t\t\t// Check to see if delaying combo would have been better\n\t\t\tif (comboDelayResults !== null && comboDelayResults.manaLoss <= this.ignoreFinisherProcsManaThreshold) {\n\t\t\t\t// return null (delay combo) if below threshold\n\t\t\t\treturn comboDelayResults.finisher\n\t\t\t}\n\t\t\t// If delaying finisher isn't worthwhile, but we won't go out of balance by using the higherManaFinisher, fishing for a 20% proc is better than overwriting the existing proc\n\t\t\treturn higherManaState.actions.finisher\n\t\t}\n\n\t\t// Both procs are up, check to see if delaying combo would have been better\n\t\tif (comboDelayResults !== null && comboDelayResults.manaLoss <= this.ignoreFinisherProcsManaThreshold) {\n\t\t\t// return null (delay combo) if below threshold\n\t\t\treturn comboDelayResults.finisher\n\t\t}\n\t\t// return both finishers (finisher doesn't matter) if above the threshold where the mana loss from delaying outweighs benefit of forced proc\n\t\treturn this.finishers\n\t}\n\n\tprivate inBalanceFinisher(firstManaState: ManaState, secondManaState: ManaState) {\n\n\t\tif (firstManaState.procReady && secondManaState.procReady) {\n\t\t\t// Both procs are up, check to see if delaying combo would have been better\n\t\t\tconst comboDelayResults = this.manaLossToDelayCombo(firstManaState, secondManaState)\n\t\t\t// Safeguard against null return if no valid delays were found\n\t\t\tif (comboDelayResults !== null && comboDelayResults.manaLoss <= this.ignoreFinisherProcsManaThreshold) {\n\t\t\t\t// return null (delay combo) if below threshold\n\t\t\t\treturn comboDelayResults.finisher\n\t\t\t}\n\t\t}\n\n\t\t// Delaying combo is not better, return finisher of proc that isn't available (fishing for 20% is better than overwriting a proc or delaying)\n\t\tif (!firstManaState.procReady && !secondManaState.procReady) {\n\t\t\t// Neither proc is up - return both finishers (finisher doesn't matter)\n\t\t\treturn this.finishers\n\t\t}\n\t\tif (!firstManaState.procReady) {\n\t\t\treturn firstManaState.actions.finisher\n\t\t}\n\t\tif (!secondManaState.procReady) {\n\t\t\treturn secondManaState.actions.finisher\n\t\t}\n\t\t// Both procs are up and it's not worthwhile to delay combo, return both finishers (finisher doesn't matter)\n\t\treturn this.finishers\n\t}\n\n\tprivate manaLossToDelayCombo(lowerManaState: ManaState, higherManaState: ManaState) {\n\t\tconst possibleDelays = []\n\n\t\tif (lowerManaState.procReady) {\n\t\t\t/* Case: lowerManaProc is available, \"clear\" the proc by casting Lower Proc + Higher Dualcast\n\t\t\t\tThis case is valid whether or not the higherManaProc exists\n\t\t\t\tOverwriting the higherManaProc with the 50% chance while dumping is no net loss of procs compared to not delaying */\n\t\t\t// Net benefit: +1 proc gained (lowerMana) for effective potency of +34.8 (8 Mana)\n\t\t\tlet newLowerMana = lowerManaState.amount + (this.manaGauge.gaugeModifiers.get(lowerManaState.actions.proc.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(lowerManaState.actions.proc.id)?.black ?? 0)\n\t\t\tlet newHigherMana = higherManaState.amount + (this.manaGauge.gaugeModifiers.get(higherManaState.actions.dualcast.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(higherManaState.actions.dualcast.id)?.black ?? 0)\n\n\t\t\t// Determine how much mana would be wasted to cap with this delay, then adjust post-delay mana totals to cap before further comparisons\n\t\t\tconst manaLoss = Math.max(newLowerMana - MANA_CAP, 0) + Math.max(newHigherMana - MANA_CAP, 0)\n\t\t\tnewLowerMana = Math.min(newLowerMana, MANA_CAP)\n\t\t\tnewHigherMana = Math.min(newHigherMana, MANA_CAP)\n\n\t\t\tif (newLowerMana < newHigherMana) {\n\t\t\t\t// The proc we just cleared is still the lower mana, valid clear option, push onto stack\n\t\t\t\tpossibleDelays.push({\n\t\t\t\t\tfinisher: [lowerManaState.actions.proc, higherManaState.actions.dualcast, lowerManaState.actions.finisher],\n\t\t\t\t\tmanaLoss: manaLoss,\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif (!higherManaState.procReady) {\n\t\t\t\t/* Case: lowerManaProc is available and higherManaProc is not, attempt to \"rebalance\" mana by casting lowerManaProc + lowerManaDualcast\n\t\t\t\t\tThis is an additional and separate case to just clearing and \"wasting\" the higherManaProc in the case of both procs being up\n\t\t\t\t\tand can result in less mana loss than the lowerProc -> higherDualcast dump of the above case (e.g. when starting at 80|100) */\n\t\t\t\t// Net benefit: +1 proc gained (higherMana) for effective potency of +34.8 (8 Mana)\n\t\t\t\tlet newLowerMana = lowerManaState.amount +\n\t\t\t\t\t((this.manaGauge.gaugeModifiers.get(lowerManaState.actions.proc.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(lowerManaState.actions.proc.id)?.black ?? 0)) +\n\t\t\t\t\t((this.manaGauge.gaugeModifiers.get(lowerManaState.actions.dualcast.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(lowerManaState.actions.dualcast.id)?.black ?? 0))\n\t\t\t\tlet newHigherMana = higherManaState.amount\n\n\t\t\t\t// Determine how much mana would be wasted to cap with this delay, then adjust post-delay mana totals to cap before further comparisons\n\t\t\t\tconst manaLoss = Math.max(newLowerMana - MANA_CAP, 0) + Math.max(newHigherMana - MANA_CAP, 0)\n\t\t\t\tnewLowerMana = Math.min(newLowerMana, MANA_CAP)\n\t\t\t\tnewHigherMana = Math.min(newHigherMana, MANA_CAP)\n\n\t\t\t\tif (newHigherMana < newLowerMana) {\n\t\t\t\t\t// Mana rebalancing resulted in the original higherMana becoming the lower total (guaranteed proc), valid option, push onto stack\n\t\t\t\t\tpossibleDelays.push({\n\t\t\t\t\t\tfinisher: [lowerManaState.actions.proc, lowerManaState.actions.dualcast, higherManaState.actions.finisher],\n\t\t\t\t\t\tmanaLoss: manaLoss,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// Verify that using the finisher of higherMana won't put us out of balance at the end\n\t\t\t\t\tconst finisherManaGain = (this.manaGauge.gaugeModifiers.get(higherManaState.actions.finisher.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(higherManaState.actions.finisher.id)?.black ?? 0)\n\t\t\t\t\tif (!((newHigherMana + finisherManaGain - newLowerMana) > MANA_DIFFERENCE_THRESHOLD)) {\n\t\t\t\t\t\t// This is a net gain - we can now fish for an additional proc of higherMana, push onto stack\n\t\t\t\t\t\tpossibleDelays.push({\n\t\t\t\t\t\t\tfinisher: [lowerManaState.actions.proc, lowerManaState.actions.dualcast, higherManaState.actions.finisher],\n\t\t\t\t\t\t\tmanaLoss: manaLoss,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// These cases should only be hit if lowerMana == higherMana (we were in balance at start of combo), to test benefits of delaying combo to imbalance mana\n\t\t\t// If lowerManaProc isn't available and lowerMana < higherMana, recommendation will always be the lowerManaActions.finisher\n\t\t\tif (higherManaState.procReady) { // eslint-disable-line no-lonely-if\n\t\t\t\tlet newLowerMana = lowerManaState.amount + ((this.manaGauge.gaugeModifiers.get(lowerManaState.actions.dualcast.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(lowerManaState.actions.dualcast.id)?.black ?? 0))\n\t\t\t\tlet newHigherMana = higherManaState.amount + ((this.manaGauge.gaugeModifiers.get(higherManaState.actions.proc.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(higherManaState.actions.proc.id)?.black ?? 0))\n\n\t\t\t\t// Determine how much mana would be wasted to cap with this delay, then adjust post-delay mana totals to cap before further comparisons\n\t\t\t\tconst manaLoss = Math.max(newLowerMana - MANA_CAP, 0) + Math.max(newHigherMana - MANA_CAP, 0)\n\t\t\t\tnewLowerMana = Math.min(newLowerMana, MANA_CAP)\n\t\t\t\tnewHigherMana = Math.min(newHigherMana, MANA_CAP)\n\n\t\t\t\tif (newHigherMana < newLowerMana) {\n\t\t\t\t\t// Mana rebalancing resulted in the original higherMana becoming the lower total (guaranteed proc), valid option, push onto stack\n\t\t\t\t\tpossibleDelays.push({\n\t\t\t\t\t\tfinisher: [higherManaState.actions.proc, lowerManaState.actions.dualcast, higherManaState.actions.finisher],\n\t\t\t\t\t\tmanaLoss: manaLoss,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Neither proc is up, check with using Jolt  + higherMana's dualcast spell to delay so that lowerMana will get guaranteed proc\n\t\t\t\tlet newLowerMana = lowerManaState.amount + (this.manaGauge.gaugeModifiers.get(this.data.actions.JOLT_II.id)?.white ?? 0)\n\t\t\t\tlet newHigherMana = higherManaState.amount + (this.manaGauge.gaugeModifiers.get(this.data.actions.JOLT_II.id)?.black ?? 0) + ((this.manaGauge.gaugeModifiers.get(higherManaState.actions.dualcast.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(higherManaState.actions.dualcast.id)?.black ?? 0))\n\t\t\t\tconst firstDelaySkill = this.data.actions.JOLT_II\n\n\t\t\t\t// Determine how much mana would be wasted to cap with this delay, then adjust post-delay mana totals to cap before further comparisons\n\t\t\t\tconst manaLoss = Math.max(newLowerMana - MANA_CAP, 0) + Math.max(newHigherMana - MANA_CAP, 0)\n\t\t\t\tnewLowerMana = Math.min(newLowerMana, MANA_CAP)\n\t\t\t\tnewHigherMana = Math.min(newHigherMana, MANA_CAP)\n\t\t\t\tif (newLowerMana < newHigherMana) {\n\t\t\t\t\t// Mana rebalancing resulted in the original higherMana becoming the lower total (guaranteed proc), valid option, push onto stack\n\t\t\t\t\tpossibleDelays.push({\n\t\t\t\t\t\tfinisher: [firstDelaySkill, lowerManaState.actions.dualcast, higherManaState.actions.finisher],\n\t\t\t\t\t\tmanaLoss: manaLoss,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// Check if using Jolt  + lowerMana's dualcast spell to delay so that higherMana will get guaranteed proc\n\t\t\t\t\tlet newLowerMana = lowerManaState.amount + (this.manaGauge.gaugeModifiers.get(this.data.actions.JOLT_II.id)?.white ?? 0) + ((this.manaGauge.gaugeModifiers.get(lowerManaState.actions.dualcast.id)?.white ?? 0) || (this.manaGauge.gaugeModifiers.get(lowerManaState.actions.dualcast.id)?.black ?? 0))\n\t\t\t\t\tlet newHigherMana = higherManaState.amount + (this.manaGauge.gaugeModifiers.get(this.data.actions.JOLT_II.id)?.black ?? 0)\n\t\t\t\t\tconst firstDelaySkill = this.data.actions.JOLT_II\n\n\t\t\t\t\t// Determine how much mana would be wasted to cap with this delay, then adjust post-delay mana totals to cap before further comparisons\n\t\t\t\t\tconst manaLoss = Math.max(newLowerMana - MANA_CAP, 0) + Math.max(newHigherMana - MANA_CAP, 0)\n\t\t\t\t\tnewLowerMana = Math.min(newLowerMana, MANA_CAP)\n\t\t\t\t\tnewHigherMana = Math.min(newHigherMana, MANA_CAP)\n\t\t\t\t\tif (newHigherMana < newLowerMana) {\n\t\t\t\t\t\t// Mana rebalancing resulted in the original higherMana becoming the lower total (guaranteed proc), valid option, push onto stack\n\t\t\t\t\t\tpossibleDelays.push({\n\t\t\t\t\t\t\tfinisher: [firstDelaySkill, lowerManaState.actions.dualcast, higherManaState.actions.finisher],\n\t\t\t\t\t\t\tmanaLoss: manaLoss,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// End cases for delaying combo to clear procs\n\t\t\t}\n\t\t}\n\n\t\tif (possibleDelays.length > 0) {\n\t\t\t// At least one valid case for delaying combo was found, return the most efficient (lowest manaLoss) for consideration\n\t\t\tpossibleDelays.sort((a, b) => {\n\t\t\t\tif (a.manaLoss > b.manaLoss) {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\n\t\t\t\tif (a.manaLoss < b.manaLoss) {\n\t\t\t\t\treturn -1\n\t\t\t\t}\n\n\t\t\t\treturn 0\n\t\t\t})\n\n\t\t\treturn possibleDelays[0]\n\t\t}\n\n\t\t// No valid case for delaying combo was found\n\t\treturn null\n\t}\n\n\tprivate assignOrGetFootnoteIndex(key: SuggestionKey) {\n\t\tif (!this.footnoteIndexes.includes(key)) {\n\t\t\tthis.footnoteIndexes.push(key)\n\t\t}\n\t\treturn this.footnoteIndexes.indexOf(key) + 1\n\t}\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"gutter\":\"20px\",\"dualStatistic\":\"DualStatistic-module_dualStatistic__2Fk80\",\"titleWrapper\":\"DualStatistic-module_titleWrapper__1P8a2\",\"icon\":\"DualStatistic-module_icon__3hIHe\",\"title\":\"DualStatistic-module_title__2wyDX\",\"value\":\"DualStatistic-module_value__2ZGDv\"};","import {AbstractStatistic, AbstractStatisticOptions} from 'parser/core/modules/Statistics/AbstractStatistic'\nimport React from 'react'\nimport styles from './DualStatistic.module.css'\n\nexport class DualStatistic extends AbstractStatistic {\n\tprivate label: React.ReactNode\n\tprivate title: React.ReactNode\n\tprivate title2: React.ReactNode\n\tprivate icon?: string\n\tprivate icon2?: string\n\tprivate value: React.ReactNode\n\tprivate value2: React.ReactNode\n\n\tconstructor(opts: {\n\t\tlabel: React.ReactNode,\n\t\ttitle: React.ReactNode,\n\t\ttitle2: React.ReactNode,\n\t\ticon?: string,\n\t\ticon2?: string,\n\t\tvalue: React.ReactNode,\n\t\tvalue2: React.ReactNode,\n\t} & AbstractStatisticOptions) {\n\t// \tsuper({\n\t// \t\t...opts,\n\t// \t\twidth: opts.width || 0 < 2? 2 : opts.width,\n\t// })\n\t\tsuper(opts)\n\n\t\tthis.label = opts.label\n\t\tthis.title = opts.title\n\t\tthis.title2 = opts.title2\n\t\tthis.icon = opts.icon\n\t\tthis.icon2 = opts.icon2\n\t\tthis.value = opts.value\n\t\tthis.value2 = opts.value2\n\t}\n\n\tContent = () => (\n\t\t<div className={styles.dualStatistic}>\n\t\t\t{this.label}\n\t\t\t<div className={styles.titleWrapper}>\n\t\t\t\t{this.icon && <img src={this.icon} className={styles.icon}/>}\n\t\t\t\t<div className={styles.title}>{this.title}</div>\n\t\t\t\t<div className={styles.value}>{this.value}</div>\n\t\t\t</div>\n\t\t\t<div className={styles.titleWrapper}>\n\t\t\t\t{this.icon && <img src={this.icon2} className={styles.icon}/>}\n\t\t\t\t<div className={styles.title}>{this.title2}</div>\n\t\t\t\t<div className={styles.value}>{this.value2}</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {JOBS} from 'data/JOBS'\nimport {Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport {Statistics} from 'parser/core/modules/Statistics'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport {DualStatistic} from 'parser/jobs/rdm/statistics/DualStatistic'\nimport React, {Fragment} from 'react'\nimport {isSuccessfulHit} from 'utilities'\n\ninterface GaugeModifier {\n\twhite: number\n\tblack: number\n}\n\nexport const MANA_DIFFERENCE_THRESHOLD = 30\nexport const MANA_CAP = 100\n\nexport class ManaGauge extends CoreGauge {\n\tstatic override title = t('rdm.gauge.title')`Mana Gauge Usage`\n\n\t@dependency private suggestions!: Suggestions\n\t@dependency private statistics!: Statistics\n\n\tprivate whiteManaGauge = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"rdm.gauge.resource.whitemana\">White Mana</Trans>,\n\t\t\tcolor: JOBS.WHITE_MAGE.colour,\n\t\t},\n\t\tmaximum: 100,\n\t\tminimum: 0,\n\t}))\n\tprivate blackManaGauge = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"rdm.gauge.resource.blackmana\">Black Mana</Trans>,\n\t\t\tcolor: JOBS.BLACK_MAGE.colour,\n\t\t},\n\t\tmaximum: 100,\n\t\tminimum: 0,\n\t}))\n\tpublic gaugeModifiers = new Map<number, GaugeModifier>([\n\t\t[this.data.actions.VERAERO.id, {white: 6, black: 0}],\n\t\t[this.data.actions.VERAERO_II.id, {white: 7, black: 0}],\n\t\t[this.data.actions.VERAERO_III.id, {white: 6, black: 0}],\n\t\t[this.data.actions.VERSTONE.id, {white: 5, black: 0}],\n\t\t[this.data.actions.VERHOLY.id, {white: 11, black: 0}],\n\t\t[this.data.actions.VERTHUNDER.id, {white: 0, black: 6}],\n\t\t[this.data.actions.VERTHUNDER_II.id, {white: 0, black: 7}],\n\t\t[this.data.actions.VERTHUNDER_III.id, {white: 0, black: 6}],\n\t\t[this.data.actions.VERFIRE.id, {white: 0, black: 5}],\n\t\t[this.data.actions.VERFLARE.id, {white: 0, black: 11}],\n\t\t[this.data.actions.JOLT.id, {white: 2, black: 2}],\n\t\t[this.data.actions.JOLT_II.id, {white: 2, black: 2}],\n\t\t[this.data.actions.IMPACT.id, {white: 3, black: 3}],\n\t\t[this.data.actions.SCORCH.id, {white: 4, black: 4}],\n\t\t[this.data.actions.RESOLUTION.id, {white: 4, black: 4}],\n\t])\n\tpublic spenderModifiers = new Map<number, GaugeModifier>([\n\t\t[this.data.actions.ENCHANTED_REPRISE.id, {white: -5, black: -5}],\n\t\t[this.data.actions.ENCHANTED_MOULINET.id, {white: -20, black: -20}],\n\t\t[this.data.actions.ENCHANTED_RIPOSTE.id, {white: -20, black: -20}],\n\t\t[this.data.actions.ENCHANTED_ZWERCHHAU.id, {white: -15, black: -15}],\n\t\t[this.data.actions.ENCHANTED_REDOUBLEMENT.id, {white: -15, black: -15}],\n\t])\n\tprivate severityWastedMana = {\n\t\t1: SEVERITY.MINOR,\n\t\t20: SEVERITY.MEDIUM,\n\t\t80: SEVERITY.MAJOR,\n\t}\n\tprivate severityLostMana = {\n\t\t1: SEVERITY.MINOR,\n\t\t20: SEVERITY.MEDIUM,\n\t\t80: SEVERITY.MAJOR,\n\t}\n\n\tprivate readonly manaLostDivisor = 2\n\tprivate readonly manaficationManaGain = 50\n\n\tmanaStatistics = {\n\t\twhite: {\n\t\t\tmanaficationLoss: 0,\n\t\t\timbalanceLoss: 0,\n\t\t\tinvulnLoss: 0,\n\t\t},\n\t\tblack: {\n\t\t\tmanaficationLoss: 0,\n\t\t\timbalanceLoss: 0,\n\t\t\tinvulnLoss: 0,\n\t\t},\n\t}\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('damage')\n\t\t\t\t.source(this.parser.actor.id),\n\t\t\tthis.onGaugeModifying\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('action')\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.action(oneOf(Array.from(this.spenderModifiers.keys()))),\n\t\t\tthis.onGaugeSpender\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('action')\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.action(this.data.actions.MANAFICATION.id),\n\t\t\tthis.onManafication\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onGaugeModifying(event: Events['damage']) {\n\t\tif (event.cause.type !== 'action') {\n\t\t\treturn\n\t\t}\n\t\tconst modifier = this.gaugeModifiers.get(event.cause.action)\n\n\t\tif (modifier == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst amount = modifier\n\t\tconst penalized = this.isOutOfBalance()\n\t\tconst whiteModified = penalized.white ? Math.floor(amount.white/ this.manaLostDivisor) : amount.white\n\t\tconst blackModified = penalized.black ? Math.floor(amount.black/ this.manaLostDivisor) : amount.black\n\n\t\tif (!isSuccessfulHit(event)) {\n\t\t\t//Then we lost this mana, add to statistics and move along.\n\t\t\tthis.manaStatistics.white.invulnLoss += whiteModified\n\t\t\tthis.manaStatistics.black.invulnLoss += blackModified\n\t\t\treturn\n\t\t}\n\n\t\tthis.whiteManaGauge.modify(whiteModified)\n\t\tthis.blackManaGauge.modify(blackModified)\n\t\t//Statistics Gathering\n\t\tthis.manaStatistics.white.imbalanceLoss += amount.white - whiteModified\n\t\tthis.manaStatistics.black.imbalanceLoss += amount.black - blackModified\n\t}\n\n\tprivate onManafication() {\n\t\tlet whiteModifier = this.getWhiteMana() + this.manaficationManaGain\n\t\tlet blackModifier = this.getBlackMana() + this.manaficationManaGain\n\n\t\t//Now calculate and store overcap if any.  This way we can still utilize the Overcap\n\t\t//From core, but track this loss separately.\n\t\tif (whiteModifier > MANA_CAP) \t\t{\n\t\t\tthis.manaStatistics.white.manaficationLoss = whiteModifier - MANA_CAP\n\t\t\twhiteModifier = MANA_CAP\n\t\t}\n\n\t\tif (blackModifier > MANA_CAP) {\n\t\t\tthis.manaStatistics.black.manaficationLoss = blackModifier - MANA_CAP\n\t\t\tblackModifier = MANA_CAP\n\t\t}\n\n\t\tthis.whiteManaGauge.set(whiteModifier)\n\t\tthis.blackManaGauge.set(blackModifier)\n\t}\n\n\tprivate onGaugeSpender(event: Events['action']) {\n\t\tconst modifier =  this.spenderModifiers.get(event.action)\n\n\t\tif (modifier == null) {\n\t\t\treturn\n\t\t}\n\t\tconst amount = modifier\n\n\t\tthis.whiteManaGauge.modify(amount.white)\n\t\tthis.blackManaGauge.modify(amount.black)\n\t}\n\n\t//Returns which Mana should be penalized, white, black, or neither\n\tprivate isOutOfBalance() : {white: boolean, black: boolean} {\n\t\tconst whiteMana = this.getWhiteMana()\n\t\tconst blackMana = this.getBlackMana()\n\n\t\tif (whiteMana && (blackMana - whiteMana >  MANA_DIFFERENCE_THRESHOLD)) {\n\t\t\t//If we have more than 30 Black Mana over White, our White gains are halved.\n\t\t\treturn {white: true, black: false}\n\t\t}\n\n\t\tif (blackMana && (whiteMana - blackMana>  MANA_DIFFERENCE_THRESHOLD)) {\n\t\t\t//If we have more than 30 White Mana over Black, our Black gains are halved\n\t\t\treturn {white: false, black: true}\n\t\t}\n\n\t\treturn {white: false, black: false}\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.whiteManaGauge.overCap > this.blackManaGauge.overCap ? this.data.actions.VERHOLY.icon : this.data.actions.VERFLARE.icon,\n\t\t\tcontent: <Fragment>\n\t\t\t\t<Trans id=\"rdm.gauge.suggestions.mana-wasted-content\">Ensure you don't overcap your Mana before a combo; overcapping Mana indicates your balance was off, and you potentially lost out on Enchanted Combo damage.</Trans>\n\t\t\t</Fragment>,\n\t\t\ttiers:  this.severityWastedMana,\n\t\t\tvalue:  this.whiteManaGauge.overCap + this.blackManaGauge.overCap,\n\t\t\twhy: <Fragment>\n\t\t\t\t<Trans id=\"rdm.gauge.suggestions.mana-wasted-why\">You lost { this.whiteManaGauge.overCap} White Mana and {this.blackManaGauge.overCap} Black Mana due to capped Gauge resources</Trans>\n\t\t\t</Fragment>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.manaStatistics.white.imbalanceLoss > this.manaStatistics.black.imbalanceLoss ? this.data.actions.VERHOLY.icon : this.data.actions.VERFLARE.icon,\n\t\t\tcontent: <Fragment>\n\t\t\t\t<Trans id=\"rdm.gauge.suggestions.mana-lost-content\">Ensure you don't allow a difference of more than 30 betwen mana types. You lost Mana due to Imbalance which reduces your overall mana gain and potentially costs you one or more Enchanted Combos.</Trans>\n\t\t\t</Fragment>,\n\t\t\ttiers:  this.severityLostMana,\n\t\t\tvalue:  this.manaStatistics.white.imbalanceLoss + this.manaStatistics.black.imbalanceLoss,\n\t\t\twhy: <Fragment>\n\t\t\t\t<Trans id=\"rdm.gauge.suggestions.mana-lost-why\">You lost { this.manaStatistics.white.imbalanceLoss} White Mana and { this.manaStatistics.black.imbalanceLoss} Black Mana due to overage of black Mana</Trans>\n\t\t\t</Fragment>,\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.manaStatistics.white.invulnLoss > this.manaStatistics.black.invulnLoss ? this.data.actions.VERHOLY.icon : this.data.actions.VERFLARE.icon,\n\t\t\tcontent: <Fragment>\n\t\t\t\t<Trans id=\"rdm.gauge.suggestions.mana-invuln-content\">Ensure you don't target a boss that you cannot damage with your damaging spells.  Spells that do no damage due to an invulnerable target or due to missing result in no mana gained, which potentially costs you one or more Enchanted Combos.</Trans>\n\t\t\t</Fragment>,\n\t\t\ttiers:  this.severityLostMana,\n\t\t\tvalue:  this.manaStatistics.white.invulnLoss + this.manaStatistics.black.invulnLoss,\n\t\t\twhy: <Fragment>\n\t\t\t\t<Trans id=\"rdm.gauge.suggestions.mana-invuln-why\">You lost { this.manaStatistics.white.invulnLoss} White Mana and { this.manaStatistics.black.invulnLoss} Black Mana due to misses or spells that targeted an invulnerable target</Trans>\n\t\t\t</Fragment>,\n\t\t}))\n\n\t\tthis.statistics.add(new DualStatistic({\n\t\t\tlabel: <Trans id=\"rdm.gauge.title-mana-lost-to-manafication\">Manafication Loss:</Trans>,\n\t\t\ttitle: <Trans id=\"rdm.gauge.white-mana-lost-to-manafication\">White</Trans>,\n\t\t\ttitle2: <Trans id=\"rdm.gauge.black-mana-lost-to-manafication\">Black</Trans>,\n\t\t\ticon: this.data.actions.VERHOLY.icon,\n\t\t\ticon2: this.data.actions.VERFLARE.icon,\n\t\t\tvalue:  this.manaStatistics.white.manaficationLoss,\n\t\t\tvalue2:  this.manaStatistics.black.manaficationLoss,\n\t\t\tinfo: (\n\t\t\t\t<Trans id=\"rdm.gauge.white-mana-lost-to-manafication-statistics\">\n\t\t\t\t\tIt is ok to lose some mana to manafication over the course of a fight, you should however strive to keep this number as low as possible.\n\t\t\t\t</Trans>\n\t\t\t),\n\t\t}))\n\t}\n\n\tpublic getWhiteMana() {\n\t\treturn  this.whiteManaGauge.value\n\t}\n\n\tpublic getWhiteManaAt(timestamp: number) {\n\t\treturn  this.whiteManaGauge.getValueAt(timestamp)\n\t}\n\n\tpublic getBlackMana() {\n\t\treturn  this.blackManaGauge.value\n\t}\n\n\tpublic getBlackManaAt(timestamp: number) {\n\t\treturn  this.blackManaGauge.getValueAt(timestamp)\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans} from '@lingui/react'\nimport {JOBS} from 'data/JOBS'\nimport {Event, Events} from 'event'\nimport {filter, oneOf} from 'parser/core/filter'\nimport {dependency} from 'parser/core/Injectable'\nimport {CounterGauge, Gauge as CoreGauge} from 'parser/core/modules/Gauge'\nimport {Statistics} from 'parser/core/modules/Statistics'\nimport Suggestions, {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport {ManaGauge} from 'parser/jobs/rdm/modules/ManaGauge'\nimport {DualStatistic} from 'parser/jobs/rdm/statistics/DualStatistic'\nimport React, {Fragment} from 'react'\n\ninterface ManaStackGaugeModifier {\n\tmanaStack: number\n}\ninterface GaugeBreaker {\n\taction: number,\n\ttimestamp: number,\n\tmanaStacksLost: number,\n}\nexport const MINIMUM = 0\nexport const MAXIMUM = 3\n\nexport class ManaStackGauge extends CoreGauge {\n\tstatic override handle = 'manaStackGauge'\n\tstatic override title = t('rdm.manaStackGauge.title')`Mana Stack Gauge Usage`\n\tstatic override debug = false\n\n\t@dependency private suggestions!: Suggestions\n\t@dependency private statistics!: Statistics\n\t@dependency private manaGauge!: ManaGauge\n\n\tprivate manaStackGauge = this.add(new CounterGauge({\n\t\tgraph: {\n\t\t\tlabel: <Trans id=\"rdm.manaStackGauge.resource.manaStacks\">Mana Stacks</Trans>,\n\t\t\tcolor: JOBS.RED_MAGE.colour,\n\t\t},\n\t\tmaximum: MAXIMUM,\n\t\tminimum: MINIMUM,\n\t}))\n\tpublic gaugeModifiers = new Map<number, ManaStackGaugeModifier>([\n\t\t[this.data.actions.ENCHANTED_REPRISE.id, {manaStack: 0}],\n\t\t[this.data.actions.ENCHANTED_MOULINET.id, {manaStack: 1}],\n\t\t[this.data.actions.ENCHANTED_RIPOSTE.id, {manaStack: 1}],\n\t\t[this.data.actions.ENCHANTED_ZWERCHHAU.id, {manaStack: 1}],\n\t\t[this.data.actions.ENCHANTED_REDOUBLEMENT.id, {manaStack: 1}],\n\t])\n\tpublic spenderModifiers = new Map<number, ManaStackGaugeModifier>([\n\t\t[this.data.actions.VERHOLY.id, {manaStack: -3}],\n\t\t[this.data.actions.VERFLARE.id, {manaStack: -3}],\n\t\t[this.data.actions.SCORCH.id, {manaStack: 0}],\n\t\t[this.data.actions.RESOLUTION.id, {manaStack: 0}],\n\t])\n\tpublic gaugeBreakers: number[] = [\n\t\tthis.data.actions.VERAERO.id,\n\t\tthis.data.actions.VERAERO_II.id,\n\t\tthis.data.actions.VERAERO_III.id,\n\t\tthis.data.actions.VERSTONE.id,\n\t\tthis.data.actions.VERTHUNDER.id,\n\t\tthis.data.actions.VERTHUNDER_II.id,\n\t\tthis.data.actions.VERTHUNDER_III.id,\n\t\tthis.data.actions.VERFIRE.id,\n\t\tthis.data.actions.JOLT.id,\n\t\tthis.data.actions.JOLT_II.id,\n\t\tthis.data.actions.IMPACT.id,\n\t]\n\tgaugeBreak: GaugeBreaker[] = []\n\t//Any loss is a major severity\n\tseverity = {\n\t\t1: SEVERITY.MAJOR,\n\t}\n\tmanaStatistics = {\n\t\twhite: {\n\t\t\tovercapLoss: 0,\n\t\t},\n\t\tblack: {\n\t\t\tovercapLoss: 0,\n\t\t},\n\t}\n\n\toverride initialise() {\n\t\tsuper.initialise()\n\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('action')\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.action(oneOf(Array.from(this.gaugeModifiers.keys()))),\n\t\t\tthis.onGaugeModifying\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('action')\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.action(oneOf(this.gaugeBreakers)),\n\t\t\tthis.onGaugeModifying\n\t\t)\n\t\tthis.addEventHook(\n\t\t\tfilter<Event>()\n\t\t\t\t.type('action')\n\t\t\t\t.source(this.parser.actor.id)\n\t\t\t\t.action(oneOf(Array.from(this.spenderModifiers.keys()))),\n\t\t\tthis.onGaugeSpender\n\t\t)\n\t\tthis.addEventHook('complete', this.onComplete)\n\t}\n\n\tprivate onGaugeModifying(event: Events['action']) {\n\t\t//Always check it we should break\n\t\tif (this.shouldGaugeBreak(event)) {\n\t\t\tthis.onGaugeBreak(event)\n\t\t\t//No further modifications to the gauge if this skill broke it.\n\t\t\treturn\n\t\t}\n\n\t\tconst modifier = this.gaugeModifiers.get(event.action)\n\n\t\tif (modifier == null) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.manaStackGauge.capped) {\n\t\t\tconst manaSpender = this.manaGauge.spenderModifiers.get(event.action)\n\t\t\tthis.debug(`manaSpender is ${manaSpender} white mana value of ${manaSpender?.white} and black mana value of ${manaSpender?.black}`)\n\t\t\tthis.debug(`Time the Overcap happened ${this.parser.formatEpochTimestamp(event.timestamp)}`)\n\t\t\tif (manaSpender != null) {\n\t\t\t\tthis.manaStatistics.white.overcapLoss += Math.abs(manaSpender.white)\n\t\t\t\tthis.manaStatistics.black.overcapLoss += Math.abs(manaSpender.black)\n\t\t\t}\n\t\t}\n\n\t\tthis.manaStackGauge.modify(modifier.manaStack)\n\t}\n\n\tprivate onGaugeSpender(event: Events['action']) {\n\t\tconst modifier = this.spenderModifiers.get(event.action)\n\n\t\tif (modifier == null) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.manaStackGauge.modify(modifier.manaStack)\n\t}\n\n\tprivate onGaugeBreak(event: Events['action']) {\n\t\tconst breaker = {} as GaugeBreaker\n\t\tbreaker.action = event.action\n\t\tbreaker.timestamp = event.timestamp\n\t\tbreaker.manaStacksLost = this.manaStackGauge.value\n\t\tthis.gaugeBreak.push(breaker)\n\t\tthis.manaStackGauge.reset()\n\t}\n\n\tprivate shouldGaugeBreak(event: Events['action']) {\n\t\tthis.debug(`manaStackGauge is ${this.manaStackGauge.value} and the action is ${this.data.getAction(event.action)?.name} with id ${event.action} and it's included? ${this.gaugeBreakers.includes(event.action)}`)\n\t\treturn this.gaugeBreakers.includes(event.action) && this.manaStackGauge.value > MINIMUM\n\t}\n\n\tprivate onComplete() {\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.RESOLUTION.icon,\n\t\t\tcontent: <Fragment>\n\t\t\t\t<Trans id=\"rdm.manaStackGauge.suggestions.manaStack-wasted-content\">Ensure you don't overcap your Mana Stacks before using your finisher combo; overcapping Mana Stacks means you used more than 3 enchanted skills in a row.</Trans>\n\t\t\t</Fragment>,\n\t\t\ttiers:  this.severity,\n\t\t\tvalue:  this.manaStackGauge.overCap,\n\t\t\twhy: <Fragment>\n\t\t\t\t<Trans id=\"rdm.manaStackGauge.suggestions.manaStack-wasted-why\">You lost { this.manaStackGauge.overCap} Mana Stacks due to capped Gauge resources</Trans>\n\t\t\t</Fragment>,\n\t\t}))\n\n\t\tconst manaStacksLost = this.gaugeBreak.reduce((sum, current) => sum + current.manaStacksLost, 0)\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: this.data.actions.RESOLUTION.icon,\n\t\t\tcontent: <Fragment>\n\t\t\t\t<Trans id=\"rdm.manaStackGauge.suggestions.manaStack-loss-content\">Ensure that you don't use a non Enchanted GCD when you have Mana Stacks, otherwise you lose them all</Trans>\n\t\t\t</Fragment>,\n\t\t\ttiers:  this.severity,\n\t\t\tvalue:  manaStacksLost,\n\t\t\twhy: <Fragment>\n\t\t\t\t<Trans id=\"rdm.manaStackGauge.suggestions.manaStack-loss-why\">You lost { manaStacksLost} Mana Stacks due to using a non Enchanted GCD</Trans>\n\t\t\t</Fragment>,\n\t\t}))\n\n\t\tthis.statistics.add(new DualStatistic({\n\t\t\tlabel: <Trans id=\"rdm.manaStackGauge.title-mana-lost-to-overcap\">Mana Stack Overcap Loss:</Trans>,\n\t\t\ttitle: <Trans id=\"rdm.manaStackGauge.white-mana-lost-to-overcap\">White</Trans>,\n\t\t\ttitle2: <Trans id=\"rdm.manaStackGauge.black-mana-lost-to-overcap\">Black</Trans>,\n\t\t\ticon: this.data.actions.VERHOLY.icon,\n\t\t\ticon2: this.data.actions.VERFLARE.icon,\n\t\t\tvalue:  this.manaStatistics.white.overcapLoss,\n\t\t\tvalue2:  this.manaStatistics.black.overcapLoss,\n\t\t\tinfo: (\n\t\t\t\t<Trans id=\"rdm.manaStackGauge.white-mana-lost-to-overcap-statistics\">\n\t\t\t\t\tYou should never overcap your Mana Stacks\n\t\t\t\t</Trans>\n\t\t\t),\n\t\t}))\n\t}\n\n\tpublic getManaStacks() {\n\t\treturn this.manaStackGauge.value\n\t}\n\n\tpublic getManaStacksAt(timestamp: number) {\n\t\treturn this.manaStackGauge.getValueAt(timestamp)\n\t}\n}\n","import {t} from '@lingui/macro'\nimport {Trans, Plural} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Events} from 'event'\nimport {Procs as CoreProcs} from 'parser/core/modules/Procs'\nimport {TieredSuggestion, SEVERITY} from 'parser/core/modules/Suggestions'\nimport React, {Fragment} from 'react'\n\nconst SEVERITY_OVERWRITTEN_PROCS = {\n\t1: SEVERITY.MINOR,\n\t15: SEVERITY.MEDIUM,\n}\n\nconst SEVERITY_INVULN_PROCS = {\n\t1: SEVERITY.MINOR,\n\t2: SEVERITY.MEDIUM,\n\t3: SEVERITY.MAJOR,\n}\n\nconst SEVERITY_MISSED_PROCS = {\n\t1: SEVERITY.MINOR,\n\t2: SEVERITY.MEDIUM,\n\t7: SEVERITY.MAJOR,\n}\n\nexport class Procs extends CoreProcs {\n\tstatic override title = t('rdm.procs.title')`Proc Issues`\n\n\t/**\n\t * Procs that a RDM gains over a fight caused by the RDM themselves\n\t */\n\ttrackedProcs = [\n\t\t{\n\t\t\tprocStatus: this.data.statuses.VERSTONE_READY,\n\t\t\tconsumeActions: [this.data.actions.VERSTONE],\n\t\t},\n\t\t{\n\t\t\tprocStatus: this.data.statuses.VERFIRE_READY,\n\t\t\tconsumeActions: [this.data.actions.VERFIRE],\n\t\t},\n\t]\n\n\tprivate getMissedProcContent(missedFire: number, missedStone: number) {\n\t\tif (missedFire > 0 && missedStone > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.missed.content\">\n\t\t\t\tTry to use <DataLink action=\"VERFIRE\" /> whenever you have <DataLink status=\"VERFIRE_READY\"/> or <DataLink action=\"VERSTONE\" /> whenever you have <DataLink status=\"VERSTONE_READY\"/> to avoid losing out on mana gains.\n\t\t\t</Trans>\n\t\t}\n\t\tif (missedFire > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.missed-fire.content\">\n\t\t\t\tTry to use <DataLink action=\"VERFIRE\" /> whenever you have <DataLink status=\"VERFIRE_READY\"/> to avoid losing out on mana gains.\n\t\t\t</Trans>\n\t\t}\n\t\treturn <Trans id=\"rdm.procs.suggestions.missed-stone.content\">\n\t\t\tTry to use <DataLink action=\"VERSTONE\" /> whenever you have <DataLink status=\"VERSTONE_READY\"/> to avoid losing out on mana gains.\n\t\t</Trans>\n\t}\n\n\tprivate getMissedProcWhy(missedFire: number, missedStone: number) {\n\t\tif (missedFire > 0 && missedStone > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.missed.why\">\n\t\t\t\tYou missed <Plural value={missedFire} one=\"# Verfire proc\" other=\"# Verfire procs\" /> and <Plural value={missedStone} one=\"# Verstone proc\" other=\"# Verstone procs\" />.\n\t\t\t</Trans>\n\t\t}\n\t\tif (missedFire > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.missed-fire.why\">\n\t\t\t\tYou missed <Plural value={missedFire} one=\"# Verfire proc\" other=\"# Verfire procs\" />.\n\t\t\t</Trans>\n\t\t}\n\t\treturn <Trans id=\"rdm.procs.suggestions.missed-stone.why\">\n\t\t\tYou missed <Plural value={missedStone} one=\"# Verstone proc\" other=\"# Verstone procs\" />.\n\t\t</Trans>\n\t}\n\n\tprivate getOverwrittenProcContent(overWrittenFire: number, overWrittenStone: number) {\n\t\tif (overWrittenFire > 0 && overWrittenStone > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.overwritten.content\">\n\t\t\t\tDon't cast <DataLink action=\"VERTHUNDER_III\"/> when you have <DataLink status=\"VERFIRE_READY\"/> or <DataLink action=\"VERAERO_III\"/> when you have <DataLink status=\"VERSTONE_READY\"/>.\n\t\t\t</Trans>\n\t\t}\n\t\tif (overWrittenFire > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.overwritten-fire.content\">\n\t\t\t\tDon't cast <DataLink action=\"VERTHUNDER_III\" /> when you have <DataLink status=\"VERFIRE_READY\"/>.\n\t\t\t</Trans>\n\t\t}\n\t\treturn <Trans id=\"rdm.procs.suggestions.overwritten-stone.content\">\n\t\t\tDon't cast <DataLink action=\"VERAERO_III\" /> when you have <DataLink status=\"VERSTONE_READY\"/>.\n\t\t</Trans>\n\t}\n\n\tprivate getOverwrittenProcWhy(overWrittenFire: number, overWrittenStone: number) {\n\t\tif (overWrittenFire > 0 && overWrittenStone > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.overwritten.why\">\n\t\t\t\t<Plural value={overWrittenFire} one=\"# Verfire proc\" other=\"# Verfire procs\" /> and <Plural value={overWrittenStone} one=\"# Verstone proc\" other=\"# Verstone procs\" /> were lost due to being overwritten.\n\t\t\t</Trans>\n\t\t}\n\t\tif (overWrittenFire > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.overwritten-fire.why\">\n\t\t\t\t<Plural value={overWrittenFire} one=\"# Verfire proc was\" other=\"# Verfire procs were\" /> lost due to being overwritten.\n\t\t\t</Trans>\n\t\t}\n\t\treturn <Trans id=\"rdm.procs.suggestions.overwritten-stone.why\">\n\t\t\t<Plural value={overWrittenStone} one=\"# Verstone proc was\" other=\"# Verstone procs were\" /> lost due to being overwritten.\n\t\t</Trans>\n\t}\n\n\tprivate getInvulnProcContent(invulnFire: number, invulnStone: number) {\n\t\tif (invulnFire > 0 && invulnStone > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.invuln.content\">\n\t\t\t\tTry not to use <DataLink action=\"VERFIRE\"/> and <DataLink action=\"VERSTONE\"/> while the boss is invulnerable.\n\t\t\t</Trans>\n\t\t}\n\t\tif (invulnFire > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.invuln-fire.content\">\n\t\t\t\tTry not to use <DataLink action=\"VERFIRE\"/> while the boss is invulnerable.\n\t\t\t</Trans>\n\t\t}\n\t\treturn <Trans id=\"rdm.procs.suggestions.invuln-stone.content\">\n\t\t\tTry not to use <DataLink action=\"VERSTONE\"/> while the boss is invulnerable.\n\t\t</Trans>\n\t}\n\n\tprivate getInvulnProcWhy(invulnFire: number, invulnStone: number) {\n\t\tif (invulnFire > 0 && invulnStone > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.invuln.why\">\n\t\t\t\tYou used <Plural value={invulnFire} one=\"# Verfire proc\" other=\"# Verfire procs\" /> and <Plural value={invulnStone} one=\"# Verstone proc\" other=\"# Verstone procs\" /> on an invulnerable boss.\n\t\t\t</Trans>\n\t\t}\n\t\tif (invulnFire > 0) {\n\t\t\treturn <Trans id=\"rdm.procs.suggestions.invuln-fire.why\">\n\t\t\t\tYou used <Plural value={invulnFire} one=\"# Verfire proc\" other=\"# Verfire procs\" /> on an invulnerable boss.\n\t\t\t</Trans>\n\t\t}\n\t\treturn <Trans id=\"rdm.procs.suggestions.invuln-stone.why\">\n\t\t\tYou used <Plural value={invulnStone} one=\"# Verstone proc\" other=\"# Verstone procs\" /> on an invulnerable boss.\n\t\t</Trans>\n\t}\n\n\tprotected override addJobSpecificSuggestions() {\n\t\tconst missedFire = this.getDropCountForStatus(this.data.statuses.VERFIRE_READY.id)\n\t\tconst invulnFire = this.getInvulnCountForStatus(this.data.statuses.VERFIRE_READY.id)\n\t\tconst overWrittenFire = this.getOverwriteCountForStatus(this.data.statuses.VERFIRE_READY.id)\n\t\tconst missedStone = this.getDropCountForStatus(this.data.statuses.VERSTONE_READY.id)\n\t\tconst invulnStone = this.getInvulnCountForStatus(this.data.statuses.VERSTONE_READY.id)\n\t\tconst overWrittenStone = this.getOverwriteCountForStatus(this.data.statuses.VERSTONE_READY.id)\n\n\t\t//Icons always default to the White Mana spell if black/jolt spells don't have more bad items.\n\t\t//Fire/Stone are identical\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: missedFire > missedStone ? this.data.actions.VERFIRE.icon : this.data.actions.VERSTONE.icon,\n\t\t\tcontent: this.getMissedProcContent(missedFire, missedStone),\n\t\t\ttiers: SEVERITY_MISSED_PROCS,\n\t\t\tvalue: missedFire + missedStone,\n\t\t\twhy: this.getMissedProcWhy(missedFire, missedStone),\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: overWrittenFire > overWrittenStone ? this.data.actions.VERFIRE.icon : this.data.actions.VERSTONE.icon,\n\t\t\tcontent: this.getOverwrittenProcContent(overWrittenFire, overWrittenStone),\n\t\t\ttiers: SEVERITY_OVERWRITTEN_PROCS,\n\t\t\tvalue: overWrittenFire + overWrittenStone,\n\t\t\twhy: this.getOverwrittenProcWhy(overWrittenFire, overWrittenStone),\n\t\t}))\n\n\t\tthis.suggestions.add(new TieredSuggestion({\n\t\t\ticon: invulnFire > invulnStone ? this.data.actions.VERFIRE.icon : this.data.actions.VERSTONE.icon,\n\t\t\tcontent: this.getInvulnProcContent(invulnFire, invulnStone),\n\t\t\ttiers: SEVERITY_INVULN_PROCS,\n\t\t\tvalue: invulnFire + invulnStone,\n\t\t\twhy: this.getInvulnProcWhy(invulnFire, invulnStone),\n\t\t}))\n\t}\n\n\toverride output() {\n\t\tconst allInvulns = this.getInvulnsForStatus(this.data.statuses.VERFIRE_READY.id).concat(this.getInvulnsForStatus(this.data.statuses.VERSTONE_READY.id)).sort((a, b) => a.timestamp - b.timestamp)\n\t\tif (allInvulns.length === 0) { return }\n\n\t\t//Currently we only care about Invuln points in time, this has been requested quite often in The Balance from RDMs looking over their logs\n\t\treturn <Fragment>\n\t\t\t<Trans id=\"rdm.procs.invulnlist.preface\">\n\t\t\t\tEach of the bullets below is the chronological order of procs wasted on an invulnerable boss\n\t\t\t</Trans>\n\t\t\t<ul>\n\t\t\t\t{allInvulns.map(item => <li key={item.timestamp}>\n\t\t\t\t\t<strong>{this.parser.formatEpochTimestamp(item.timestamp)}</strong>:&nbsp;\n\t\t\t\t\t{this.data.getAction((item as Events['action']).action)?.name}&nbsp;-&nbsp;<strong><Trans id=\"rdm.procs.invuln.target\">Target</Trans></strong>:&nbsp;{this.actors.get((item as Events['action']).target).name}\n\t\t\t\t</li>)}\n\t\t\t</ul>\n\t\t</Fragment>\n\t}\n}\n","import {Trans} from '@lingui/react'\nimport {DataLink} from 'components/ui/DbLink'\nimport {Action} from 'data/ACTIONS'\nimport {BASE_GCD} from 'data/CONSTANTS'\nimport {dependency} from 'parser/core/Injectable'\nimport {Actors} from 'parser/core/modules/Actors'\nimport Downtime from 'parser/core/modules/Downtime'\nimport {Swiftcast as CoreSwiftcast} from 'parser/core/modules/Swiftcast'\nimport React from 'react'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Swiftcast extends CoreSwiftcast {\n\tstatic override displayOrder = DISPLAY_ORDER.SWIFTCAST\n\n\t@dependency private downtime!: Downtime\n\t@dependency private actors!: Actors\n\n\t// If Swiftcast and Acceleration are both up, these actions consume Acceleration first.\n\tprivate accelerationActions: Action[] = [\n\t\tthis.data.actions.VERTHUNDER_III,\n\t\tthis.data.actions.VERAERO_III,\n\t\tthis.data.actions.IMPACT,\n\t]\n\n\toverride considerSwiftAction(action: Action): boolean {\n\t\t//We want to inspect the cast time to determine if the player was allowed to use SwiftCast or not\n\t\tconst castTime = action?.castTime ?? 0\n\t\tif (castTime > 0) {\n\t\t//As long as we aren't in downtime, the cast time must exceed the base GCD to qualify.\n\t\t\tif (!this.downtime.isDowntime() && castTime <= BASE_GCD) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\t// Ignore acceleration actions since they won't consume Swiftcast when you have Acceleration.\n\t\t\tif (this.actors.current.hasStatus(this.data.statuses.ACCELERATION.id) && this.accelerationActions.includes(action)) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\t//Then it had to be VerRaise, VerAero III, or VerThunder III or we were in downtime so it's valid\n\t\t\treturn true\n\t\t}\n\t\t//Use the default behavoir if we've gotten back no cast time\n\t\treturn super.considerSwiftAction(action)\n\t}\n\toverride suggestionContent = <Trans id=\"rdm.swiftcast.suggestion.content\">Spells used while <DataLink status=\"SWIFTCAST\"/> is up should be limited to <DataLink action=\"VERAERO_III\"/>, <DataLink action=\"VERTHUNDER_III\"/>, or <DataLink action=\"VERRAISE\"/></Trans>\n}\n","import {Weaving as CoreWeaving} from 'parser/core/modules/Weaving'\nimport {DISPLAY_ORDER} from './DISPLAY_ORDER'\n\nexport class Weaving extends CoreWeaving {\n\tstatic override displayOrder = DISPLAY_ORDER.WEAVING_ISSUES\n}\n","import {AlwaysBeCasting} from 'parser/core/modules/AlwaysBeCasting'\nimport {Tincture} from 'parser/core/modules/Tincture'\nimport {CastTime} from './CastTime'\nimport {Combos} from './Combos'\nimport {Defensives} from './Defensives'\nimport {DualCast} from './Dualcast'\nimport {Embolden} from './Embolden'\nimport {GeneralCDDowntime} from './GeneralCDDowntime'\nimport {Interrupts} from './Interrupts'\nimport {ManaGauge} from './ManaGauge'\nimport {ManaStackGauge} from './ManaStackGauge'\nimport {MeleeCombos} from './MeleeCombos'\nimport {Procs} from './Procs'\nimport {Swiftcast} from './Swiftcast'\nimport {Weaving} from './Weaving'\n\nexport {DualStatistic} from 'parser/jobs/rdm/statistics/DualStatistic'\n\nexport default [\n\tAlwaysBeCasting,\n\tEmbolden,\n\tManaGauge,\n\tManaStackGauge,\n\tCastTime,\n\tDefensives,\n\tDualCast,\n\tGeneralCDDowntime,\n\tInterrupts,\n\tProcs,\n\tCombos,\n\tMeleeCombos,\n\tTincture,\n\tSwiftcast,\n\tWeaving,\n]\n"],"names":["AlwaysBeCasting","CastTime","Checklist","Data","Downtime","GlobalCooldown","SpeedAdjustments","gcdUptimeSuggestionContent","Trans","id","gcdUptime","gcdsCounted","lastBeginCast","this","addEventHook","filter","source","parser","actor","type","onBeginCast","onCast","onComplete","event","action","data","getAction","onGcd","castTime","forEvent","globalCooldown","getDuration","ANIMATION_LOCK","recastTime","recastForEvent","castStart","timestamp","considerCast","relativeTimestamp","pull","debug","name","formatEpochTimestamp","Math","max","undefined","_action","downtime","isDowntime","fightDuration","currentDuration","getDowntime","uptime","checklist","add","Rule","description","displayOrder","requirements","Requirement","percent","getUptimePercent","target","Analyser","handle","dependency","speedAdjustments","DEFENSIVE_ROLE_ACTIONS","Defensives","Cooldowns","CooldownDowntime","Timeline","trackedDefensives","headerContent","get","JOBS","job","role","key","actions","forEach","roleAction","push","defensive","getUses","length","cooldowns","cooldownHistory","entry","endReason","CooldownEndReason","totalAdditionalUses","acc","usage","getAdditionalUsageData","start","chargesBeforeNextUse","getUsageCount","Fragment","icon","exclusive","styled","fluid","panels","index","title","content","getMaxUses","compact","unstackable","celled","tryGetAdditionalUseRow","getUsageRow","circular","size","onClick","timeline","show","end","availableTimestamp","currentCharges","charges","chargesAvailableEvent","chargeHistory","current","duration","cooldown","nextEntry","historyEntry","useByTimestamp","floor","DISPLAY_ORDER","cooldownDowntime","CAST_TIME_MAX_WEAVES","WEAVING_SEVERITY","SEVERITY","Weaving","Invulnerability","Suggestions","suggestionIcon","moduleLink","style","cursor","scrollTo","message","suggestionContent","severity","weaves","ongoingCastEvent","leadingGcdEvent","trailingGcdEvent","badWeaves","playerFilter","clearWeave","autoAttack","isOgcd","saveIfBad","suggestions","TieredSuggestion","why","tiers","value","leadingTimestamp","gcdTimeDiff","invulnerability","weave","isBadWeave","weaveCount","isActive","types","recast","BASE_GCD","getMaxWeaves","matchClosestLower","item","formatDuration","events","accelerationIndex","dualcastIndex","accelerationFilter","status","statuses","ACCELERATION","onGainAcceleration","onRemoveAcceleration","dualcastFilter","DUALCAST","onGainDualcast","onRemoveDualcast","setInstantCastAdjustment","VERAERO","VERAERO_III","VERTHUNDER","VERTHUNDER_III","SCATTER","IMPACT","reset","CoreCastTime","Combos","ACTIONS","_derpComboActions","_severityDerpComboActions","_notEnoughManaActions","_severityNotEnoughManaActions","_severityGenericActions","comboBreakers","uncomboedGcds","derpComboCount","notEnoughManaCount","breaker","cause","theRest","CoreCombos","MAGICK_BARRIER","CoreDefensives","SEVERITY_EXPIRED_DUALCAST","SEVERITY_WASTED_DUALCAST","DualCast","wastedDualCasts","expiredDualCasts","dualcastActive","playerEvents","onGain","onRemove","SPRINT","cast","Rotation","Accordion","Embolden","buffStatus","EMBOLDEN_SELF","EMBOLDEN_PARTY","IGNORE_ACTIONS","FLECHE","CONTRE_SIXTE","CORPS_A_CORPS","ENGAGEMENT","DISPLACEMENT","ADDLE","LUCID_DREAMING","SURECAST","ignoreActions","RaidBuffWindow","GeneralCDDowntime","defaultAllowedAverageDowntime","trackedCds","allowedAverageDowntime","MANAFICATION","firstUseOffset","EMBOLDEN","Interrupts","CoreInterrupts","SuggestionKey","DualStatistic","opts","label","title2","icon2","value2","Content","className","styles","src","AbstractStatistic","MANA_CAP","ManaGauge","Statistics","whiteManaGauge","CounterGauge","graph","color","maximum","minimum","blackManaGauge","gaugeModifiers","white","black","VERAERO_II","VERSTONE","VERHOLY","VERTHUNDER_II","VERFIRE","VERFLARE","JOLT","JOLT_II","SCORCH","RESOLUTION","spenderModifiers","ENCHANTED_REPRISE","ENCHANTED_MOULINET","ENCHANTED_RIPOSTE","ENCHANTED_ZWERCHHAU","ENCHANTED_REDOUBLEMENT","severityWastedMana","severityLostMana","manaLostDivisor","manaficationManaGain","manaStatistics","manaficationLoss","imbalanceLoss","invulnLoss","onGaugeModifying","oneOf","onGaugeSpender","onManafication","modifier","amount","penalized","isOutOfBalance","whiteModified","blackModified","isSuccessfulHit","modify","whiteModifier","getWhiteMana","blackModifier","getBlackMana","set","whiteMana","blackMana","overCap","statistics","info","getValueAt","CoreGauge","ManaStackGauge","manaStackGauge","manaStack","gaugeBreakers","gaugeBreak","overcapLoss","shouldGaugeBreak","onGaugeBreak","capped","manaSpender","manaGauge","abs","manaStacksLost","sum","MeleeCombos","Actors","finishers","severityWastedFinisher","whiteManaActions","proc","dualcast","finisher","blackManaActions","ignoreFinisherProcsManaThreshold","upperComboTimeFrame","openerDelayForgivenessDuration","suggestionText","WRONG_FINISHER","DELAY_COMBO","meleeCombos","History","lastAction","used","recommendedActions","recommendation","procs","broken","startingMana","incorrectFinishers","verholy","verflare","delay","footnoteIndexes","onDeath","getCurrent","combo","breakComboIfExists","startCombo","from","fromOptions","Array","isArray","handleFinisher","endCombo","breaksCombo","fightEnd","Table","collapsing","textAlign","marginRight","Button","endTimestampCap","whiteSpace","VERSTONE_READY","showName","VERFIRE_READY","Message","openNew","actors","at","hasStatus","getWhiteManaAt","getBlackManaAt","closeCurrent","whiteState","procReady","blackState","finisherAction","recommendedFinisher","outOfBalanceFinisher","inBalanceFinisher","assignOrGetFootnoteIndex","lowerManaState","higherManaState","comboDelayResults","manaLossToDelayCombo","finisherManaGain","manaLoss","firstManaState","secondManaState","possibleDelays","newLowerMana","newHigherMana","min","firstDelaySkill","a","b","SEVERITY_OVERWRITTEN_PROCS","SEVERITY_INVULN_PROCS","SEVERITY_MISSED_PROCS","Procs","trackedProcs","procStatus","consumeActions","missedFire","missedStone","overWrittenFire","overWrittenStone","invulnFire","invulnStone","getDropCountForStatus","getInvulnCountForStatus","getOverwriteCountForStatus","getMissedProcContent","getMissedProcWhy","getOverwrittenProcContent","getOverwrittenProcWhy","getInvulnProcContent","getInvulnProcWhy","allInvulns","getInvulnsForStatus","CoreProcs","Swiftcast","accelerationActions","CoreSwiftcast","CoreWeaving","Tincture"],"sourceRoot":""}